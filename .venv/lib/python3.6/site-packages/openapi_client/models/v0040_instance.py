# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040Instance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster': 'str',
        'extra': 'str',
        'instance_id': 'str',
        'instance_type': 'str',
        'node_name': 'str',
        'time': 'V0040InstanceTime'
    }

    attribute_map = {
        'cluster': 'cluster',
        'extra': 'extra',
        'instance_id': 'instance_id',
        'instance_type': 'instance_type',
        'node_name': 'node_name',
        'time': 'time'
    }

    def __init__(self, cluster=None, extra=None, instance_id=None, instance_type=None, node_name=None, time=None, local_vars_configuration=None):  # noqa: E501
        """V0040Instance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cluster = None
        self._extra = None
        self._instance_id = None
        self._instance_type = None
        self._node_name = None
        self._time = None
        self.discriminator = None

        if cluster is not None:
            self.cluster = cluster
        if extra is not None:
            self.extra = extra
        if instance_id is not None:
            self.instance_id = instance_id
        if instance_type is not None:
            self.instance_type = instance_type
        if node_name is not None:
            self.node_name = node_name
        if time is not None:
            self.time = time

    @property
    def cluster(self):
        """Gets the cluster of this V0040Instance.  # noqa: E501

        Cluster name  # noqa: E501

        :return: The cluster of this V0040Instance.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this V0040Instance.

        Cluster name  # noqa: E501

        :param cluster: The cluster of this V0040Instance.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def extra(self):
        """Gets the extra of this V0040Instance.  # noqa: E501

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :return: The extra of this V0040Instance.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this V0040Instance.

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :param extra: The extra of this V0040Instance.  # noqa: E501
        :type: str
        """

        self._extra = extra

    @property
    def instance_id(self):
        """Gets the instance_id of this V0040Instance.  # noqa: E501

        Cloud instance ID  # noqa: E501

        :return: The instance_id of this V0040Instance.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this V0040Instance.

        Cloud instance ID  # noqa: E501

        :param instance_id: The instance_id of this V0040Instance.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def instance_type(self):
        """Gets the instance_type of this V0040Instance.  # noqa: E501

        Cloud instance type  # noqa: E501

        :return: The instance_type of this V0040Instance.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this V0040Instance.

        Cloud instance type  # noqa: E501

        :param instance_type: The instance_type of this V0040Instance.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def node_name(self):
        """Gets the node_name of this V0040Instance.  # noqa: E501

        NodeName  # noqa: E501

        :return: The node_name of this V0040Instance.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this V0040Instance.

        NodeName  # noqa: E501

        :param node_name: The node_name of this V0040Instance.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def time(self):
        """Gets the time of this V0040Instance.  # noqa: E501


        :return: The time of this V0040Instance.  # noqa: E501
        :rtype: V0040InstanceTime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this V0040Instance.


        :param time: The time of this V0040Instance.  # noqa: E501
        :type: V0040InstanceTime
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040Instance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040Instance):
            return True

        return self.to_dict() != other.to_dict()
