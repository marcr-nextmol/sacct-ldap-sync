# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040AssocSharesObjWrapTres(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'run_seconds': 'list[V0040SharesUint64Tres]',
        'group_minutes': 'list[V0040SharesUint64Tres]',
        'usage': 'list[V0040SharesFloat128Tres]'
    }

    attribute_map = {
        'run_seconds': 'run_seconds',
        'group_minutes': 'group_minutes',
        'usage': 'usage'
    }

    def __init__(self, run_seconds=None, group_minutes=None, usage=None, local_vars_configuration=None):  # noqa: E501
        """V0040AssocSharesObjWrapTres - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._run_seconds = None
        self._group_minutes = None
        self._usage = None
        self.discriminator = None

        if run_seconds is not None:
            self.run_seconds = run_seconds
        if group_minutes is not None:
            self.group_minutes = group_minutes
        if usage is not None:
            self.usage = usage

    @property
    def run_seconds(self):
        """Gets the run_seconds of this V0040AssocSharesObjWrapTres.  # noqa: E501


        :return: The run_seconds of this V0040AssocSharesObjWrapTres.  # noqa: E501
        :rtype: list[V0040SharesUint64Tres]
        """
        return self._run_seconds

    @run_seconds.setter
    def run_seconds(self, run_seconds):
        """Sets the run_seconds of this V0040AssocSharesObjWrapTres.


        :param run_seconds: The run_seconds of this V0040AssocSharesObjWrapTres.  # noqa: E501
        :type: list[V0040SharesUint64Tres]
        """

        self._run_seconds = run_seconds

    @property
    def group_minutes(self):
        """Gets the group_minutes of this V0040AssocSharesObjWrapTres.  # noqa: E501


        :return: The group_minutes of this V0040AssocSharesObjWrapTres.  # noqa: E501
        :rtype: list[V0040SharesUint64Tres]
        """
        return self._group_minutes

    @group_minutes.setter
    def group_minutes(self, group_minutes):
        """Sets the group_minutes of this V0040AssocSharesObjWrapTres.


        :param group_minutes: The group_minutes of this V0040AssocSharesObjWrapTres.  # noqa: E501
        :type: list[V0040SharesUint64Tres]
        """

        self._group_minutes = group_minutes

    @property
    def usage(self):
        """Gets the usage of this V0040AssocSharesObjWrapTres.  # noqa: E501


        :return: The usage of this V0040AssocSharesObjWrapTres.  # noqa: E501
        :rtype: list[V0040SharesFloat128Tres]
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this V0040AssocSharesObjWrapTres.


        :param usage: The usage of this V0040AssocSharesObjWrapTres.  # noqa: E501
        :type: list[V0040SharesFloat128Tres]
        """

        self._usage = usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040AssocSharesObjWrapTres):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040AssocSharesObjWrapTres):
            return True

        return self.to_dict() != other.to_dict()
