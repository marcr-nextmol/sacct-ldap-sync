# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040Assoc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accounting': 'list[V0040Accounting]',
        'account': 'str',
        'cluster': 'str',
        'comment': 'str',
        'default': 'V0040AssocDefault',
        'flags': 'list[str]',
        'max': 'V0040AssocMax',
        'id': 'V0040AssocShort',
        'is_default': 'bool',
        'lineage': 'str',
        'min': 'V0040AssocMin',
        'parent_account': 'str',
        'partition': 'str',
        'priority': 'V0040Uint32NoVal',
        'qos': 'list[str]',
        'shares_raw': 'int',
        'user': 'str'
    }

    attribute_map = {
        'accounting': 'accounting',
        'account': 'account',
        'cluster': 'cluster',
        'comment': 'comment',
        'default': 'default',
        'flags': 'flags',
        'max': 'max',
        'id': 'id',
        'is_default': 'is_default',
        'lineage': 'lineage',
        'min': 'min',
        'parent_account': 'parent_account',
        'partition': 'partition',
        'priority': 'priority',
        'qos': 'qos',
        'shares_raw': 'shares_raw',
        'user': 'user'
    }

    def __init__(self, accounting=None, account=None, cluster=None, comment=None, default=None, flags=None, max=None, id=None, is_default=None, lineage=None, min=None, parent_account=None, partition=None, priority=None, qos=None, shares_raw=None, user=None, local_vars_configuration=None):  # noqa: E501
        """V0040Assoc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accounting = None
        self._account = None
        self._cluster = None
        self._comment = None
        self._default = None
        self._flags = None
        self._max = None
        self._id = None
        self._is_default = None
        self._lineage = None
        self._min = None
        self._parent_account = None
        self._partition = None
        self._priority = None
        self._qos = None
        self._shares_raw = None
        self._user = None
        self.discriminator = None

        if accounting is not None:
            self.accounting = accounting
        if account is not None:
            self.account = account
        if cluster is not None:
            self.cluster = cluster
        if comment is not None:
            self.comment = comment
        if default is not None:
            self.default = default
        if flags is not None:
            self.flags = flags
        if max is not None:
            self.max = max
        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        if lineage is not None:
            self.lineage = lineage
        if min is not None:
            self.min = min
        if parent_account is not None:
            self.parent_account = parent_account
        if partition is not None:
            self.partition = partition
        if priority is not None:
            self.priority = priority
        if qos is not None:
            self.qos = qos
        if shares_raw is not None:
            self.shares_raw = shares_raw
        self.user = user

    @property
    def accounting(self):
        """Gets the accounting of this V0040Assoc.  # noqa: E501


        :return: The accounting of this V0040Assoc.  # noqa: E501
        :rtype: list[V0040Accounting]
        """
        return self._accounting

    @accounting.setter
    def accounting(self, accounting):
        """Sets the accounting of this V0040Assoc.


        :param accounting: The accounting of this V0040Assoc.  # noqa: E501
        :type: list[V0040Accounting]
        """

        self._accounting = accounting

    @property
    def account(self):
        """Gets the account of this V0040Assoc.  # noqa: E501

        Account  # noqa: E501

        :return: The account of this V0040Assoc.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this V0040Assoc.

        Account  # noqa: E501

        :param account: The account of this V0040Assoc.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def cluster(self):
        """Gets the cluster of this V0040Assoc.  # noqa: E501

        Cluster name  # noqa: E501

        :return: The cluster of this V0040Assoc.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this V0040Assoc.

        Cluster name  # noqa: E501

        :param cluster: The cluster of this V0040Assoc.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def comment(self):
        """Gets the comment of this V0040Assoc.  # noqa: E501

        Arbitrary comment  # noqa: E501

        :return: The comment of this V0040Assoc.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this V0040Assoc.

        Arbitrary comment  # noqa: E501

        :param comment: The comment of this V0040Assoc.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def default(self):
        """Gets the default of this V0040Assoc.  # noqa: E501


        :return: The default of this V0040Assoc.  # noqa: E501
        :rtype: V0040AssocDefault
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this V0040Assoc.


        :param default: The default of this V0040Assoc.  # noqa: E501
        :type: V0040AssocDefault
        """

        self._default = default

    @property
    def flags(self):
        """Gets the flags of this V0040Assoc.  # noqa: E501

        Flags on the association  # noqa: E501

        :return: The flags of this V0040Assoc.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040Assoc.

        Flags on the association  # noqa: E501

        :param flags: The flags of this V0040Assoc.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DELETED"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def max(self):
        """Gets the max of this V0040Assoc.  # noqa: E501


        :return: The max of this V0040Assoc.  # noqa: E501
        :rtype: V0040AssocMax
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this V0040Assoc.


        :param max: The max of this V0040Assoc.  # noqa: E501
        :type: V0040AssocMax
        """

        self._max = max

    @property
    def id(self):
        """Gets the id of this V0040Assoc.  # noqa: E501


        :return: The id of this V0040Assoc.  # noqa: E501
        :rtype: V0040AssocShort
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V0040Assoc.


        :param id: The id of this V0040Assoc.  # noqa: E501
        :type: V0040AssocShort
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this V0040Assoc.  # noqa: E501

        Is default association for user  # noqa: E501

        :return: The is_default of this V0040Assoc.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this V0040Assoc.

        Is default association for user  # noqa: E501

        :param is_default: The is_default of this V0040Assoc.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def lineage(self):
        """Gets the lineage of this V0040Assoc.  # noqa: E501

        Complete path up the hierarchy to the root association  # noqa: E501

        :return: The lineage of this V0040Assoc.  # noqa: E501
        :rtype: str
        """
        return self._lineage

    @lineage.setter
    def lineage(self, lineage):
        """Sets the lineage of this V0040Assoc.

        Complete path up the hierarchy to the root association  # noqa: E501

        :param lineage: The lineage of this V0040Assoc.  # noqa: E501
        :type: str
        """

        self._lineage = lineage

    @property
    def min(self):
        """Gets the min of this V0040Assoc.  # noqa: E501


        :return: The min of this V0040Assoc.  # noqa: E501
        :rtype: V0040AssocMin
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this V0040Assoc.


        :param min: The min of this V0040Assoc.  # noqa: E501
        :type: V0040AssocMin
        """

        self._min = min

    @property
    def parent_account(self):
        """Gets the parent_account of this V0040Assoc.  # noqa: E501

        Name of parent account  # noqa: E501

        :return: The parent_account of this V0040Assoc.  # noqa: E501
        :rtype: str
        """
        return self._parent_account

    @parent_account.setter
    def parent_account(self, parent_account):
        """Sets the parent_account of this V0040Assoc.

        Name of parent account  # noqa: E501

        :param parent_account: The parent_account of this V0040Assoc.  # noqa: E501
        :type: str
        """

        self._parent_account = parent_account

    @property
    def partition(self):
        """Gets the partition of this V0040Assoc.  # noqa: E501

        Partition name  # noqa: E501

        :return: The partition of this V0040Assoc.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this V0040Assoc.

        Partition name  # noqa: E501

        :param partition: The partition of this V0040Assoc.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def priority(self):
        """Gets the priority of this V0040Assoc.  # noqa: E501


        :return: The priority of this V0040Assoc.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this V0040Assoc.


        :param priority: The priority of this V0040Assoc.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._priority = priority

    @property
    def qos(self):
        """Gets the qos of this V0040Assoc.  # noqa: E501

        List of QOS names  # noqa: E501

        :return: The qos of this V0040Assoc.  # noqa: E501
        :rtype: list[str]
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this V0040Assoc.

        List of QOS names  # noqa: E501

        :param qos: The qos of this V0040Assoc.  # noqa: E501
        :type: list[str]
        """

        self._qos = qos

    @property
    def shares_raw(self):
        """Gets the shares_raw of this V0040Assoc.  # noqa: E501

        Allocated shares used for fairshare calculation  # noqa: E501

        :return: The shares_raw of this V0040Assoc.  # noqa: E501
        :rtype: int
        """
        return self._shares_raw

    @shares_raw.setter
    def shares_raw(self, shares_raw):
        """Sets the shares_raw of this V0040Assoc.

        Allocated shares used for fairshare calculation  # noqa: E501

        :param shares_raw: The shares_raw of this V0040Assoc.  # noqa: E501
        :type: int
        """

        self._shares_raw = shares_raw

    @property
    def user(self):
        """Gets the user of this V0040Assoc.  # noqa: E501

        User name  # noqa: E501

        :return: The user of this V0040Assoc.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V0040Assoc.

        User name  # noqa: E501

        :param user: The user of this V0040Assoc.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040Assoc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040Assoc):
            return True

        return self.to_dict() != other.to_dict()
