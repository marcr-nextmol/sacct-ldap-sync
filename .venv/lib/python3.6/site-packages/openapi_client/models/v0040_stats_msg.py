# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040StatsMsg(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parts_packed': 'int',
        'req_time': 'V0040Uint64NoVal',
        'req_time_start': 'V0040Uint64NoVal',
        'server_thread_count': 'int',
        'agent_queue_size': 'int',
        'agent_count': 'int',
        'agent_thread_count': 'int',
        'dbd_agent_queue_size': 'int',
        'gettimeofday_latency': 'int',
        'schedule_cycle_max': 'int',
        'schedule_cycle_last': 'int',
        'schedule_cycle_total': 'int',
        'schedule_cycle_mean': 'int',
        'schedule_cycle_mean_depth': 'int',
        'schedule_cycle_per_minute': 'int',
        'schedule_queue_length': 'int',
        'schedule_exit': 'V0040ScheduleExitFields',
        'jobs_submitted': 'int',
        'jobs_started': 'int',
        'jobs_completed': 'int',
        'jobs_canceled': 'int',
        'jobs_failed': 'int',
        'jobs_pending': 'int',
        'jobs_running': 'int',
        'job_states_ts': 'V0040Uint64NoVal',
        'bf_backfilled_jobs': 'int',
        'bf_last_backfilled_jobs': 'int',
        'bf_backfilled_het_jobs': 'int',
        'bf_cycle_counter': 'int',
        'bf_cycle_mean': 'int',
        'bf_depth_mean': 'int',
        'bf_depth_mean_try': 'int',
        'bf_cycle_sum': 'int',
        'bf_cycle_last': 'int',
        'bf_last_depth': 'int',
        'bf_last_depth_try': 'int',
        'bf_depth_sum': 'int',
        'bf_depth_try_sum': 'int',
        'bf_queue_len': 'int',
        'bf_queue_len_mean': 'int',
        'bf_queue_len_sum': 'int',
        'bf_table_size': 'int',
        'bf_table_size_mean': 'int',
        'bf_when_last_cycle': 'V0040Uint64NoVal',
        'bf_active': 'bool',
        'bf_exit': 'V0040BfExitFields',
        'rpcs_by_message_type': 'list[object]',
        'rpcs_by_user': 'list[object]'
    }

    attribute_map = {
        'parts_packed': 'parts_packed',
        'req_time': 'req_time',
        'req_time_start': 'req_time_start',
        'server_thread_count': 'server_thread_count',
        'agent_queue_size': 'agent_queue_size',
        'agent_count': 'agent_count',
        'agent_thread_count': 'agent_thread_count',
        'dbd_agent_queue_size': 'dbd_agent_queue_size',
        'gettimeofday_latency': 'gettimeofday_latency',
        'schedule_cycle_max': 'schedule_cycle_max',
        'schedule_cycle_last': 'schedule_cycle_last',
        'schedule_cycle_total': 'schedule_cycle_total',
        'schedule_cycle_mean': 'schedule_cycle_mean',
        'schedule_cycle_mean_depth': 'schedule_cycle_mean_depth',
        'schedule_cycle_per_minute': 'schedule_cycle_per_minute',
        'schedule_queue_length': 'schedule_queue_length',
        'schedule_exit': 'schedule_exit',
        'jobs_submitted': 'jobs_submitted',
        'jobs_started': 'jobs_started',
        'jobs_completed': 'jobs_completed',
        'jobs_canceled': 'jobs_canceled',
        'jobs_failed': 'jobs_failed',
        'jobs_pending': 'jobs_pending',
        'jobs_running': 'jobs_running',
        'job_states_ts': 'job_states_ts',
        'bf_backfilled_jobs': 'bf_backfilled_jobs',
        'bf_last_backfilled_jobs': 'bf_last_backfilled_jobs',
        'bf_backfilled_het_jobs': 'bf_backfilled_het_jobs',
        'bf_cycle_counter': 'bf_cycle_counter',
        'bf_cycle_mean': 'bf_cycle_mean',
        'bf_depth_mean': 'bf_depth_mean',
        'bf_depth_mean_try': 'bf_depth_mean_try',
        'bf_cycle_sum': 'bf_cycle_sum',
        'bf_cycle_last': 'bf_cycle_last',
        'bf_last_depth': 'bf_last_depth',
        'bf_last_depth_try': 'bf_last_depth_try',
        'bf_depth_sum': 'bf_depth_sum',
        'bf_depth_try_sum': 'bf_depth_try_sum',
        'bf_queue_len': 'bf_queue_len',
        'bf_queue_len_mean': 'bf_queue_len_mean',
        'bf_queue_len_sum': 'bf_queue_len_sum',
        'bf_table_size': 'bf_table_size',
        'bf_table_size_mean': 'bf_table_size_mean',
        'bf_when_last_cycle': 'bf_when_last_cycle',
        'bf_active': 'bf_active',
        'bf_exit': 'bf_exit',
        'rpcs_by_message_type': 'rpcs_by_message_type',
        'rpcs_by_user': 'rpcs_by_user'
    }

    def __init__(self, parts_packed=None, req_time=None, req_time_start=None, server_thread_count=None, agent_queue_size=None, agent_count=None, agent_thread_count=None, dbd_agent_queue_size=None, gettimeofday_latency=None, schedule_cycle_max=None, schedule_cycle_last=None, schedule_cycle_total=None, schedule_cycle_mean=None, schedule_cycle_mean_depth=None, schedule_cycle_per_minute=None, schedule_queue_length=None, schedule_exit=None, jobs_submitted=None, jobs_started=None, jobs_completed=None, jobs_canceled=None, jobs_failed=None, jobs_pending=None, jobs_running=None, job_states_ts=None, bf_backfilled_jobs=None, bf_last_backfilled_jobs=None, bf_backfilled_het_jobs=None, bf_cycle_counter=None, bf_cycle_mean=None, bf_depth_mean=None, bf_depth_mean_try=None, bf_cycle_sum=None, bf_cycle_last=None, bf_last_depth=None, bf_last_depth_try=None, bf_depth_sum=None, bf_depth_try_sum=None, bf_queue_len=None, bf_queue_len_mean=None, bf_queue_len_sum=None, bf_table_size=None, bf_table_size_mean=None, bf_when_last_cycle=None, bf_active=None, bf_exit=None, rpcs_by_message_type=None, rpcs_by_user=None, local_vars_configuration=None):  # noqa: E501
        """V0040StatsMsg - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._parts_packed = None
        self._req_time = None
        self._req_time_start = None
        self._server_thread_count = None
        self._agent_queue_size = None
        self._agent_count = None
        self._agent_thread_count = None
        self._dbd_agent_queue_size = None
        self._gettimeofday_latency = None
        self._schedule_cycle_max = None
        self._schedule_cycle_last = None
        self._schedule_cycle_total = None
        self._schedule_cycle_mean = None
        self._schedule_cycle_mean_depth = None
        self._schedule_cycle_per_minute = None
        self._schedule_queue_length = None
        self._schedule_exit = None
        self._jobs_submitted = None
        self._jobs_started = None
        self._jobs_completed = None
        self._jobs_canceled = None
        self._jobs_failed = None
        self._jobs_pending = None
        self._jobs_running = None
        self._job_states_ts = None
        self._bf_backfilled_jobs = None
        self._bf_last_backfilled_jobs = None
        self._bf_backfilled_het_jobs = None
        self._bf_cycle_counter = None
        self._bf_cycle_mean = None
        self._bf_depth_mean = None
        self._bf_depth_mean_try = None
        self._bf_cycle_sum = None
        self._bf_cycle_last = None
        self._bf_last_depth = None
        self._bf_last_depth_try = None
        self._bf_depth_sum = None
        self._bf_depth_try_sum = None
        self._bf_queue_len = None
        self._bf_queue_len_mean = None
        self._bf_queue_len_sum = None
        self._bf_table_size = None
        self._bf_table_size_mean = None
        self._bf_when_last_cycle = None
        self._bf_active = None
        self._bf_exit = None
        self._rpcs_by_message_type = None
        self._rpcs_by_user = None
        self.discriminator = None

        if parts_packed is not None:
            self.parts_packed = parts_packed
        if req_time is not None:
            self.req_time = req_time
        if req_time_start is not None:
            self.req_time_start = req_time_start
        if server_thread_count is not None:
            self.server_thread_count = server_thread_count
        if agent_queue_size is not None:
            self.agent_queue_size = agent_queue_size
        if agent_count is not None:
            self.agent_count = agent_count
        if agent_thread_count is not None:
            self.agent_thread_count = agent_thread_count
        if dbd_agent_queue_size is not None:
            self.dbd_agent_queue_size = dbd_agent_queue_size
        if gettimeofday_latency is not None:
            self.gettimeofday_latency = gettimeofday_latency
        if schedule_cycle_max is not None:
            self.schedule_cycle_max = schedule_cycle_max
        if schedule_cycle_last is not None:
            self.schedule_cycle_last = schedule_cycle_last
        if schedule_cycle_total is not None:
            self.schedule_cycle_total = schedule_cycle_total
        if schedule_cycle_mean is not None:
            self.schedule_cycle_mean = schedule_cycle_mean
        if schedule_cycle_mean_depth is not None:
            self.schedule_cycle_mean_depth = schedule_cycle_mean_depth
        if schedule_cycle_per_minute is not None:
            self.schedule_cycle_per_minute = schedule_cycle_per_minute
        if schedule_queue_length is not None:
            self.schedule_queue_length = schedule_queue_length
        if schedule_exit is not None:
            self.schedule_exit = schedule_exit
        if jobs_submitted is not None:
            self.jobs_submitted = jobs_submitted
        if jobs_started is not None:
            self.jobs_started = jobs_started
        if jobs_completed is not None:
            self.jobs_completed = jobs_completed
        if jobs_canceled is not None:
            self.jobs_canceled = jobs_canceled
        if jobs_failed is not None:
            self.jobs_failed = jobs_failed
        if jobs_pending is not None:
            self.jobs_pending = jobs_pending
        if jobs_running is not None:
            self.jobs_running = jobs_running
        if job_states_ts is not None:
            self.job_states_ts = job_states_ts
        if bf_backfilled_jobs is not None:
            self.bf_backfilled_jobs = bf_backfilled_jobs
        if bf_last_backfilled_jobs is not None:
            self.bf_last_backfilled_jobs = bf_last_backfilled_jobs
        if bf_backfilled_het_jobs is not None:
            self.bf_backfilled_het_jobs = bf_backfilled_het_jobs
        if bf_cycle_counter is not None:
            self.bf_cycle_counter = bf_cycle_counter
        if bf_cycle_mean is not None:
            self.bf_cycle_mean = bf_cycle_mean
        if bf_depth_mean is not None:
            self.bf_depth_mean = bf_depth_mean
        if bf_depth_mean_try is not None:
            self.bf_depth_mean_try = bf_depth_mean_try
        if bf_cycle_sum is not None:
            self.bf_cycle_sum = bf_cycle_sum
        if bf_cycle_last is not None:
            self.bf_cycle_last = bf_cycle_last
        if bf_last_depth is not None:
            self.bf_last_depth = bf_last_depth
        if bf_last_depth_try is not None:
            self.bf_last_depth_try = bf_last_depth_try
        if bf_depth_sum is not None:
            self.bf_depth_sum = bf_depth_sum
        if bf_depth_try_sum is not None:
            self.bf_depth_try_sum = bf_depth_try_sum
        if bf_queue_len is not None:
            self.bf_queue_len = bf_queue_len
        if bf_queue_len_mean is not None:
            self.bf_queue_len_mean = bf_queue_len_mean
        if bf_queue_len_sum is not None:
            self.bf_queue_len_sum = bf_queue_len_sum
        if bf_table_size is not None:
            self.bf_table_size = bf_table_size
        if bf_table_size_mean is not None:
            self.bf_table_size_mean = bf_table_size_mean
        if bf_when_last_cycle is not None:
            self.bf_when_last_cycle = bf_when_last_cycle
        if bf_active is not None:
            self.bf_active = bf_active
        if bf_exit is not None:
            self.bf_exit = bf_exit
        if rpcs_by_message_type is not None:
            self.rpcs_by_message_type = rpcs_by_message_type
        if rpcs_by_user is not None:
            self.rpcs_by_user = rpcs_by_user

    @property
    def parts_packed(self):
        """Gets the parts_packed of this V0040StatsMsg.  # noqa: E501

        Zero if only RPC statistic included  # noqa: E501

        :return: The parts_packed of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._parts_packed

    @parts_packed.setter
    def parts_packed(self, parts_packed):
        """Sets the parts_packed of this V0040StatsMsg.

        Zero if only RPC statistic included  # noqa: E501

        :param parts_packed: The parts_packed of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._parts_packed = parts_packed

    @property
    def req_time(self):
        """Gets the req_time of this V0040StatsMsg.  # noqa: E501


        :return: The req_time of this V0040StatsMsg.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._req_time

    @req_time.setter
    def req_time(self, req_time):
        """Sets the req_time of this V0040StatsMsg.


        :param req_time: The req_time of this V0040StatsMsg.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._req_time = req_time

    @property
    def req_time_start(self):
        """Gets the req_time_start of this V0040StatsMsg.  # noqa: E501


        :return: The req_time_start of this V0040StatsMsg.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._req_time_start

    @req_time_start.setter
    def req_time_start(self, req_time_start):
        """Sets the req_time_start of this V0040StatsMsg.


        :param req_time_start: The req_time_start of this V0040StatsMsg.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._req_time_start = req_time_start

    @property
    def server_thread_count(self):
        """Gets the server_thread_count of this V0040StatsMsg.  # noqa: E501

        Number of current active slurmctld threads  # noqa: E501

        :return: The server_thread_count of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._server_thread_count

    @server_thread_count.setter
    def server_thread_count(self, server_thread_count):
        """Sets the server_thread_count of this V0040StatsMsg.

        Number of current active slurmctld threads  # noqa: E501

        :param server_thread_count: The server_thread_count of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._server_thread_count = server_thread_count

    @property
    def agent_queue_size(self):
        """Gets the agent_queue_size of this V0040StatsMsg.  # noqa: E501

        Number of enqueued outgoing RPC requests in an internal retry list  # noqa: E501

        :return: The agent_queue_size of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._agent_queue_size

    @agent_queue_size.setter
    def agent_queue_size(self, agent_queue_size):
        """Sets the agent_queue_size of this V0040StatsMsg.

        Number of enqueued outgoing RPC requests in an internal retry list  # noqa: E501

        :param agent_queue_size: The agent_queue_size of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._agent_queue_size = agent_queue_size

    @property
    def agent_count(self):
        """Gets the agent_count of this V0040StatsMsg.  # noqa: E501

        Number of agent threads  # noqa: E501

        :return: The agent_count of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._agent_count

    @agent_count.setter
    def agent_count(self, agent_count):
        """Sets the agent_count of this V0040StatsMsg.

        Number of agent threads  # noqa: E501

        :param agent_count: The agent_count of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._agent_count = agent_count

    @property
    def agent_thread_count(self):
        """Gets the agent_thread_count of this V0040StatsMsg.  # noqa: E501

        Total number of active threads created by all agent threads  # noqa: E501

        :return: The agent_thread_count of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._agent_thread_count

    @agent_thread_count.setter
    def agent_thread_count(self, agent_thread_count):
        """Sets the agent_thread_count of this V0040StatsMsg.

        Total number of active threads created by all agent threads  # noqa: E501

        :param agent_thread_count: The agent_thread_count of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._agent_thread_count = agent_thread_count

    @property
    def dbd_agent_queue_size(self):
        """Gets the dbd_agent_queue_size of this V0040StatsMsg.  # noqa: E501

        Number of messages for SlurmDBD that are queued  # noqa: E501

        :return: The dbd_agent_queue_size of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._dbd_agent_queue_size

    @dbd_agent_queue_size.setter
    def dbd_agent_queue_size(self, dbd_agent_queue_size):
        """Sets the dbd_agent_queue_size of this V0040StatsMsg.

        Number of messages for SlurmDBD that are queued  # noqa: E501

        :param dbd_agent_queue_size: The dbd_agent_queue_size of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._dbd_agent_queue_size = dbd_agent_queue_size

    @property
    def gettimeofday_latency(self):
        """Gets the gettimeofday_latency of this V0040StatsMsg.  # noqa: E501

        Latency of 1000 calls to the gettimeofday() syscall in microseconds, as measured at controller startup  # noqa: E501

        :return: The gettimeofday_latency of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._gettimeofday_latency

    @gettimeofday_latency.setter
    def gettimeofday_latency(self, gettimeofday_latency):
        """Sets the gettimeofday_latency of this V0040StatsMsg.

        Latency of 1000 calls to the gettimeofday() syscall in microseconds, as measured at controller startup  # noqa: E501

        :param gettimeofday_latency: The gettimeofday_latency of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._gettimeofday_latency = gettimeofday_latency

    @property
    def schedule_cycle_max(self):
        """Gets the schedule_cycle_max of this V0040StatsMsg.  # noqa: E501

        Max time of any scheduling cycle in microseconds since last reset  # noqa: E501

        :return: The schedule_cycle_max of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._schedule_cycle_max

    @schedule_cycle_max.setter
    def schedule_cycle_max(self, schedule_cycle_max):
        """Sets the schedule_cycle_max of this V0040StatsMsg.

        Max time of any scheduling cycle in microseconds since last reset  # noqa: E501

        :param schedule_cycle_max: The schedule_cycle_max of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._schedule_cycle_max = schedule_cycle_max

    @property
    def schedule_cycle_last(self):
        """Gets the schedule_cycle_last of this V0040StatsMsg.  # noqa: E501

        Time in microseconds for last scheduling cycle  # noqa: E501

        :return: The schedule_cycle_last of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._schedule_cycle_last

    @schedule_cycle_last.setter
    def schedule_cycle_last(self, schedule_cycle_last):
        """Sets the schedule_cycle_last of this V0040StatsMsg.

        Time in microseconds for last scheduling cycle  # noqa: E501

        :param schedule_cycle_last: The schedule_cycle_last of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._schedule_cycle_last = schedule_cycle_last

    @property
    def schedule_cycle_total(self):
        """Gets the schedule_cycle_total of this V0040StatsMsg.  # noqa: E501

        Number of scheduling cycles since last reset  # noqa: E501

        :return: The schedule_cycle_total of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._schedule_cycle_total

    @schedule_cycle_total.setter
    def schedule_cycle_total(self, schedule_cycle_total):
        """Sets the schedule_cycle_total of this V0040StatsMsg.

        Number of scheduling cycles since last reset  # noqa: E501

        :param schedule_cycle_total: The schedule_cycle_total of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._schedule_cycle_total = schedule_cycle_total

    @property
    def schedule_cycle_mean(self):
        """Gets the schedule_cycle_mean of this V0040StatsMsg.  # noqa: E501

        Mean time in microseconds for all scheduling cycles since last reset  # noqa: E501

        :return: The schedule_cycle_mean of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._schedule_cycle_mean

    @schedule_cycle_mean.setter
    def schedule_cycle_mean(self, schedule_cycle_mean):
        """Sets the schedule_cycle_mean of this V0040StatsMsg.

        Mean time in microseconds for all scheduling cycles since last reset  # noqa: E501

        :param schedule_cycle_mean: The schedule_cycle_mean of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._schedule_cycle_mean = schedule_cycle_mean

    @property
    def schedule_cycle_mean_depth(self):
        """Gets the schedule_cycle_mean_depth of this V0040StatsMsg.  # noqa: E501

        Mean of the number of jobs processed in a scheduling cycle  # noqa: E501

        :return: The schedule_cycle_mean_depth of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._schedule_cycle_mean_depth

    @schedule_cycle_mean_depth.setter
    def schedule_cycle_mean_depth(self, schedule_cycle_mean_depth):
        """Sets the schedule_cycle_mean_depth of this V0040StatsMsg.

        Mean of the number of jobs processed in a scheduling cycle  # noqa: E501

        :param schedule_cycle_mean_depth: The schedule_cycle_mean_depth of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._schedule_cycle_mean_depth = schedule_cycle_mean_depth

    @property
    def schedule_cycle_per_minute(self):
        """Gets the schedule_cycle_per_minute of this V0040StatsMsg.  # noqa: E501

        Number of scheduling executions per minute  # noqa: E501

        :return: The schedule_cycle_per_minute of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._schedule_cycle_per_minute

    @schedule_cycle_per_minute.setter
    def schedule_cycle_per_minute(self, schedule_cycle_per_minute):
        """Sets the schedule_cycle_per_minute of this V0040StatsMsg.

        Number of scheduling executions per minute  # noqa: E501

        :param schedule_cycle_per_minute: The schedule_cycle_per_minute of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._schedule_cycle_per_minute = schedule_cycle_per_minute

    @property
    def schedule_queue_length(self):
        """Gets the schedule_queue_length of this V0040StatsMsg.  # noqa: E501

        Number of jobs pending in queue  # noqa: E501

        :return: The schedule_queue_length of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._schedule_queue_length

    @schedule_queue_length.setter
    def schedule_queue_length(self, schedule_queue_length):
        """Sets the schedule_queue_length of this V0040StatsMsg.

        Number of jobs pending in queue  # noqa: E501

        :param schedule_queue_length: The schedule_queue_length of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._schedule_queue_length = schedule_queue_length

    @property
    def schedule_exit(self):
        """Gets the schedule_exit of this V0040StatsMsg.  # noqa: E501


        :return: The schedule_exit of this V0040StatsMsg.  # noqa: E501
        :rtype: V0040ScheduleExitFields
        """
        return self._schedule_exit

    @schedule_exit.setter
    def schedule_exit(self, schedule_exit):
        """Sets the schedule_exit of this V0040StatsMsg.


        :param schedule_exit: The schedule_exit of this V0040StatsMsg.  # noqa: E501
        :type: V0040ScheduleExitFields
        """

        self._schedule_exit = schedule_exit

    @property
    def jobs_submitted(self):
        """Gets the jobs_submitted of this V0040StatsMsg.  # noqa: E501

        Number of jobs submitted since last reset  # noqa: E501

        :return: The jobs_submitted of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._jobs_submitted

    @jobs_submitted.setter
    def jobs_submitted(self, jobs_submitted):
        """Sets the jobs_submitted of this V0040StatsMsg.

        Number of jobs submitted since last reset  # noqa: E501

        :param jobs_submitted: The jobs_submitted of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._jobs_submitted = jobs_submitted

    @property
    def jobs_started(self):
        """Gets the jobs_started of this V0040StatsMsg.  # noqa: E501

        Number of jobs started since last reset  # noqa: E501

        :return: The jobs_started of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._jobs_started

    @jobs_started.setter
    def jobs_started(self, jobs_started):
        """Sets the jobs_started of this V0040StatsMsg.

        Number of jobs started since last reset  # noqa: E501

        :param jobs_started: The jobs_started of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._jobs_started = jobs_started

    @property
    def jobs_completed(self):
        """Gets the jobs_completed of this V0040StatsMsg.  # noqa: E501

        Number of jobs completed since last reset  # noqa: E501

        :return: The jobs_completed of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._jobs_completed

    @jobs_completed.setter
    def jobs_completed(self, jobs_completed):
        """Sets the jobs_completed of this V0040StatsMsg.

        Number of jobs completed since last reset  # noqa: E501

        :param jobs_completed: The jobs_completed of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._jobs_completed = jobs_completed

    @property
    def jobs_canceled(self):
        """Gets the jobs_canceled of this V0040StatsMsg.  # noqa: E501

        Number of jobs canceled since the last reset  # noqa: E501

        :return: The jobs_canceled of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._jobs_canceled

    @jobs_canceled.setter
    def jobs_canceled(self, jobs_canceled):
        """Sets the jobs_canceled of this V0040StatsMsg.

        Number of jobs canceled since the last reset  # noqa: E501

        :param jobs_canceled: The jobs_canceled of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._jobs_canceled = jobs_canceled

    @property
    def jobs_failed(self):
        """Gets the jobs_failed of this V0040StatsMsg.  # noqa: E501

        Number of jobs failed due to slurmd or other internal issues since last reset  # noqa: E501

        :return: The jobs_failed of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._jobs_failed

    @jobs_failed.setter
    def jobs_failed(self, jobs_failed):
        """Sets the jobs_failed of this V0040StatsMsg.

        Number of jobs failed due to slurmd or other internal issues since last reset  # noqa: E501

        :param jobs_failed: The jobs_failed of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._jobs_failed = jobs_failed

    @property
    def jobs_pending(self):
        """Gets the jobs_pending of this V0040StatsMsg.  # noqa: E501

        Number of jobs pending at the time of listed in job_state_ts  # noqa: E501

        :return: The jobs_pending of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._jobs_pending

    @jobs_pending.setter
    def jobs_pending(self, jobs_pending):
        """Sets the jobs_pending of this V0040StatsMsg.

        Number of jobs pending at the time of listed in job_state_ts  # noqa: E501

        :param jobs_pending: The jobs_pending of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._jobs_pending = jobs_pending

    @property
    def jobs_running(self):
        """Gets the jobs_running of this V0040StatsMsg.  # noqa: E501

        Number of jobs running at the time of listed in job_state_ts  # noqa: E501

        :return: The jobs_running of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._jobs_running

    @jobs_running.setter
    def jobs_running(self, jobs_running):
        """Sets the jobs_running of this V0040StatsMsg.

        Number of jobs running at the time of listed in job_state_ts  # noqa: E501

        :param jobs_running: The jobs_running of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._jobs_running = jobs_running

    @property
    def job_states_ts(self):
        """Gets the job_states_ts of this V0040StatsMsg.  # noqa: E501


        :return: The job_states_ts of this V0040StatsMsg.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._job_states_ts

    @job_states_ts.setter
    def job_states_ts(self, job_states_ts):
        """Sets the job_states_ts of this V0040StatsMsg.


        :param job_states_ts: The job_states_ts of this V0040StatsMsg.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._job_states_ts = job_states_ts

    @property
    def bf_backfilled_jobs(self):
        """Gets the bf_backfilled_jobs of this V0040StatsMsg.  # noqa: E501

        Number of jobs started through backfilling since last slurm start  # noqa: E501

        :return: The bf_backfilled_jobs of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_backfilled_jobs

    @bf_backfilled_jobs.setter
    def bf_backfilled_jobs(self, bf_backfilled_jobs):
        """Sets the bf_backfilled_jobs of this V0040StatsMsg.

        Number of jobs started through backfilling since last slurm start  # noqa: E501

        :param bf_backfilled_jobs: The bf_backfilled_jobs of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_backfilled_jobs = bf_backfilled_jobs

    @property
    def bf_last_backfilled_jobs(self):
        """Gets the bf_last_backfilled_jobs of this V0040StatsMsg.  # noqa: E501

        Number of jobs started through backfilling since last reset  # noqa: E501

        :return: The bf_last_backfilled_jobs of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_last_backfilled_jobs

    @bf_last_backfilled_jobs.setter
    def bf_last_backfilled_jobs(self, bf_last_backfilled_jobs):
        """Sets the bf_last_backfilled_jobs of this V0040StatsMsg.

        Number of jobs started through backfilling since last reset  # noqa: E501

        :param bf_last_backfilled_jobs: The bf_last_backfilled_jobs of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_last_backfilled_jobs = bf_last_backfilled_jobs

    @property
    def bf_backfilled_het_jobs(self):
        """Gets the bf_backfilled_het_jobs of this V0040StatsMsg.  # noqa: E501

        Number of heterogeneous job components started through backfilling since last Slurm start  # noqa: E501

        :return: The bf_backfilled_het_jobs of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_backfilled_het_jobs

    @bf_backfilled_het_jobs.setter
    def bf_backfilled_het_jobs(self, bf_backfilled_het_jobs):
        """Sets the bf_backfilled_het_jobs of this V0040StatsMsg.

        Number of heterogeneous job components started through backfilling since last Slurm start  # noqa: E501

        :param bf_backfilled_het_jobs: The bf_backfilled_het_jobs of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_backfilled_het_jobs = bf_backfilled_het_jobs

    @property
    def bf_cycle_counter(self):
        """Gets the bf_cycle_counter of this V0040StatsMsg.  # noqa: E501

        Number of backfill scheduling cycles since last reset  # noqa: E501

        :return: The bf_cycle_counter of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_cycle_counter

    @bf_cycle_counter.setter
    def bf_cycle_counter(self, bf_cycle_counter):
        """Sets the bf_cycle_counter of this V0040StatsMsg.

        Number of backfill scheduling cycles since last reset  # noqa: E501

        :param bf_cycle_counter: The bf_cycle_counter of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_cycle_counter = bf_cycle_counter

    @property
    def bf_cycle_mean(self):
        """Gets the bf_cycle_mean of this V0040StatsMsg.  # noqa: E501

        Mean time in microseconds of backfilling scheduling cycles since last reset  # noqa: E501

        :return: The bf_cycle_mean of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_cycle_mean

    @bf_cycle_mean.setter
    def bf_cycle_mean(self, bf_cycle_mean):
        """Sets the bf_cycle_mean of this V0040StatsMsg.

        Mean time in microseconds of backfilling scheduling cycles since last reset  # noqa: E501

        :param bf_cycle_mean: The bf_cycle_mean of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_cycle_mean = bf_cycle_mean

    @property
    def bf_depth_mean(self):
        """Gets the bf_depth_mean of this V0040StatsMsg.  # noqa: E501

        Mean number of eligible to run jobs processed during all backfilling scheduling cycles since last reset  # noqa: E501

        :return: The bf_depth_mean of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_depth_mean

    @bf_depth_mean.setter
    def bf_depth_mean(self, bf_depth_mean):
        """Sets the bf_depth_mean of this V0040StatsMsg.

        Mean number of eligible to run jobs processed during all backfilling scheduling cycles since last reset  # noqa: E501

        :param bf_depth_mean: The bf_depth_mean of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_depth_mean = bf_depth_mean

    @property
    def bf_depth_mean_try(self):
        """Gets the bf_depth_mean_try of this V0040StatsMsg.  # noqa: E501

        The subset of Depth Mean that the backfill scheduler attempted to schedule  # noqa: E501

        :return: The bf_depth_mean_try of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_depth_mean_try

    @bf_depth_mean_try.setter
    def bf_depth_mean_try(self, bf_depth_mean_try):
        """Sets the bf_depth_mean_try of this V0040StatsMsg.

        The subset of Depth Mean that the backfill scheduler attempted to schedule  # noqa: E501

        :param bf_depth_mean_try: The bf_depth_mean_try of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_depth_mean_try = bf_depth_mean_try

    @property
    def bf_cycle_sum(self):
        """Gets the bf_cycle_sum of this V0040StatsMsg.  # noqa: E501

        Total time in microseconds of backfilling scheduling cycles since last reset  # noqa: E501

        :return: The bf_cycle_sum of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_cycle_sum

    @bf_cycle_sum.setter
    def bf_cycle_sum(self, bf_cycle_sum):
        """Sets the bf_cycle_sum of this V0040StatsMsg.

        Total time in microseconds of backfilling scheduling cycles since last reset  # noqa: E501

        :param bf_cycle_sum: The bf_cycle_sum of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_cycle_sum = bf_cycle_sum

    @property
    def bf_cycle_last(self):
        """Gets the bf_cycle_last of this V0040StatsMsg.  # noqa: E501

        Execution time in microseconds of last backfill scheduling cycle  # noqa: E501

        :return: The bf_cycle_last of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_cycle_last

    @bf_cycle_last.setter
    def bf_cycle_last(self, bf_cycle_last):
        """Sets the bf_cycle_last of this V0040StatsMsg.

        Execution time in microseconds of last backfill scheduling cycle  # noqa: E501

        :param bf_cycle_last: The bf_cycle_last of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_cycle_last = bf_cycle_last

    @property
    def bf_last_depth(self):
        """Gets the bf_last_depth of this V0040StatsMsg.  # noqa: E501

        Number of processed jobs during last backfilling scheduling cycle  # noqa: E501

        :return: The bf_last_depth of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_last_depth

    @bf_last_depth.setter
    def bf_last_depth(self, bf_last_depth):
        """Sets the bf_last_depth of this V0040StatsMsg.

        Number of processed jobs during last backfilling scheduling cycle  # noqa: E501

        :param bf_last_depth: The bf_last_depth of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_last_depth = bf_last_depth

    @property
    def bf_last_depth_try(self):
        """Gets the bf_last_depth_try of this V0040StatsMsg.  # noqa: E501

        Number of processed jobs during last backfilling scheduling cycle that had a chance to start using available resources  # noqa: E501

        :return: The bf_last_depth_try of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_last_depth_try

    @bf_last_depth_try.setter
    def bf_last_depth_try(self, bf_last_depth_try):
        """Sets the bf_last_depth_try of this V0040StatsMsg.

        Number of processed jobs during last backfilling scheduling cycle that had a chance to start using available resources  # noqa: E501

        :param bf_last_depth_try: The bf_last_depth_try of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_last_depth_try = bf_last_depth_try

    @property
    def bf_depth_sum(self):
        """Gets the bf_depth_sum of this V0040StatsMsg.  # noqa: E501

        Total number of jobs processed during all backfilling scheduling cycles since last reset  # noqa: E501

        :return: The bf_depth_sum of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_depth_sum

    @bf_depth_sum.setter
    def bf_depth_sum(self, bf_depth_sum):
        """Sets the bf_depth_sum of this V0040StatsMsg.

        Total number of jobs processed during all backfilling scheduling cycles since last reset  # noqa: E501

        :param bf_depth_sum: The bf_depth_sum of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_depth_sum = bf_depth_sum

    @property
    def bf_depth_try_sum(self):
        """Gets the bf_depth_try_sum of this V0040StatsMsg.  # noqa: E501

        Subset of bf_depth_sum that the backfill scheduler attempted to schedule  # noqa: E501

        :return: The bf_depth_try_sum of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_depth_try_sum

    @bf_depth_try_sum.setter
    def bf_depth_try_sum(self, bf_depth_try_sum):
        """Sets the bf_depth_try_sum of this V0040StatsMsg.

        Subset of bf_depth_sum that the backfill scheduler attempted to schedule  # noqa: E501

        :param bf_depth_try_sum: The bf_depth_try_sum of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_depth_try_sum = bf_depth_try_sum

    @property
    def bf_queue_len(self):
        """Gets the bf_queue_len of this V0040StatsMsg.  # noqa: E501

        Number of jobs pending to be processed by backfilling algorithm  # noqa: E501

        :return: The bf_queue_len of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_queue_len

    @bf_queue_len.setter
    def bf_queue_len(self, bf_queue_len):
        """Sets the bf_queue_len of this V0040StatsMsg.

        Number of jobs pending to be processed by backfilling algorithm  # noqa: E501

        :param bf_queue_len: The bf_queue_len of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_queue_len = bf_queue_len

    @property
    def bf_queue_len_mean(self):
        """Gets the bf_queue_len_mean of this V0040StatsMsg.  # noqa: E501

        Mean number of jobs pending to be processed by backfilling algorithm  # noqa: E501

        :return: The bf_queue_len_mean of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_queue_len_mean

    @bf_queue_len_mean.setter
    def bf_queue_len_mean(self, bf_queue_len_mean):
        """Sets the bf_queue_len_mean of this V0040StatsMsg.

        Mean number of jobs pending to be processed by backfilling algorithm  # noqa: E501

        :param bf_queue_len_mean: The bf_queue_len_mean of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_queue_len_mean = bf_queue_len_mean

    @property
    def bf_queue_len_sum(self):
        """Gets the bf_queue_len_sum of this V0040StatsMsg.  # noqa: E501

        Total number of jobs pending to be processed by backfilling algorithm since last reset  # noqa: E501

        :return: The bf_queue_len_sum of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_queue_len_sum

    @bf_queue_len_sum.setter
    def bf_queue_len_sum(self, bf_queue_len_sum):
        """Sets the bf_queue_len_sum of this V0040StatsMsg.

        Total number of jobs pending to be processed by backfilling algorithm since last reset  # noqa: E501

        :param bf_queue_len_sum: The bf_queue_len_sum of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_queue_len_sum = bf_queue_len_sum

    @property
    def bf_table_size(self):
        """Gets the bf_table_size of this V0040StatsMsg.  # noqa: E501

        Number of different time slots tested by the backfill scheduler in its last iteration  # noqa: E501

        :return: The bf_table_size of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_table_size

    @bf_table_size.setter
    def bf_table_size(self, bf_table_size):
        """Sets the bf_table_size of this V0040StatsMsg.

        Number of different time slots tested by the backfill scheduler in its last iteration  # noqa: E501

        :param bf_table_size: The bf_table_size of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_table_size = bf_table_size

    @property
    def bf_table_size_mean(self):
        """Gets the bf_table_size_mean of this V0040StatsMsg.  # noqa: E501

        Mean number of different time slots tested by the backfill scheduler  # noqa: E501

        :return: The bf_table_size_mean of this V0040StatsMsg.  # noqa: E501
        :rtype: int
        """
        return self._bf_table_size_mean

    @bf_table_size_mean.setter
    def bf_table_size_mean(self, bf_table_size_mean):
        """Sets the bf_table_size_mean of this V0040StatsMsg.

        Mean number of different time slots tested by the backfill scheduler  # noqa: E501

        :param bf_table_size_mean: The bf_table_size_mean of this V0040StatsMsg.  # noqa: E501
        :type: int
        """

        self._bf_table_size_mean = bf_table_size_mean

    @property
    def bf_when_last_cycle(self):
        """Gets the bf_when_last_cycle of this V0040StatsMsg.  # noqa: E501


        :return: The bf_when_last_cycle of this V0040StatsMsg.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._bf_when_last_cycle

    @bf_when_last_cycle.setter
    def bf_when_last_cycle(self, bf_when_last_cycle):
        """Sets the bf_when_last_cycle of this V0040StatsMsg.


        :param bf_when_last_cycle: The bf_when_last_cycle of this V0040StatsMsg.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._bf_when_last_cycle = bf_when_last_cycle

    @property
    def bf_active(self):
        """Gets the bf_active of this V0040StatsMsg.  # noqa: E501

        Backfill scheduler currently running  # noqa: E501

        :return: The bf_active of this V0040StatsMsg.  # noqa: E501
        :rtype: bool
        """
        return self._bf_active

    @bf_active.setter
    def bf_active(self, bf_active):
        """Sets the bf_active of this V0040StatsMsg.

        Backfill scheduler currently running  # noqa: E501

        :param bf_active: The bf_active of this V0040StatsMsg.  # noqa: E501
        :type: bool
        """

        self._bf_active = bf_active

    @property
    def bf_exit(self):
        """Gets the bf_exit of this V0040StatsMsg.  # noqa: E501


        :return: The bf_exit of this V0040StatsMsg.  # noqa: E501
        :rtype: V0040BfExitFields
        """
        return self._bf_exit

    @bf_exit.setter
    def bf_exit(self, bf_exit):
        """Sets the bf_exit of this V0040StatsMsg.


        :param bf_exit: The bf_exit of this V0040StatsMsg.  # noqa: E501
        :type: V0040BfExitFields
        """

        self._bf_exit = bf_exit

    @property
    def rpcs_by_message_type(self):
        """Gets the rpcs_by_message_type of this V0040StatsMsg.  # noqa: E501

        RPCs by message type  # noqa: E501

        :return: The rpcs_by_message_type of this V0040StatsMsg.  # noqa: E501
        :rtype: list[object]
        """
        return self._rpcs_by_message_type

    @rpcs_by_message_type.setter
    def rpcs_by_message_type(self, rpcs_by_message_type):
        """Sets the rpcs_by_message_type of this V0040StatsMsg.

        RPCs by message type  # noqa: E501

        :param rpcs_by_message_type: The rpcs_by_message_type of this V0040StatsMsg.  # noqa: E501
        :type: list[object]
        """

        self._rpcs_by_message_type = rpcs_by_message_type

    @property
    def rpcs_by_user(self):
        """Gets the rpcs_by_user of this V0040StatsMsg.  # noqa: E501

        RPCs by user  # noqa: E501

        :return: The rpcs_by_user of this V0040StatsMsg.  # noqa: E501
        :rtype: list[object]
        """
        return self._rpcs_by_user

    @rpcs_by_user.setter
    def rpcs_by_user(self, rpcs_by_user):
        """Sets the rpcs_by_user of this V0040StatsMsg.

        RPCs by user  # noqa: E501

        :param rpcs_by_user: The rpcs_by_user of this V0040StatsMsg.  # noqa: E501
        :type: list[object]
        """

        self._rpcs_by_user = rpcs_by_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040StatsMsg):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040StatsMsg):
            return True

        return self.to_dict() != other.to_dict()
