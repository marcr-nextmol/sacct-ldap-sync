# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040QosPreempt(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'list': 'list[str]',
        'mode': 'list[str]',
        'exempt_time': 'V0040Uint32NoVal'
    }

    attribute_map = {
        'list': 'list',
        'mode': 'mode',
        'exempt_time': 'exempt_time'
    }

    def __init__(self, list=None, mode=None, exempt_time=None, local_vars_configuration=None):  # noqa: E501
        """V0040QosPreempt - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._list = None
        self._mode = None
        self._exempt_time = None
        self.discriminator = None

        if list is not None:
            self.list = list
        if mode is not None:
            self.mode = mode
        if exempt_time is not None:
            self.exempt_time = exempt_time

    @property
    def list(self):
        """Gets the list of this V0040QosPreempt.  # noqa: E501


        :return: The list of this V0040QosPreempt.  # noqa: E501
        :rtype: list[str]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this V0040QosPreempt.


        :param list: The list of this V0040QosPreempt.  # noqa: E501
        :type: list[str]
        """

        self._list = list

    @property
    def mode(self):
        """Gets the mode of this V0040QosPreempt.  # noqa: E501

        PreemptMode  # noqa: E501

        :return: The mode of this V0040QosPreempt.  # noqa: E501
        :rtype: list[str]
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this V0040QosPreempt.

        PreemptMode  # noqa: E501

        :param mode: The mode of this V0040QosPreempt.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DISABLED", "SUSPEND", "REQUEUE", "CANCEL", "GANG"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(mode).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `mode` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(mode) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._mode = mode

    @property
    def exempt_time(self):
        """Gets the exempt_time of this V0040QosPreempt.  # noqa: E501


        :return: The exempt_time of this V0040QosPreempt.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._exempt_time

    @exempt_time.setter
    def exempt_time(self, exempt_time):
        """Sets the exempt_time of this V0040QosPreempt.


        :param exempt_time: The exempt_time of this V0040QosPreempt.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._exempt_time = exempt_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040QosPreempt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040QosPreempt):
            return True

        return self.to_dict() != other.to_dict()
