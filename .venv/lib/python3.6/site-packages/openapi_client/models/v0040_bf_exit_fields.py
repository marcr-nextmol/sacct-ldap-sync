# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040BfExitFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'end_job_queue': 'int',
        'bf_max_job_start': 'int',
        'bf_max_job_test': 'int',
        'bf_max_time': 'int',
        'bf_node_space_size': 'int',
        'state_changed': 'int'
    }

    attribute_map = {
        'end_job_queue': 'end_job_queue',
        'bf_max_job_start': 'bf_max_job_start',
        'bf_max_job_test': 'bf_max_job_test',
        'bf_max_time': 'bf_max_time',
        'bf_node_space_size': 'bf_node_space_size',
        'state_changed': 'state_changed'
    }

    def __init__(self, end_job_queue=None, bf_max_job_start=None, bf_max_job_test=None, bf_max_time=None, bf_node_space_size=None, state_changed=None, local_vars_configuration=None):  # noqa: E501
        """V0040BfExitFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._end_job_queue = None
        self._bf_max_job_start = None
        self._bf_max_job_test = None
        self._bf_max_time = None
        self._bf_node_space_size = None
        self._state_changed = None
        self.discriminator = None

        if end_job_queue is not None:
            self.end_job_queue = end_job_queue
        if bf_max_job_start is not None:
            self.bf_max_job_start = bf_max_job_start
        if bf_max_job_test is not None:
            self.bf_max_job_test = bf_max_job_test
        if bf_max_time is not None:
            self.bf_max_time = bf_max_time
        if bf_node_space_size is not None:
            self.bf_node_space_size = bf_node_space_size
        if state_changed is not None:
            self.state_changed = state_changed

    @property
    def end_job_queue(self):
        """Gets the end_job_queue of this V0040BfExitFields.  # noqa: E501

        Reached end of queue  # noqa: E501

        :return: The end_job_queue of this V0040BfExitFields.  # noqa: E501
        :rtype: int
        """
        return self._end_job_queue

    @end_job_queue.setter
    def end_job_queue(self, end_job_queue):
        """Sets the end_job_queue of this V0040BfExitFields.

        Reached end of queue  # noqa: E501

        :param end_job_queue: The end_job_queue of this V0040BfExitFields.  # noqa: E501
        :type: int
        """

        self._end_job_queue = end_job_queue

    @property
    def bf_max_job_start(self):
        """Gets the bf_max_job_start of this V0040BfExitFields.  # noqa: E501

        Reached number of jobs allowed to start  # noqa: E501

        :return: The bf_max_job_start of this V0040BfExitFields.  # noqa: E501
        :rtype: int
        """
        return self._bf_max_job_start

    @bf_max_job_start.setter
    def bf_max_job_start(self, bf_max_job_start):
        """Sets the bf_max_job_start of this V0040BfExitFields.

        Reached number of jobs allowed to start  # noqa: E501

        :param bf_max_job_start: The bf_max_job_start of this V0040BfExitFields.  # noqa: E501
        :type: int
        """

        self._bf_max_job_start = bf_max_job_start

    @property
    def bf_max_job_test(self):
        """Gets the bf_max_job_test of this V0040BfExitFields.  # noqa: E501

        Reached number of jobs allowed to be tested  # noqa: E501

        :return: The bf_max_job_test of this V0040BfExitFields.  # noqa: E501
        :rtype: int
        """
        return self._bf_max_job_test

    @bf_max_job_test.setter
    def bf_max_job_test(self, bf_max_job_test):
        """Sets the bf_max_job_test of this V0040BfExitFields.

        Reached number of jobs allowed to be tested  # noqa: E501

        :param bf_max_job_test: The bf_max_job_test of this V0040BfExitFields.  # noqa: E501
        :type: int
        """

        self._bf_max_job_test = bf_max_job_test

    @property
    def bf_max_time(self):
        """Gets the bf_max_time of this V0040BfExitFields.  # noqa: E501

        Reached maximum allowed scheduler time  # noqa: E501

        :return: The bf_max_time of this V0040BfExitFields.  # noqa: E501
        :rtype: int
        """
        return self._bf_max_time

    @bf_max_time.setter
    def bf_max_time(self, bf_max_time):
        """Sets the bf_max_time of this V0040BfExitFields.

        Reached maximum allowed scheduler time  # noqa: E501

        :param bf_max_time: The bf_max_time of this V0040BfExitFields.  # noqa: E501
        :type: int
        """

        self._bf_max_time = bf_max_time

    @property
    def bf_node_space_size(self):
        """Gets the bf_node_space_size of this V0040BfExitFields.  # noqa: E501

        Reached table size limit  # noqa: E501

        :return: The bf_node_space_size of this V0040BfExitFields.  # noqa: E501
        :rtype: int
        """
        return self._bf_node_space_size

    @bf_node_space_size.setter
    def bf_node_space_size(self, bf_node_space_size):
        """Sets the bf_node_space_size of this V0040BfExitFields.

        Reached table size limit  # noqa: E501

        :param bf_node_space_size: The bf_node_space_size of this V0040BfExitFields.  # noqa: E501
        :type: int
        """

        self._bf_node_space_size = bf_node_space_size

    @property
    def state_changed(self):
        """Gets the state_changed of this V0040BfExitFields.  # noqa: E501

        System state changed  # noqa: E501

        :return: The state_changed of this V0040BfExitFields.  # noqa: E501
        :rtype: int
        """
        return self._state_changed

    @state_changed.setter
    def state_changed(self, state_changed):
        """Sets the state_changed of this V0040BfExitFields.

        System state changed  # noqa: E501

        :param state_changed: The state_changed of this V0040BfExitFields.  # noqa: E501
        :type: int
        """

        self._state_changed = state_changed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040BfExitFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040BfExitFields):
            return True

        return self.to_dict() != other.to_dict()
