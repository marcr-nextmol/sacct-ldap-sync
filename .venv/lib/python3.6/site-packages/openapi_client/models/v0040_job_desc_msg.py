# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040JobDescMsg(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account': 'str',
        'account_gather_frequency': 'str',
        'admin_comment': 'str',
        'allocation_node_list': 'str',
        'allocation_node_port': 'int',
        'argv': 'list[str]',
        'array': 'str',
        'batch_features': 'str',
        'begin_time': 'V0040Uint64NoVal',
        'flags': 'list[str]',
        'burst_buffer': 'str',
        'clusters': 'str',
        'cluster_constraint': 'str',
        'comment': 'str',
        'contiguous': 'bool',
        'container': 'str',
        'container_id': 'str',
        'cores_per_socket': 'int',
        'core_specification': 'int',
        'thread_specification': 'int',
        'cpu_binding': 'str',
        'cpu_binding_flags': 'list[str]',
        'cpu_frequency': 'str',
        'cpus_per_tres': 'str',
        'crontab': 'V0040CronEntry',
        'deadline': 'int',
        'delay_boot': 'int',
        'dependency': 'str',
        'end_time': 'int',
        'environment': 'list[str]',
        'rlimits': 'V0040JobDescMsgRlimits',
        'excluded_nodes': 'list[str]',
        'extra': 'str',
        'constraints': 'str',
        'group_id': 'str',
        'hetjob_group': 'int',
        'immediate': 'bool',
        'job_id': 'int',
        'kill_on_node_fail': 'bool',
        'licenses': 'str',
        'mail_type': 'list[str]',
        'mail_user': 'str',
        'mcs_label': 'str',
        'memory_binding': 'str',
        'memory_binding_type': 'list[str]',
        'memory_per_tres': 'str',
        'name': 'str',
        'network': 'str',
        'nice': 'int',
        'tasks': 'int',
        'open_mode': 'list[str]',
        'reserve_ports': 'int',
        'overcommit': 'bool',
        'partition': 'str',
        'distribution_plane_size': 'int',
        'power_flags': 'list[object]',
        'prefer': 'str',
        'hold': 'bool',
        'priority': 'V0040Uint32NoVal',
        'profile': 'list[str]',
        'qos': 'str',
        'reboot': 'bool',
        'required_nodes': 'list[str]',
        'requeue': 'bool',
        'reservation': 'str',
        'script': 'str',
        'shared': 'list[str]',
        'exclusive': 'list[str]',
        'oversubscribe': 'bool',
        'site_factor': 'int',
        'spank_environment': 'list[str]',
        'distribution': 'str',
        'time_limit': 'V0040Uint32NoVal',
        'time_minimum': 'V0040Uint32NoVal',
        'tres_bind': 'str',
        'tres_freq': 'str',
        'tres_per_job': 'str',
        'tres_per_node': 'str',
        'tres_per_socket': 'str',
        'tres_per_task': 'str',
        'user_id': 'str',
        'wait_all_nodes': 'bool',
        'kill_warning_flags': 'list[str]',
        'kill_warning_signal': 'str',
        'kill_warning_delay': 'V0040Uint16NoVal',
        'current_working_directory': 'str',
        'cpus_per_task': 'int',
        'minimum_cpus': 'int',
        'maximum_cpus': 'int',
        'nodes': 'str',
        'minimum_nodes': 'int',
        'maximum_nodes': 'int',
        'minimum_boards_per_node': 'int',
        'minimum_sockets_per_board': 'int',
        'sockets_per_node': 'int',
        'threads_per_core': 'int',
        'tasks_per_node': 'int',
        'tasks_per_socket': 'int',
        'tasks_per_core': 'int',
        'tasks_per_board': 'int',
        'ntasks_per_tres': 'int',
        'minimum_cpus_per_node': 'int',
        'memory_per_cpu': 'V0040Uint64NoVal',
        'memory_per_node': 'V0040Uint64NoVal',
        'temporary_disk_per_node': 'int',
        'selinux_context': 'str',
        'required_switches': 'V0040Uint32NoVal',
        'standard_error': 'str',
        'standard_input': 'str',
        'standard_output': 'str',
        'wait_for_switch': 'int',
        'wckey': 'str',
        'x11': 'list[str]',
        'x11_magic_cookie': 'str',
        'x11_target_host': 'str',
        'x11_target_port': 'int'
    }

    attribute_map = {
        'account': 'account',
        'account_gather_frequency': 'account_gather_frequency',
        'admin_comment': 'admin_comment',
        'allocation_node_list': 'allocation_node_list',
        'allocation_node_port': 'allocation_node_port',
        'argv': 'argv',
        'array': 'array',
        'batch_features': 'batch_features',
        'begin_time': 'begin_time',
        'flags': 'flags',
        'burst_buffer': 'burst_buffer',
        'clusters': 'clusters',
        'cluster_constraint': 'cluster_constraint',
        'comment': 'comment',
        'contiguous': 'contiguous',
        'container': 'container',
        'container_id': 'container_id',
        'cores_per_socket': 'cores_per_socket',
        'core_specification': 'core_specification',
        'thread_specification': 'thread_specification',
        'cpu_binding': 'cpu_binding',
        'cpu_binding_flags': 'cpu_binding_flags',
        'cpu_frequency': 'cpu_frequency',
        'cpus_per_tres': 'cpus_per_tres',
        'crontab': 'crontab',
        'deadline': 'deadline',
        'delay_boot': 'delay_boot',
        'dependency': 'dependency',
        'end_time': 'end_time',
        'environment': 'environment',
        'rlimits': 'rlimits',
        'excluded_nodes': 'excluded_nodes',
        'extra': 'extra',
        'constraints': 'constraints',
        'group_id': 'group_id',
        'hetjob_group': 'hetjob_group',
        'immediate': 'immediate',
        'job_id': 'job_id',
        'kill_on_node_fail': 'kill_on_node_fail',
        'licenses': 'licenses',
        'mail_type': 'mail_type',
        'mail_user': 'mail_user',
        'mcs_label': 'mcs_label',
        'memory_binding': 'memory_binding',
        'memory_binding_type': 'memory_binding_type',
        'memory_per_tres': 'memory_per_tres',
        'name': 'name',
        'network': 'network',
        'nice': 'nice',
        'tasks': 'tasks',
        'open_mode': 'open_mode',
        'reserve_ports': 'reserve_ports',
        'overcommit': 'overcommit',
        'partition': 'partition',
        'distribution_plane_size': 'distribution_plane_size',
        'power_flags': 'power_flags',
        'prefer': 'prefer',
        'hold': 'hold',
        'priority': 'priority',
        'profile': 'profile',
        'qos': 'qos',
        'reboot': 'reboot',
        'required_nodes': 'required_nodes',
        'requeue': 'requeue',
        'reservation': 'reservation',
        'script': 'script',
        'shared': 'shared',
        'exclusive': 'exclusive',
        'oversubscribe': 'oversubscribe',
        'site_factor': 'site_factor',
        'spank_environment': 'spank_environment',
        'distribution': 'distribution',
        'time_limit': 'time_limit',
        'time_minimum': 'time_minimum',
        'tres_bind': 'tres_bind',
        'tres_freq': 'tres_freq',
        'tres_per_job': 'tres_per_job',
        'tres_per_node': 'tres_per_node',
        'tres_per_socket': 'tres_per_socket',
        'tres_per_task': 'tres_per_task',
        'user_id': 'user_id',
        'wait_all_nodes': 'wait_all_nodes',
        'kill_warning_flags': 'kill_warning_flags',
        'kill_warning_signal': 'kill_warning_signal',
        'kill_warning_delay': 'kill_warning_delay',
        'current_working_directory': 'current_working_directory',
        'cpus_per_task': 'cpus_per_task',
        'minimum_cpus': 'minimum_cpus',
        'maximum_cpus': 'maximum_cpus',
        'nodes': 'nodes',
        'minimum_nodes': 'minimum_nodes',
        'maximum_nodes': 'maximum_nodes',
        'minimum_boards_per_node': 'minimum_boards_per_node',
        'minimum_sockets_per_board': 'minimum_sockets_per_board',
        'sockets_per_node': 'sockets_per_node',
        'threads_per_core': 'threads_per_core',
        'tasks_per_node': 'tasks_per_node',
        'tasks_per_socket': 'tasks_per_socket',
        'tasks_per_core': 'tasks_per_core',
        'tasks_per_board': 'tasks_per_board',
        'ntasks_per_tres': 'ntasks_per_tres',
        'minimum_cpus_per_node': 'minimum_cpus_per_node',
        'memory_per_cpu': 'memory_per_cpu',
        'memory_per_node': 'memory_per_node',
        'temporary_disk_per_node': 'temporary_disk_per_node',
        'selinux_context': 'selinux_context',
        'required_switches': 'required_switches',
        'standard_error': 'standard_error',
        'standard_input': 'standard_input',
        'standard_output': 'standard_output',
        'wait_for_switch': 'wait_for_switch',
        'wckey': 'wckey',
        'x11': 'x11',
        'x11_magic_cookie': 'x11_magic_cookie',
        'x11_target_host': 'x11_target_host',
        'x11_target_port': 'x11_target_port'
    }

    def __init__(self, account=None, account_gather_frequency=None, admin_comment=None, allocation_node_list=None, allocation_node_port=None, argv=None, array=None, batch_features=None, begin_time=None, flags=None, burst_buffer=None, clusters=None, cluster_constraint=None, comment=None, contiguous=None, container=None, container_id=None, cores_per_socket=None, core_specification=None, thread_specification=None, cpu_binding=None, cpu_binding_flags=None, cpu_frequency=None, cpus_per_tres=None, crontab=None, deadline=None, delay_boot=None, dependency=None, end_time=None, environment=None, rlimits=None, excluded_nodes=None, extra=None, constraints=None, group_id=None, hetjob_group=None, immediate=None, job_id=None, kill_on_node_fail=None, licenses=None, mail_type=None, mail_user=None, mcs_label=None, memory_binding=None, memory_binding_type=None, memory_per_tres=None, name=None, network=None, nice=None, tasks=None, open_mode=None, reserve_ports=None, overcommit=None, partition=None, distribution_plane_size=None, power_flags=None, prefer=None, hold=None, priority=None, profile=None, qos=None, reboot=None, required_nodes=None, requeue=None, reservation=None, script=None, shared=None, exclusive=None, oversubscribe=None, site_factor=None, spank_environment=None, distribution=None, time_limit=None, time_minimum=None, tres_bind=None, tres_freq=None, tres_per_job=None, tres_per_node=None, tres_per_socket=None, tres_per_task=None, user_id=None, wait_all_nodes=None, kill_warning_flags=None, kill_warning_signal=None, kill_warning_delay=None, current_working_directory=None, cpus_per_task=None, minimum_cpus=None, maximum_cpus=None, nodes=None, minimum_nodes=None, maximum_nodes=None, minimum_boards_per_node=None, minimum_sockets_per_board=None, sockets_per_node=None, threads_per_core=None, tasks_per_node=None, tasks_per_socket=None, tasks_per_core=None, tasks_per_board=None, ntasks_per_tres=None, minimum_cpus_per_node=None, memory_per_cpu=None, memory_per_node=None, temporary_disk_per_node=None, selinux_context=None, required_switches=None, standard_error=None, standard_input=None, standard_output=None, wait_for_switch=None, wckey=None, x11=None, x11_magic_cookie=None, x11_target_host=None, x11_target_port=None, local_vars_configuration=None):  # noqa: E501
        """V0040JobDescMsg - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account = None
        self._account_gather_frequency = None
        self._admin_comment = None
        self._allocation_node_list = None
        self._allocation_node_port = None
        self._argv = None
        self._array = None
        self._batch_features = None
        self._begin_time = None
        self._flags = None
        self._burst_buffer = None
        self._clusters = None
        self._cluster_constraint = None
        self._comment = None
        self._contiguous = None
        self._container = None
        self._container_id = None
        self._cores_per_socket = None
        self._core_specification = None
        self._thread_specification = None
        self._cpu_binding = None
        self._cpu_binding_flags = None
        self._cpu_frequency = None
        self._cpus_per_tres = None
        self._crontab = None
        self._deadline = None
        self._delay_boot = None
        self._dependency = None
        self._end_time = None
        self._environment = None
        self._rlimits = None
        self._excluded_nodes = None
        self._extra = None
        self._constraints = None
        self._group_id = None
        self._hetjob_group = None
        self._immediate = None
        self._job_id = None
        self._kill_on_node_fail = None
        self._licenses = None
        self._mail_type = None
        self._mail_user = None
        self._mcs_label = None
        self._memory_binding = None
        self._memory_binding_type = None
        self._memory_per_tres = None
        self._name = None
        self._network = None
        self._nice = None
        self._tasks = None
        self._open_mode = None
        self._reserve_ports = None
        self._overcommit = None
        self._partition = None
        self._distribution_plane_size = None
        self._power_flags = None
        self._prefer = None
        self._hold = None
        self._priority = None
        self._profile = None
        self._qos = None
        self._reboot = None
        self._required_nodes = None
        self._requeue = None
        self._reservation = None
        self._script = None
        self._shared = None
        self._exclusive = None
        self._oversubscribe = None
        self._site_factor = None
        self._spank_environment = None
        self._distribution = None
        self._time_limit = None
        self._time_minimum = None
        self._tres_bind = None
        self._tres_freq = None
        self._tres_per_job = None
        self._tres_per_node = None
        self._tres_per_socket = None
        self._tres_per_task = None
        self._user_id = None
        self._wait_all_nodes = None
        self._kill_warning_flags = None
        self._kill_warning_signal = None
        self._kill_warning_delay = None
        self._current_working_directory = None
        self._cpus_per_task = None
        self._minimum_cpus = None
        self._maximum_cpus = None
        self._nodes = None
        self._minimum_nodes = None
        self._maximum_nodes = None
        self._minimum_boards_per_node = None
        self._minimum_sockets_per_board = None
        self._sockets_per_node = None
        self._threads_per_core = None
        self._tasks_per_node = None
        self._tasks_per_socket = None
        self._tasks_per_core = None
        self._tasks_per_board = None
        self._ntasks_per_tres = None
        self._minimum_cpus_per_node = None
        self._memory_per_cpu = None
        self._memory_per_node = None
        self._temporary_disk_per_node = None
        self._selinux_context = None
        self._required_switches = None
        self._standard_error = None
        self._standard_input = None
        self._standard_output = None
        self._wait_for_switch = None
        self._wckey = None
        self._x11 = None
        self._x11_magic_cookie = None
        self._x11_target_host = None
        self._x11_target_port = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if account_gather_frequency is not None:
            self.account_gather_frequency = account_gather_frequency
        if admin_comment is not None:
            self.admin_comment = admin_comment
        if allocation_node_list is not None:
            self.allocation_node_list = allocation_node_list
        if allocation_node_port is not None:
            self.allocation_node_port = allocation_node_port
        if argv is not None:
            self.argv = argv
        if array is not None:
            self.array = array
        if batch_features is not None:
            self.batch_features = batch_features
        if begin_time is not None:
            self.begin_time = begin_time
        if flags is not None:
            self.flags = flags
        if burst_buffer is not None:
            self.burst_buffer = burst_buffer
        if clusters is not None:
            self.clusters = clusters
        if cluster_constraint is not None:
            self.cluster_constraint = cluster_constraint
        if comment is not None:
            self.comment = comment
        if contiguous is not None:
            self.contiguous = contiguous
        if container is not None:
            self.container = container
        if container_id is not None:
            self.container_id = container_id
        if cores_per_socket is not None:
            self.cores_per_socket = cores_per_socket
        if core_specification is not None:
            self.core_specification = core_specification
        if thread_specification is not None:
            self.thread_specification = thread_specification
        if cpu_binding is not None:
            self.cpu_binding = cpu_binding
        if cpu_binding_flags is not None:
            self.cpu_binding_flags = cpu_binding_flags
        if cpu_frequency is not None:
            self.cpu_frequency = cpu_frequency
        if cpus_per_tres is not None:
            self.cpus_per_tres = cpus_per_tres
        if crontab is not None:
            self.crontab = crontab
        if deadline is not None:
            self.deadline = deadline
        if delay_boot is not None:
            self.delay_boot = delay_boot
        if dependency is not None:
            self.dependency = dependency
        if end_time is not None:
            self.end_time = end_time
        if environment is not None:
            self.environment = environment
        if rlimits is not None:
            self.rlimits = rlimits
        if excluded_nodes is not None:
            self.excluded_nodes = excluded_nodes
        if extra is not None:
            self.extra = extra
        if constraints is not None:
            self.constraints = constraints
        if group_id is not None:
            self.group_id = group_id
        if hetjob_group is not None:
            self.hetjob_group = hetjob_group
        if immediate is not None:
            self.immediate = immediate
        if job_id is not None:
            self.job_id = job_id
        if kill_on_node_fail is not None:
            self.kill_on_node_fail = kill_on_node_fail
        if licenses is not None:
            self.licenses = licenses
        if mail_type is not None:
            self.mail_type = mail_type
        if mail_user is not None:
            self.mail_user = mail_user
        if mcs_label is not None:
            self.mcs_label = mcs_label
        if memory_binding is not None:
            self.memory_binding = memory_binding
        if memory_binding_type is not None:
            self.memory_binding_type = memory_binding_type
        if memory_per_tres is not None:
            self.memory_per_tres = memory_per_tres
        if name is not None:
            self.name = name
        if network is not None:
            self.network = network
        if nice is not None:
            self.nice = nice
        if tasks is not None:
            self.tasks = tasks
        if open_mode is not None:
            self.open_mode = open_mode
        if reserve_ports is not None:
            self.reserve_ports = reserve_ports
        if overcommit is not None:
            self.overcommit = overcommit
        if partition is not None:
            self.partition = partition
        if distribution_plane_size is not None:
            self.distribution_plane_size = distribution_plane_size
        if power_flags is not None:
            self.power_flags = power_flags
        if prefer is not None:
            self.prefer = prefer
        if hold is not None:
            self.hold = hold
        if priority is not None:
            self.priority = priority
        if profile is not None:
            self.profile = profile
        if qos is not None:
            self.qos = qos
        if reboot is not None:
            self.reboot = reboot
        if required_nodes is not None:
            self.required_nodes = required_nodes
        if requeue is not None:
            self.requeue = requeue
        if reservation is not None:
            self.reservation = reservation
        if script is not None:
            self.script = script
        if shared is not None:
            self.shared = shared
        if exclusive is not None:
            self.exclusive = exclusive
        if oversubscribe is not None:
            self.oversubscribe = oversubscribe
        if site_factor is not None:
            self.site_factor = site_factor
        if spank_environment is not None:
            self.spank_environment = spank_environment
        if distribution is not None:
            self.distribution = distribution
        if time_limit is not None:
            self.time_limit = time_limit
        if time_minimum is not None:
            self.time_minimum = time_minimum
        if tres_bind is not None:
            self.tres_bind = tres_bind
        if tres_freq is not None:
            self.tres_freq = tres_freq
        if tres_per_job is not None:
            self.tres_per_job = tres_per_job
        if tres_per_node is not None:
            self.tres_per_node = tres_per_node
        if tres_per_socket is not None:
            self.tres_per_socket = tres_per_socket
        if tres_per_task is not None:
            self.tres_per_task = tres_per_task
        if user_id is not None:
            self.user_id = user_id
        if wait_all_nodes is not None:
            self.wait_all_nodes = wait_all_nodes
        if kill_warning_flags is not None:
            self.kill_warning_flags = kill_warning_flags
        if kill_warning_signal is not None:
            self.kill_warning_signal = kill_warning_signal
        if kill_warning_delay is not None:
            self.kill_warning_delay = kill_warning_delay
        if current_working_directory is not None:
            self.current_working_directory = current_working_directory
        if cpus_per_task is not None:
            self.cpus_per_task = cpus_per_task
        if minimum_cpus is not None:
            self.minimum_cpus = minimum_cpus
        if maximum_cpus is not None:
            self.maximum_cpus = maximum_cpus
        if nodes is not None:
            self.nodes = nodes
        if minimum_nodes is not None:
            self.minimum_nodes = minimum_nodes
        if maximum_nodes is not None:
            self.maximum_nodes = maximum_nodes
        if minimum_boards_per_node is not None:
            self.minimum_boards_per_node = minimum_boards_per_node
        if minimum_sockets_per_board is not None:
            self.minimum_sockets_per_board = minimum_sockets_per_board
        if sockets_per_node is not None:
            self.sockets_per_node = sockets_per_node
        if threads_per_core is not None:
            self.threads_per_core = threads_per_core
        if tasks_per_node is not None:
            self.tasks_per_node = tasks_per_node
        if tasks_per_socket is not None:
            self.tasks_per_socket = tasks_per_socket
        if tasks_per_core is not None:
            self.tasks_per_core = tasks_per_core
        if tasks_per_board is not None:
            self.tasks_per_board = tasks_per_board
        if ntasks_per_tres is not None:
            self.ntasks_per_tres = ntasks_per_tres
        if minimum_cpus_per_node is not None:
            self.minimum_cpus_per_node = minimum_cpus_per_node
        if memory_per_cpu is not None:
            self.memory_per_cpu = memory_per_cpu
        if memory_per_node is not None:
            self.memory_per_node = memory_per_node
        if temporary_disk_per_node is not None:
            self.temporary_disk_per_node = temporary_disk_per_node
        if selinux_context is not None:
            self.selinux_context = selinux_context
        if required_switches is not None:
            self.required_switches = required_switches
        if standard_error is not None:
            self.standard_error = standard_error
        if standard_input is not None:
            self.standard_input = standard_input
        if standard_output is not None:
            self.standard_output = standard_output
        if wait_for_switch is not None:
            self.wait_for_switch = wait_for_switch
        if wckey is not None:
            self.wckey = wckey
        if x11 is not None:
            self.x11 = x11
        if x11_magic_cookie is not None:
            self.x11_magic_cookie = x11_magic_cookie
        if x11_target_host is not None:
            self.x11_target_host = x11_target_host
        if x11_target_port is not None:
            self.x11_target_port = x11_target_port

    @property
    def account(self):
        """Gets the account of this V0040JobDescMsg.  # noqa: E501

        Account associated with the job  # noqa: E501

        :return: The account of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this V0040JobDescMsg.

        Account associated with the job  # noqa: E501

        :param account: The account of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def account_gather_frequency(self):
        """Gets the account_gather_frequency of this V0040JobDescMsg.  # noqa: E501

        Job accounting and profiling sampling intervals in seconds  # noqa: E501

        :return: The account_gather_frequency of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._account_gather_frequency

    @account_gather_frequency.setter
    def account_gather_frequency(self, account_gather_frequency):
        """Sets the account_gather_frequency of this V0040JobDescMsg.

        Job accounting and profiling sampling intervals in seconds  # noqa: E501

        :param account_gather_frequency: The account_gather_frequency of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._account_gather_frequency = account_gather_frequency

    @property
    def admin_comment(self):
        """Gets the admin_comment of this V0040JobDescMsg.  # noqa: E501

        Arbitrary comment made by administrator  # noqa: E501

        :return: The admin_comment of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._admin_comment

    @admin_comment.setter
    def admin_comment(self, admin_comment):
        """Sets the admin_comment of this V0040JobDescMsg.

        Arbitrary comment made by administrator  # noqa: E501

        :param admin_comment: The admin_comment of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._admin_comment = admin_comment

    @property
    def allocation_node_list(self):
        """Gets the allocation_node_list of this V0040JobDescMsg.  # noqa: E501

        Local node making the resource allocation  # noqa: E501

        :return: The allocation_node_list of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._allocation_node_list

    @allocation_node_list.setter
    def allocation_node_list(self, allocation_node_list):
        """Sets the allocation_node_list of this V0040JobDescMsg.

        Local node making the resource allocation  # noqa: E501

        :param allocation_node_list: The allocation_node_list of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._allocation_node_list = allocation_node_list

    @property
    def allocation_node_port(self):
        """Gets the allocation_node_port of this V0040JobDescMsg.  # noqa: E501

        Port to send allocation confirmation to  # noqa: E501

        :return: The allocation_node_port of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._allocation_node_port

    @allocation_node_port.setter
    def allocation_node_port(self, allocation_node_port):
        """Sets the allocation_node_port of this V0040JobDescMsg.

        Port to send allocation confirmation to  # noqa: E501

        :param allocation_node_port: The allocation_node_port of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._allocation_node_port = allocation_node_port

    @property
    def argv(self):
        """Gets the argv of this V0040JobDescMsg.  # noqa: E501


        :return: The argv of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._argv

    @argv.setter
    def argv(self, argv):
        """Sets the argv of this V0040JobDescMsg.


        :param argv: The argv of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """

        self._argv = argv

    @property
    def array(self):
        """Gets the array of this V0040JobDescMsg.  # noqa: E501

        Job array index value specification  # noqa: E501

        :return: The array of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this V0040JobDescMsg.

        Job array index value specification  # noqa: E501

        :param array: The array of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._array = array

    @property
    def batch_features(self):
        """Gets the batch_features of this V0040JobDescMsg.  # noqa: E501

        Features required for batch script's node  # noqa: E501

        :return: The batch_features of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._batch_features

    @batch_features.setter
    def batch_features(self, batch_features):
        """Sets the batch_features of this V0040JobDescMsg.

        Features required for batch script's node  # noqa: E501

        :param batch_features: The batch_features of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._batch_features = batch_features

    @property
    def begin_time(self):
        """Gets the begin_time of this V0040JobDescMsg.  # noqa: E501


        :return: The begin_time of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this V0040JobDescMsg.


        :param begin_time: The begin_time of this V0040JobDescMsg.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._begin_time = begin_time

    @property
    def flags(self):
        """Gets the flags of this V0040JobDescMsg.  # noqa: E501

        Job flags  # noqa: E501

        :return: The flags of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040JobDescMsg.

        Job flags  # noqa: E501

        :param flags: The flags of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["KILL_INVALID_DEPENDENCY", "NO_KILL_INVALID_DEPENDENCY", "HAS_STATE_DIRECTORY", "TESTING_BACKFILL", "GRES_BINDING_ENFORCED", "TEST_NOW_ONLY", "SEND_JOB_ENVIRONMENT", "SPREAD_JOB", "PREFER_MINIMUM_NODE_COUNT", "JOB_KILL_HURRY", "SKIP_TRES_STRING_ACCOUNTING", "SIBLING_CLUSTER_UPDATE_ONLY", "HETEROGENEOUS_JOB", "EXACT_TASK_COUNT_REQUESTED", "EXACT_CPU_COUNT_REQUESTED", "TESTING_WHOLE_NODE_BACKFILL", "TOP_PRIORITY_JOB", "ACCRUE_COUNT_CLEARED", "GRES_BINDING_DISABLED", "JOB_WAS_RUNNING", "JOB_ACCRUE_TIME_RESET", "CRON_JOB", "EXACT_MEMORY_REQUESTED", "USING_DEFAULT_ACCOUNT", "USING_DEFAULT_PARTITION", "USING_DEFAULT_QOS", "USING_DEFAULT_WCKEY", "DEPENDENT", "MAGNETIC", "PARTITION_ASSIGNED", "BACKFILL_ATTEMPTED", "SCHEDULING_ATTEMPTED", "SAVE_BATCH_SCRIPT", "GRES_ONE_TASK_PER_SHARING", "GRES_MULTIPLE_TASKS_PER_SHARING", "GRES_ALLOW_TASK_SHARING"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def burst_buffer(self):
        """Gets the burst_buffer of this V0040JobDescMsg.  # noqa: E501

        Burst buffer specifications  # noqa: E501

        :return: The burst_buffer of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._burst_buffer

    @burst_buffer.setter
    def burst_buffer(self, burst_buffer):
        """Sets the burst_buffer of this V0040JobDescMsg.

        Burst buffer specifications  # noqa: E501

        :param burst_buffer: The burst_buffer of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._burst_buffer = burst_buffer

    @property
    def clusters(self):
        """Gets the clusters of this V0040JobDescMsg.  # noqa: E501

        Clusters that a federated job can run on  # noqa: E501

        :return: The clusters of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this V0040JobDescMsg.

        Clusters that a federated job can run on  # noqa: E501

        :param clusters: The clusters of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._clusters = clusters

    @property
    def cluster_constraint(self):
        """Gets the cluster_constraint of this V0040JobDescMsg.  # noqa: E501

        Required features that a federated cluster must have to have a sibling job submitted to it  # noqa: E501

        :return: The cluster_constraint of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._cluster_constraint

    @cluster_constraint.setter
    def cluster_constraint(self, cluster_constraint):
        """Sets the cluster_constraint of this V0040JobDescMsg.

        Required features that a federated cluster must have to have a sibling job submitted to it  # noqa: E501

        :param cluster_constraint: The cluster_constraint of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._cluster_constraint = cluster_constraint

    @property
    def comment(self):
        """Gets the comment of this V0040JobDescMsg.  # noqa: E501

        Arbitrary comment made by user  # noqa: E501

        :return: The comment of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this V0040JobDescMsg.

        Arbitrary comment made by user  # noqa: E501

        :param comment: The comment of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def contiguous(self):
        """Gets the contiguous of this V0040JobDescMsg.  # noqa: E501

        True if job requires contiguous nodes  # noqa: E501

        :return: The contiguous of this V0040JobDescMsg.  # noqa: E501
        :rtype: bool
        """
        return self._contiguous

    @contiguous.setter
    def contiguous(self, contiguous):
        """Sets the contiguous of this V0040JobDescMsg.

        True if job requires contiguous nodes  # noqa: E501

        :param contiguous: The contiguous of this V0040JobDescMsg.  # noqa: E501
        :type: bool
        """

        self._contiguous = contiguous

    @property
    def container(self):
        """Gets the container of this V0040JobDescMsg.  # noqa: E501

        Absolute path to OCI container bundle  # noqa: E501

        :return: The container of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this V0040JobDescMsg.

        Absolute path to OCI container bundle  # noqa: E501

        :param container: The container of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._container = container

    @property
    def container_id(self):
        """Gets the container_id of this V0040JobDescMsg.  # noqa: E501

        OCI container ID  # noqa: E501

        :return: The container_id of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this V0040JobDescMsg.

        OCI container ID  # noqa: E501

        :param container_id: The container_id of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def cores_per_socket(self):
        """Gets the cores_per_socket of this V0040JobDescMsg.  # noqa: E501

        Cores per socket required  # noqa: E501

        :return: The cores_per_socket of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._cores_per_socket

    @cores_per_socket.setter
    def cores_per_socket(self, cores_per_socket):
        """Sets the cores_per_socket of this V0040JobDescMsg.

        Cores per socket required  # noqa: E501

        :param cores_per_socket: The cores_per_socket of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._cores_per_socket = cores_per_socket

    @property
    def core_specification(self):
        """Gets the core_specification of this V0040JobDescMsg.  # noqa: E501

        Specialized core count  # noqa: E501

        :return: The core_specification of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._core_specification

    @core_specification.setter
    def core_specification(self, core_specification):
        """Sets the core_specification of this V0040JobDescMsg.

        Specialized core count  # noqa: E501

        :param core_specification: The core_specification of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._core_specification = core_specification

    @property
    def thread_specification(self):
        """Gets the thread_specification of this V0040JobDescMsg.  # noqa: E501

        Specialized thread count  # noqa: E501

        :return: The thread_specification of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._thread_specification

    @thread_specification.setter
    def thread_specification(self, thread_specification):
        """Sets the thread_specification of this V0040JobDescMsg.

        Specialized thread count  # noqa: E501

        :param thread_specification: The thread_specification of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._thread_specification = thread_specification

    @property
    def cpu_binding(self):
        """Gets the cpu_binding of this V0040JobDescMsg.  # noqa: E501

        Method for binding tasks to allocated CPUs  # noqa: E501

        :return: The cpu_binding of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._cpu_binding

    @cpu_binding.setter
    def cpu_binding(self, cpu_binding):
        """Sets the cpu_binding of this V0040JobDescMsg.

        Method for binding tasks to allocated CPUs  # noqa: E501

        :param cpu_binding: The cpu_binding of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._cpu_binding = cpu_binding

    @property
    def cpu_binding_flags(self):
        """Gets the cpu_binding_flags of this V0040JobDescMsg.  # noqa: E501

        Flags for CPU binding  # noqa: E501

        :return: The cpu_binding_flags of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._cpu_binding_flags

    @cpu_binding_flags.setter
    def cpu_binding_flags(self, cpu_binding_flags):
        """Sets the cpu_binding_flags of this V0040JobDescMsg.

        Flags for CPU binding  # noqa: E501

        :param cpu_binding_flags: The cpu_binding_flags of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CPU_BIND_TO_THREADS", "CPU_BIND_TO_CORES", "CPU_BIND_TO_SOCKETS", "CPU_BIND_TO_LDOMS", "CPU_BIND_NONE", "CPU_BIND_RANK", "CPU_BIND_MAP", "CPU_BIND_MASK", "CPU_BIND_LDRANK", "CPU_BIND_LDMAP", "CPU_BIND_LDMASK", "VERBOSE", "CPU_BIND_ONE_THREAD_PER_CORE"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(cpu_binding_flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `cpu_binding_flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(cpu_binding_flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._cpu_binding_flags = cpu_binding_flags

    @property
    def cpu_frequency(self):
        """Gets the cpu_frequency of this V0040JobDescMsg.  # noqa: E501

        Requested CPU frequency range <p1>[-p2][:p3]  # noqa: E501

        :return: The cpu_frequency of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._cpu_frequency

    @cpu_frequency.setter
    def cpu_frequency(self, cpu_frequency):
        """Sets the cpu_frequency of this V0040JobDescMsg.

        Requested CPU frequency range <p1>[-p2][:p3]  # noqa: E501

        :param cpu_frequency: The cpu_frequency of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._cpu_frequency = cpu_frequency

    @property
    def cpus_per_tres(self):
        """Gets the cpus_per_tres of this V0040JobDescMsg.  # noqa: E501

        Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)  # noqa: E501

        :return: The cpus_per_tres of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._cpus_per_tres

    @cpus_per_tres.setter
    def cpus_per_tres(self, cpus_per_tres):
        """Sets the cpus_per_tres of this V0040JobDescMsg.

        Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)  # noqa: E501

        :param cpus_per_tres: The cpus_per_tres of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._cpus_per_tres = cpus_per_tres

    @property
    def crontab(self):
        """Gets the crontab of this V0040JobDescMsg.  # noqa: E501


        :return: The crontab of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040CronEntry
        """
        return self._crontab

    @crontab.setter
    def crontab(self, crontab):
        """Sets the crontab of this V0040JobDescMsg.


        :param crontab: The crontab of this V0040JobDescMsg.  # noqa: E501
        :type: V0040CronEntry
        """

        self._crontab = crontab

    @property
    def deadline(self):
        """Gets the deadline of this V0040JobDescMsg.  # noqa: E501

        Latest time that the job may start (UNIX timestamp)  # noqa: E501

        :return: The deadline of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this V0040JobDescMsg.

        Latest time that the job may start (UNIX timestamp)  # noqa: E501

        :param deadline: The deadline of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._deadline = deadline

    @property
    def delay_boot(self):
        """Gets the delay_boot of this V0040JobDescMsg.  # noqa: E501

        Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification  # noqa: E501

        :return: The delay_boot of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._delay_boot

    @delay_boot.setter
    def delay_boot(self, delay_boot):
        """Sets the delay_boot of this V0040JobDescMsg.

        Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification  # noqa: E501

        :param delay_boot: The delay_boot of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._delay_boot = delay_boot

    @property
    def dependency(self):
        """Gets the dependency of this V0040JobDescMsg.  # noqa: E501

        Other jobs that must meet certain criteria before this job can start  # noqa: E501

        :return: The dependency of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency):
        """Sets the dependency of this V0040JobDescMsg.

        Other jobs that must meet certain criteria before this job can start  # noqa: E501

        :param dependency: The dependency of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._dependency = dependency

    @property
    def end_time(self):
        """Gets the end_time of this V0040JobDescMsg.  # noqa: E501

        Expected end time (UNIX timestamp)  # noqa: E501

        :return: The end_time of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V0040JobDescMsg.

        Expected end time (UNIX timestamp)  # noqa: E501

        :param end_time: The end_time of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def environment(self):
        """Gets the environment of this V0040JobDescMsg.  # noqa: E501


        :return: The environment of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this V0040JobDescMsg.


        :param environment: The environment of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """

        self._environment = environment

    @property
    def rlimits(self):
        """Gets the rlimits of this V0040JobDescMsg.  # noqa: E501


        :return: The rlimits of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040JobDescMsgRlimits
        """
        return self._rlimits

    @rlimits.setter
    def rlimits(self, rlimits):
        """Sets the rlimits of this V0040JobDescMsg.


        :param rlimits: The rlimits of this V0040JobDescMsg.  # noqa: E501
        :type: V0040JobDescMsgRlimits
        """

        self._rlimits = rlimits

    @property
    def excluded_nodes(self):
        """Gets the excluded_nodes of this V0040JobDescMsg.  # noqa: E501


        :return: The excluded_nodes of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_nodes

    @excluded_nodes.setter
    def excluded_nodes(self, excluded_nodes):
        """Sets the excluded_nodes of this V0040JobDescMsg.


        :param excluded_nodes: The excluded_nodes of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """

        self._excluded_nodes = excluded_nodes

    @property
    def extra(self):
        """Gets the extra of this V0040JobDescMsg.  # noqa: E501

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :return: The extra of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this V0040JobDescMsg.

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :param extra: The extra of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._extra = extra

    @property
    def constraints(self):
        """Gets the constraints of this V0040JobDescMsg.  # noqa: E501

        Comma separated list of features that are required  # noqa: E501

        :return: The constraints of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this V0040JobDescMsg.

        Comma separated list of features that are required  # noqa: E501

        :param constraints: The constraints of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._constraints = constraints

    @property
    def group_id(self):
        """Gets the group_id of this V0040JobDescMsg.  # noqa: E501

        Group ID of the user that owns the job  # noqa: E501

        :return: The group_id of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this V0040JobDescMsg.

        Group ID of the user that owns the job  # noqa: E501

        :param group_id: The group_id of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def hetjob_group(self):
        """Gets the hetjob_group of this V0040JobDescMsg.  # noqa: E501

        Unique sequence number applied to this component of the heterogeneous job  # noqa: E501

        :return: The hetjob_group of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._hetjob_group

    @hetjob_group.setter
    def hetjob_group(self, hetjob_group):
        """Sets the hetjob_group of this V0040JobDescMsg.

        Unique sequence number applied to this component of the heterogeneous job  # noqa: E501

        :param hetjob_group: The hetjob_group of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._hetjob_group = hetjob_group

    @property
    def immediate(self):
        """Gets the immediate of this V0040JobDescMsg.  # noqa: E501

        If true, exit if resources are not available within the time period specified  # noqa: E501

        :return: The immediate of this V0040JobDescMsg.  # noqa: E501
        :rtype: bool
        """
        return self._immediate

    @immediate.setter
    def immediate(self, immediate):
        """Sets the immediate of this V0040JobDescMsg.

        If true, exit if resources are not available within the time period specified  # noqa: E501

        :param immediate: The immediate of this V0040JobDescMsg.  # noqa: E501
        :type: bool
        """

        self._immediate = immediate

    @property
    def job_id(self):
        """Gets the job_id of this V0040JobDescMsg.  # noqa: E501

        Job ID  # noqa: E501

        :return: The job_id of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this V0040JobDescMsg.

        Job ID  # noqa: E501

        :param job_id: The job_id of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def kill_on_node_fail(self):
        """Gets the kill_on_node_fail of this V0040JobDescMsg.  # noqa: E501

        If true, kill job on node failure  # noqa: E501

        :return: The kill_on_node_fail of this V0040JobDescMsg.  # noqa: E501
        :rtype: bool
        """
        return self._kill_on_node_fail

    @kill_on_node_fail.setter
    def kill_on_node_fail(self, kill_on_node_fail):
        """Sets the kill_on_node_fail of this V0040JobDescMsg.

        If true, kill job on node failure  # noqa: E501

        :param kill_on_node_fail: The kill_on_node_fail of this V0040JobDescMsg.  # noqa: E501
        :type: bool
        """

        self._kill_on_node_fail = kill_on_node_fail

    @property
    def licenses(self):
        """Gets the licenses of this V0040JobDescMsg.  # noqa: E501

        License(s) required by the job  # noqa: E501

        :return: The licenses of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this V0040JobDescMsg.

        License(s) required by the job  # noqa: E501

        :param licenses: The licenses of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._licenses = licenses

    @property
    def mail_type(self):
        """Gets the mail_type of this V0040JobDescMsg.  # noqa: E501

        Mail event type(s)  # noqa: E501

        :return: The mail_type of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._mail_type

    @mail_type.setter
    def mail_type(self, mail_type):
        """Sets the mail_type of this V0040JobDescMsg.

        Mail event type(s)  # noqa: E501

        :param mail_type: The mail_type of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["BEGIN", "END", "FAIL", "REQUEUE", "TIME=100%", "TIME=90%", "TIME=80%", "TIME=50%", "STAGE_OUT", "ARRAY_TASKS", "INVALID_DEPENDENCY"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(mail_type).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `mail_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(mail_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._mail_type = mail_type

    @property
    def mail_user(self):
        """Gets the mail_user of this V0040JobDescMsg.  # noqa: E501

        User to receive email notifications  # noqa: E501

        :return: The mail_user of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._mail_user

    @mail_user.setter
    def mail_user(self, mail_user):
        """Sets the mail_user of this V0040JobDescMsg.

        User to receive email notifications  # noqa: E501

        :param mail_user: The mail_user of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._mail_user = mail_user

    @property
    def mcs_label(self):
        """Gets the mcs_label of this V0040JobDescMsg.  # noqa: E501

        Multi-Category Security label on the job  # noqa: E501

        :return: The mcs_label of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._mcs_label

    @mcs_label.setter
    def mcs_label(self, mcs_label):
        """Sets the mcs_label of this V0040JobDescMsg.

        Multi-Category Security label on the job  # noqa: E501

        :param mcs_label: The mcs_label of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._mcs_label = mcs_label

    @property
    def memory_binding(self):
        """Gets the memory_binding of this V0040JobDescMsg.  # noqa: E501

        Binding map for map/mask_cpu  # noqa: E501

        :return: The memory_binding of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._memory_binding

    @memory_binding.setter
    def memory_binding(self, memory_binding):
        """Sets the memory_binding of this V0040JobDescMsg.

        Binding map for map/mask_cpu  # noqa: E501

        :param memory_binding: The memory_binding of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._memory_binding = memory_binding

    @property
    def memory_binding_type(self):
        """Gets the memory_binding_type of this V0040JobDescMsg.  # noqa: E501

        Method for binding tasks to memory  # noqa: E501

        :return: The memory_binding_type of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._memory_binding_type

    @memory_binding_type.setter
    def memory_binding_type(self, memory_binding_type):
        """Sets the memory_binding_type of this V0040JobDescMsg.

        Method for binding tasks to memory  # noqa: E501

        :param memory_binding_type: The memory_binding_type of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NONE", "RANK", "MAP", "MASK", "LOCAL", "VERBOSE", "SORT", "PREFER"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(memory_binding_type).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `memory_binding_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(memory_binding_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._memory_binding_type = memory_binding_type

    @property
    def memory_per_tres(self):
        """Gets the memory_per_tres of this V0040JobDescMsg.  # noqa: E501

        Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)  # noqa: E501

        :return: The memory_per_tres of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._memory_per_tres

    @memory_per_tres.setter
    def memory_per_tres(self, memory_per_tres):
        """Sets the memory_per_tres of this V0040JobDescMsg.

        Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)  # noqa: E501

        :param memory_per_tres: The memory_per_tres of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._memory_per_tres = memory_per_tres

    @property
    def name(self):
        """Gets the name of this V0040JobDescMsg.  # noqa: E501

        Job name  # noqa: E501

        :return: The name of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040JobDescMsg.

        Job name  # noqa: E501

        :param name: The name of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this V0040JobDescMsg.  # noqa: E501

        Network specs for job step  # noqa: E501

        :return: The network of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this V0040JobDescMsg.

        Network specs for job step  # noqa: E501

        :param network: The network of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def nice(self):
        """Gets the nice of this V0040JobDescMsg.  # noqa: E501

        Requested job priority change  # noqa: E501

        :return: The nice of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._nice

    @nice.setter
    def nice(self, nice):
        """Sets the nice of this V0040JobDescMsg.

        Requested job priority change  # noqa: E501

        :param nice: The nice of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._nice = nice

    @property
    def tasks(self):
        """Gets the tasks of this V0040JobDescMsg.  # noqa: E501

        Number of tasks  # noqa: E501

        :return: The tasks of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this V0040JobDescMsg.

        Number of tasks  # noqa: E501

        :param tasks: The tasks of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._tasks = tasks

    @property
    def open_mode(self):
        """Gets the open_mode of this V0040JobDescMsg.  # noqa: E501

        Open mode used for stdout and stderr files  # noqa: E501

        :return: The open_mode of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._open_mode

    @open_mode.setter
    def open_mode(self, open_mode):
        """Sets the open_mode of this V0040JobDescMsg.

        Open mode used for stdout and stderr files  # noqa: E501

        :param open_mode: The open_mode of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["APPEND", "TRUNCATE"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(open_mode).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `open_mode` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(open_mode) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._open_mode = open_mode

    @property
    def reserve_ports(self):
        """Gets the reserve_ports of this V0040JobDescMsg.  # noqa: E501

        Port to send various notification msg to  # noqa: E501

        :return: The reserve_ports of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._reserve_ports

    @reserve_ports.setter
    def reserve_ports(self, reserve_ports):
        """Sets the reserve_ports of this V0040JobDescMsg.

        Port to send various notification msg to  # noqa: E501

        :param reserve_ports: The reserve_ports of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._reserve_ports = reserve_ports

    @property
    def overcommit(self):
        """Gets the overcommit of this V0040JobDescMsg.  # noqa: E501

        Overcommit resources  # noqa: E501

        :return: The overcommit of this V0040JobDescMsg.  # noqa: E501
        :rtype: bool
        """
        return self._overcommit

    @overcommit.setter
    def overcommit(self, overcommit):
        """Sets the overcommit of this V0040JobDescMsg.

        Overcommit resources  # noqa: E501

        :param overcommit: The overcommit of this V0040JobDescMsg.  # noqa: E501
        :type: bool
        """

        self._overcommit = overcommit

    @property
    def partition(self):
        """Gets the partition of this V0040JobDescMsg.  # noqa: E501

        Partition assigned to the job  # noqa: E501

        :return: The partition of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this V0040JobDescMsg.

        Partition assigned to the job  # noqa: E501

        :param partition: The partition of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def distribution_plane_size(self):
        """Gets the distribution_plane_size of this V0040JobDescMsg.  # noqa: E501

        Plane size specification when distribution specifies plane  # noqa: E501

        :return: The distribution_plane_size of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._distribution_plane_size

    @distribution_plane_size.setter
    def distribution_plane_size(self, distribution_plane_size):
        """Sets the distribution_plane_size of this V0040JobDescMsg.

        Plane size specification when distribution specifies plane  # noqa: E501

        :param distribution_plane_size: The distribution_plane_size of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._distribution_plane_size = distribution_plane_size

    @property
    def power_flags(self):
        """Gets the power_flags of this V0040JobDescMsg.  # noqa: E501

        removed field  # noqa: E501

        :return: The power_flags of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[object]
        """
        return self._power_flags

    @power_flags.setter
    def power_flags(self, power_flags):
        """Sets the power_flags of this V0040JobDescMsg.

        removed field  # noqa: E501

        :param power_flags: The power_flags of this V0040JobDescMsg.  # noqa: E501
        :type: list[object]
        """

        self._power_flags = power_flags

    @property
    def prefer(self):
        """Gets the prefer of this V0040JobDescMsg.  # noqa: E501

        Comma separated list of features that are preferred but not required  # noqa: E501

        :return: The prefer of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._prefer

    @prefer.setter
    def prefer(self, prefer):
        """Sets the prefer of this V0040JobDescMsg.

        Comma separated list of features that are preferred but not required  # noqa: E501

        :param prefer: The prefer of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._prefer = prefer

    @property
    def hold(self):
        """Gets the hold of this V0040JobDescMsg.  # noqa: E501

        Job held  # noqa: E501

        :return: The hold of this V0040JobDescMsg.  # noqa: E501
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this V0040JobDescMsg.

        Job held  # noqa: E501

        :param hold: The hold of this V0040JobDescMsg.  # noqa: E501
        :type: bool
        """

        self._hold = hold

    @property
    def priority(self):
        """Gets the priority of this V0040JobDescMsg.  # noqa: E501


        :return: The priority of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this V0040JobDescMsg.


        :param priority: The priority of this V0040JobDescMsg.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._priority = priority

    @property
    def profile(self):
        """Gets the profile of this V0040JobDescMsg.  # noqa: E501

        Profile used by the acct_gather_profile plugin  # noqa: E501

        :return: The profile of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this V0040JobDescMsg.

        Profile used by the acct_gather_profile plugin  # noqa: E501

        :param profile: The profile of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NOT_SET", "NONE", "ENERGY", "LUSTRE", "NETWORK", "TASK"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(profile).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `profile` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(profile) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._profile = profile

    @property
    def qos(self):
        """Gets the qos of this V0040JobDescMsg.  # noqa: E501

        Quality of Service assigned to the job  # noqa: E501

        :return: The qos of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this V0040JobDescMsg.

        Quality of Service assigned to the job  # noqa: E501

        :param qos: The qos of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._qos = qos

    @property
    def reboot(self):
        """Gets the reboot of this V0040JobDescMsg.  # noqa: E501

        Node reboot requested before start  # noqa: E501

        :return: The reboot of this V0040JobDescMsg.  # noqa: E501
        :rtype: bool
        """
        return self._reboot

    @reboot.setter
    def reboot(self, reboot):
        """Sets the reboot of this V0040JobDescMsg.

        Node reboot requested before start  # noqa: E501

        :param reboot: The reboot of this V0040JobDescMsg.  # noqa: E501
        :type: bool
        """

        self._reboot = reboot

    @property
    def required_nodes(self):
        """Gets the required_nodes of this V0040JobDescMsg.  # noqa: E501


        :return: The required_nodes of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_nodes

    @required_nodes.setter
    def required_nodes(self, required_nodes):
        """Sets the required_nodes of this V0040JobDescMsg.


        :param required_nodes: The required_nodes of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """

        self._required_nodes = required_nodes

    @property
    def requeue(self):
        """Gets the requeue of this V0040JobDescMsg.  # noqa: E501

        Determines whether the job may be requeued  # noqa: E501

        :return: The requeue of this V0040JobDescMsg.  # noqa: E501
        :rtype: bool
        """
        return self._requeue

    @requeue.setter
    def requeue(self, requeue):
        """Sets the requeue of this V0040JobDescMsg.

        Determines whether the job may be requeued  # noqa: E501

        :param requeue: The requeue of this V0040JobDescMsg.  # noqa: E501
        :type: bool
        """

        self._requeue = requeue

    @property
    def reservation(self):
        """Gets the reservation of this V0040JobDescMsg.  # noqa: E501

        Name of reservation to use  # noqa: E501

        :return: The reservation of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this V0040JobDescMsg.

        Name of reservation to use  # noqa: E501

        :param reservation: The reservation of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._reservation = reservation

    @property
    def script(self):
        """Gets the script of this V0040JobDescMsg.  # noqa: E501

        Job batch script; only the first component in a HetJob is populated or honored  # noqa: E501

        :return: The script of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this V0040JobDescMsg.

        Job batch script; only the first component in a HetJob is populated or honored  # noqa: E501

        :param script: The script of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def shared(self):
        """Gets the shared of this V0040JobDescMsg.  # noqa: E501

        How the job can share resources with other jobs, if at all  # noqa: E501

        :return: The shared of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this V0040JobDescMsg.

        How the job can share resources with other jobs, if at all  # noqa: E501

        :param shared: The shared of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["none", "oversubscribe", "user", "mcs"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(shared).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `shared` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(shared) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._shared = shared

    @property
    def exclusive(self):
        """Gets the exclusive of this V0040JobDescMsg.  # noqa: E501


        :return: The exclusive of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this V0040JobDescMsg.


        :param exclusive: The exclusive of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["true", "false", "user", "mcs"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(exclusive).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `exclusive` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(exclusive) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._exclusive = exclusive

    @property
    def oversubscribe(self):
        """Gets the oversubscribe of this V0040JobDescMsg.  # noqa: E501


        :return: The oversubscribe of this V0040JobDescMsg.  # noqa: E501
        :rtype: bool
        """
        return self._oversubscribe

    @oversubscribe.setter
    def oversubscribe(self, oversubscribe):
        """Sets the oversubscribe of this V0040JobDescMsg.


        :param oversubscribe: The oversubscribe of this V0040JobDescMsg.  # noqa: E501
        :type: bool
        """

        self._oversubscribe = oversubscribe

    @property
    def site_factor(self):
        """Gets the site_factor of this V0040JobDescMsg.  # noqa: E501

        Site-specific priority factor  # noqa: E501

        :return: The site_factor of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._site_factor

    @site_factor.setter
    def site_factor(self, site_factor):
        """Sets the site_factor of this V0040JobDescMsg.

        Site-specific priority factor  # noqa: E501

        :param site_factor: The site_factor of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._site_factor = site_factor

    @property
    def spank_environment(self):
        """Gets the spank_environment of this V0040JobDescMsg.  # noqa: E501


        :return: The spank_environment of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._spank_environment

    @spank_environment.setter
    def spank_environment(self, spank_environment):
        """Sets the spank_environment of this V0040JobDescMsg.


        :param spank_environment: The spank_environment of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """

        self._spank_environment = spank_environment

    @property
    def distribution(self):
        """Gets the distribution of this V0040JobDescMsg.  # noqa: E501

        Layout  # noqa: E501

        :return: The distribution of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this V0040JobDescMsg.

        Layout  # noqa: E501

        :param distribution: The distribution of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._distribution = distribution

    @property
    def time_limit(self):
        """Gets the time_limit of this V0040JobDescMsg.  # noqa: E501


        :return: The time_limit of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._time_limit

    @time_limit.setter
    def time_limit(self, time_limit):
        """Sets the time_limit of this V0040JobDescMsg.


        :param time_limit: The time_limit of this V0040JobDescMsg.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._time_limit = time_limit

    @property
    def time_minimum(self):
        """Gets the time_minimum of this V0040JobDescMsg.  # noqa: E501


        :return: The time_minimum of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._time_minimum

    @time_minimum.setter
    def time_minimum(self, time_minimum):
        """Sets the time_minimum of this V0040JobDescMsg.


        :param time_minimum: The time_minimum of this V0040JobDescMsg.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._time_minimum = time_minimum

    @property
    def tres_bind(self):
        """Gets the tres_bind of this V0040JobDescMsg.  # noqa: E501

        Task to TRES binding directives  # noqa: E501

        :return: The tres_bind of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._tres_bind

    @tres_bind.setter
    def tres_bind(self, tres_bind):
        """Sets the tres_bind of this V0040JobDescMsg.

        Task to TRES binding directives  # noqa: E501

        :param tres_bind: The tres_bind of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._tres_bind = tres_bind

    @property
    def tres_freq(self):
        """Gets the tres_freq of this V0040JobDescMsg.  # noqa: E501

        TRES frequency directives  # noqa: E501

        :return: The tres_freq of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._tres_freq

    @tres_freq.setter
    def tres_freq(self, tres_freq):
        """Sets the tres_freq of this V0040JobDescMsg.

        TRES frequency directives  # noqa: E501

        :param tres_freq: The tres_freq of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._tres_freq = tres_freq

    @property
    def tres_per_job(self):
        """Gets the tres_per_job of this V0040JobDescMsg.  # noqa: E501

        Comma separated list of TRES=# values to be allocated for every job  # noqa: E501

        :return: The tres_per_job of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._tres_per_job

    @tres_per_job.setter
    def tres_per_job(self, tres_per_job):
        """Sets the tres_per_job of this V0040JobDescMsg.

        Comma separated list of TRES=# values to be allocated for every job  # noqa: E501

        :param tres_per_job: The tres_per_job of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._tres_per_job = tres_per_job

    @property
    def tres_per_node(self):
        """Gets the tres_per_node of this V0040JobDescMsg.  # noqa: E501

        Comma separated list of TRES=# values to be allocated for every node  # noqa: E501

        :return: The tres_per_node of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._tres_per_node

    @tres_per_node.setter
    def tres_per_node(self, tres_per_node):
        """Sets the tres_per_node of this V0040JobDescMsg.

        Comma separated list of TRES=# values to be allocated for every node  # noqa: E501

        :param tres_per_node: The tres_per_node of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._tres_per_node = tres_per_node

    @property
    def tres_per_socket(self):
        """Gets the tres_per_socket of this V0040JobDescMsg.  # noqa: E501

        Comma separated list of TRES=# values to be allocated for every socket  # noqa: E501

        :return: The tres_per_socket of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._tres_per_socket

    @tres_per_socket.setter
    def tres_per_socket(self, tres_per_socket):
        """Sets the tres_per_socket of this V0040JobDescMsg.

        Comma separated list of TRES=# values to be allocated for every socket  # noqa: E501

        :param tres_per_socket: The tres_per_socket of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._tres_per_socket = tres_per_socket

    @property
    def tres_per_task(self):
        """Gets the tres_per_task of this V0040JobDescMsg.  # noqa: E501

        Comma separated list of TRES=# values to be allocated for every task  # noqa: E501

        :return: The tres_per_task of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._tres_per_task

    @tres_per_task.setter
    def tres_per_task(self, tres_per_task):
        """Sets the tres_per_task of this V0040JobDescMsg.

        Comma separated list of TRES=# values to be allocated for every task  # noqa: E501

        :param tres_per_task: The tres_per_task of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._tres_per_task = tres_per_task

    @property
    def user_id(self):
        """Gets the user_id of this V0040JobDescMsg.  # noqa: E501

        User ID that owns the job  # noqa: E501

        :return: The user_id of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V0040JobDescMsg.

        User ID that owns the job  # noqa: E501

        :param user_id: The user_id of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def wait_all_nodes(self):
        """Gets the wait_all_nodes of this V0040JobDescMsg.  # noqa: E501

        If true, wait to start until after all nodes have booted  # noqa: E501

        :return: The wait_all_nodes of this V0040JobDescMsg.  # noqa: E501
        :rtype: bool
        """
        return self._wait_all_nodes

    @wait_all_nodes.setter
    def wait_all_nodes(self, wait_all_nodes):
        """Sets the wait_all_nodes of this V0040JobDescMsg.

        If true, wait to start until after all nodes have booted  # noqa: E501

        :param wait_all_nodes: The wait_all_nodes of this V0040JobDescMsg.  # noqa: E501
        :type: bool
        """

        self._wait_all_nodes = wait_all_nodes

    @property
    def kill_warning_flags(self):
        """Gets the kill_warning_flags of this V0040JobDescMsg.  # noqa: E501

        Flags related to job signals  # noqa: E501

        :return: The kill_warning_flags of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._kill_warning_flags

    @kill_warning_flags.setter
    def kill_warning_flags(self, kill_warning_flags):
        """Sets the kill_warning_flags of this V0040JobDescMsg.

        Flags related to job signals  # noqa: E501

        :param kill_warning_flags: The kill_warning_flags of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["BATCH_JOB", "ARRAY_TASK", "FULL_STEPS_ONLY", "FULL_JOB", "FEDERATION_REQUEUE", "HURRY", "OUT_OF_MEMORY", "NO_SIBLING_JOBS", "RESERVATION_JOB", "NO_CRON_JOBS", "VERBOSE", "CRON_JOBS", "WARNING_SENT"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(kill_warning_flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `kill_warning_flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(kill_warning_flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._kill_warning_flags = kill_warning_flags

    @property
    def kill_warning_signal(self):
        """Gets the kill_warning_signal of this V0040JobDescMsg.  # noqa: E501

        Signal to send when approaching end time (e.g. \"10\" or \"USR1\")  # noqa: E501

        :return: The kill_warning_signal of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._kill_warning_signal

    @kill_warning_signal.setter
    def kill_warning_signal(self, kill_warning_signal):
        """Sets the kill_warning_signal of this V0040JobDescMsg.

        Signal to send when approaching end time (e.g. \"10\" or \"USR1\")  # noqa: E501

        :param kill_warning_signal: The kill_warning_signal of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._kill_warning_signal = kill_warning_signal

    @property
    def kill_warning_delay(self):
        """Gets the kill_warning_delay of this V0040JobDescMsg.  # noqa: E501


        :return: The kill_warning_delay of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._kill_warning_delay

    @kill_warning_delay.setter
    def kill_warning_delay(self, kill_warning_delay):
        """Sets the kill_warning_delay of this V0040JobDescMsg.


        :param kill_warning_delay: The kill_warning_delay of this V0040JobDescMsg.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._kill_warning_delay = kill_warning_delay

    @property
    def current_working_directory(self):
        """Gets the current_working_directory of this V0040JobDescMsg.  # noqa: E501

        Working directory to use for the job  # noqa: E501

        :return: The current_working_directory of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._current_working_directory

    @current_working_directory.setter
    def current_working_directory(self, current_working_directory):
        """Sets the current_working_directory of this V0040JobDescMsg.

        Working directory to use for the job  # noqa: E501

        :param current_working_directory: The current_working_directory of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._current_working_directory = current_working_directory

    @property
    def cpus_per_task(self):
        """Gets the cpus_per_task of this V0040JobDescMsg.  # noqa: E501

        Number of CPUs required by each task  # noqa: E501

        :return: The cpus_per_task of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._cpus_per_task

    @cpus_per_task.setter
    def cpus_per_task(self, cpus_per_task):
        """Sets the cpus_per_task of this V0040JobDescMsg.

        Number of CPUs required by each task  # noqa: E501

        :param cpus_per_task: The cpus_per_task of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._cpus_per_task = cpus_per_task

    @property
    def minimum_cpus(self):
        """Gets the minimum_cpus of this V0040JobDescMsg.  # noqa: E501

        Minimum number of CPUs required  # noqa: E501

        :return: The minimum_cpus of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._minimum_cpus

    @minimum_cpus.setter
    def minimum_cpus(self, minimum_cpus):
        """Sets the minimum_cpus of this V0040JobDescMsg.

        Minimum number of CPUs required  # noqa: E501

        :param minimum_cpus: The minimum_cpus of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._minimum_cpus = minimum_cpus

    @property
    def maximum_cpus(self):
        """Gets the maximum_cpus of this V0040JobDescMsg.  # noqa: E501

        Maximum number of CPUs required  # noqa: E501

        :return: The maximum_cpus of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._maximum_cpus

    @maximum_cpus.setter
    def maximum_cpus(self, maximum_cpus):
        """Sets the maximum_cpus of this V0040JobDescMsg.

        Maximum number of CPUs required  # noqa: E501

        :param maximum_cpus: The maximum_cpus of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._maximum_cpus = maximum_cpus

    @property
    def nodes(self):
        """Gets the nodes of this V0040JobDescMsg.  # noqa: E501

        Node count range specification (e.g. 1-15:4)  # noqa: E501

        :return: The nodes of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this V0040JobDescMsg.

        Node count range specification (e.g. 1-15:4)  # noqa: E501

        :param nodes: The nodes of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._nodes = nodes

    @property
    def minimum_nodes(self):
        """Gets the minimum_nodes of this V0040JobDescMsg.  # noqa: E501

        Minimum node count  # noqa: E501

        :return: The minimum_nodes of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._minimum_nodes

    @minimum_nodes.setter
    def minimum_nodes(self, minimum_nodes):
        """Sets the minimum_nodes of this V0040JobDescMsg.

        Minimum node count  # noqa: E501

        :param minimum_nodes: The minimum_nodes of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._minimum_nodes = minimum_nodes

    @property
    def maximum_nodes(self):
        """Gets the maximum_nodes of this V0040JobDescMsg.  # noqa: E501

        Maximum node count  # noqa: E501

        :return: The maximum_nodes of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._maximum_nodes

    @maximum_nodes.setter
    def maximum_nodes(self, maximum_nodes):
        """Sets the maximum_nodes of this V0040JobDescMsg.

        Maximum node count  # noqa: E501

        :param maximum_nodes: The maximum_nodes of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._maximum_nodes = maximum_nodes

    @property
    def minimum_boards_per_node(self):
        """Gets the minimum_boards_per_node of this V0040JobDescMsg.  # noqa: E501

        Boards per node required  # noqa: E501

        :return: The minimum_boards_per_node of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._minimum_boards_per_node

    @minimum_boards_per_node.setter
    def minimum_boards_per_node(self, minimum_boards_per_node):
        """Sets the minimum_boards_per_node of this V0040JobDescMsg.

        Boards per node required  # noqa: E501

        :param minimum_boards_per_node: The minimum_boards_per_node of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._minimum_boards_per_node = minimum_boards_per_node

    @property
    def minimum_sockets_per_board(self):
        """Gets the minimum_sockets_per_board of this V0040JobDescMsg.  # noqa: E501

        Sockets per board required  # noqa: E501

        :return: The minimum_sockets_per_board of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._minimum_sockets_per_board

    @minimum_sockets_per_board.setter
    def minimum_sockets_per_board(self, minimum_sockets_per_board):
        """Sets the minimum_sockets_per_board of this V0040JobDescMsg.

        Sockets per board required  # noqa: E501

        :param minimum_sockets_per_board: The minimum_sockets_per_board of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._minimum_sockets_per_board = minimum_sockets_per_board

    @property
    def sockets_per_node(self):
        """Gets the sockets_per_node of this V0040JobDescMsg.  # noqa: E501

        Sockets per node required  # noqa: E501

        :return: The sockets_per_node of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._sockets_per_node

    @sockets_per_node.setter
    def sockets_per_node(self, sockets_per_node):
        """Sets the sockets_per_node of this V0040JobDescMsg.

        Sockets per node required  # noqa: E501

        :param sockets_per_node: The sockets_per_node of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._sockets_per_node = sockets_per_node

    @property
    def threads_per_core(self):
        """Gets the threads_per_core of this V0040JobDescMsg.  # noqa: E501

        Threads per core required  # noqa: E501

        :return: The threads_per_core of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._threads_per_core

    @threads_per_core.setter
    def threads_per_core(self, threads_per_core):
        """Sets the threads_per_core of this V0040JobDescMsg.

        Threads per core required  # noqa: E501

        :param threads_per_core: The threads_per_core of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._threads_per_core = threads_per_core

    @property
    def tasks_per_node(self):
        """Gets the tasks_per_node of this V0040JobDescMsg.  # noqa: E501

        Number of tasks to invoke on each node  # noqa: E501

        :return: The tasks_per_node of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._tasks_per_node

    @tasks_per_node.setter
    def tasks_per_node(self, tasks_per_node):
        """Sets the tasks_per_node of this V0040JobDescMsg.

        Number of tasks to invoke on each node  # noqa: E501

        :param tasks_per_node: The tasks_per_node of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._tasks_per_node = tasks_per_node

    @property
    def tasks_per_socket(self):
        """Gets the tasks_per_socket of this V0040JobDescMsg.  # noqa: E501

        Number of tasks to invoke on each socket  # noqa: E501

        :return: The tasks_per_socket of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._tasks_per_socket

    @tasks_per_socket.setter
    def tasks_per_socket(self, tasks_per_socket):
        """Sets the tasks_per_socket of this V0040JobDescMsg.

        Number of tasks to invoke on each socket  # noqa: E501

        :param tasks_per_socket: The tasks_per_socket of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._tasks_per_socket = tasks_per_socket

    @property
    def tasks_per_core(self):
        """Gets the tasks_per_core of this V0040JobDescMsg.  # noqa: E501

        Number of tasks to invoke on each core  # noqa: E501

        :return: The tasks_per_core of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._tasks_per_core

    @tasks_per_core.setter
    def tasks_per_core(self, tasks_per_core):
        """Sets the tasks_per_core of this V0040JobDescMsg.

        Number of tasks to invoke on each core  # noqa: E501

        :param tasks_per_core: The tasks_per_core of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._tasks_per_core = tasks_per_core

    @property
    def tasks_per_board(self):
        """Gets the tasks_per_board of this V0040JobDescMsg.  # noqa: E501

        Number of tasks to invoke on each board  # noqa: E501

        :return: The tasks_per_board of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._tasks_per_board

    @tasks_per_board.setter
    def tasks_per_board(self, tasks_per_board):
        """Sets the tasks_per_board of this V0040JobDescMsg.

        Number of tasks to invoke on each board  # noqa: E501

        :param tasks_per_board: The tasks_per_board of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._tasks_per_board = tasks_per_board

    @property
    def ntasks_per_tres(self):
        """Gets the ntasks_per_tres of this V0040JobDescMsg.  # noqa: E501

        Number of tasks that can access each GPU  # noqa: E501

        :return: The ntasks_per_tres of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._ntasks_per_tres

    @ntasks_per_tres.setter
    def ntasks_per_tres(self, ntasks_per_tres):
        """Sets the ntasks_per_tres of this V0040JobDescMsg.

        Number of tasks that can access each GPU  # noqa: E501

        :param ntasks_per_tres: The ntasks_per_tres of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._ntasks_per_tres = ntasks_per_tres

    @property
    def minimum_cpus_per_node(self):
        """Gets the minimum_cpus_per_node of this V0040JobDescMsg.  # noqa: E501

        Minimum number of CPUs per node  # noqa: E501

        :return: The minimum_cpus_per_node of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._minimum_cpus_per_node

    @minimum_cpus_per_node.setter
    def minimum_cpus_per_node(self, minimum_cpus_per_node):
        """Sets the minimum_cpus_per_node of this V0040JobDescMsg.

        Minimum number of CPUs per node  # noqa: E501

        :param minimum_cpus_per_node: The minimum_cpus_per_node of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._minimum_cpus_per_node = minimum_cpus_per_node

    @property
    def memory_per_cpu(self):
        """Gets the memory_per_cpu of this V0040JobDescMsg.  # noqa: E501


        :return: The memory_per_cpu of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._memory_per_cpu

    @memory_per_cpu.setter
    def memory_per_cpu(self, memory_per_cpu):
        """Sets the memory_per_cpu of this V0040JobDescMsg.


        :param memory_per_cpu: The memory_per_cpu of this V0040JobDescMsg.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._memory_per_cpu = memory_per_cpu

    @property
    def memory_per_node(self):
        """Gets the memory_per_node of this V0040JobDescMsg.  # noqa: E501


        :return: The memory_per_node of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._memory_per_node

    @memory_per_node.setter
    def memory_per_node(self, memory_per_node):
        """Sets the memory_per_node of this V0040JobDescMsg.


        :param memory_per_node: The memory_per_node of this V0040JobDescMsg.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._memory_per_node = memory_per_node

    @property
    def temporary_disk_per_node(self):
        """Gets the temporary_disk_per_node of this V0040JobDescMsg.  # noqa: E501

        Minimum tmp disk space required per node  # noqa: E501

        :return: The temporary_disk_per_node of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._temporary_disk_per_node

    @temporary_disk_per_node.setter
    def temporary_disk_per_node(self, temporary_disk_per_node):
        """Sets the temporary_disk_per_node of this V0040JobDescMsg.

        Minimum tmp disk space required per node  # noqa: E501

        :param temporary_disk_per_node: The temporary_disk_per_node of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._temporary_disk_per_node = temporary_disk_per_node

    @property
    def selinux_context(self):
        """Gets the selinux_context of this V0040JobDescMsg.  # noqa: E501

        SELinux context  # noqa: E501

        :return: The selinux_context of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._selinux_context

    @selinux_context.setter
    def selinux_context(self, selinux_context):
        """Sets the selinux_context of this V0040JobDescMsg.

        SELinux context  # noqa: E501

        :param selinux_context: The selinux_context of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._selinux_context = selinux_context

    @property
    def required_switches(self):
        """Gets the required_switches of this V0040JobDescMsg.  # noqa: E501


        :return: The required_switches of this V0040JobDescMsg.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._required_switches

    @required_switches.setter
    def required_switches(self, required_switches):
        """Sets the required_switches of this V0040JobDescMsg.


        :param required_switches: The required_switches of this V0040JobDescMsg.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._required_switches = required_switches

    @property
    def standard_error(self):
        """Gets the standard_error of this V0040JobDescMsg.  # noqa: E501

        Path to stderr file  # noqa: E501

        :return: The standard_error of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._standard_error

    @standard_error.setter
    def standard_error(self, standard_error):
        """Sets the standard_error of this V0040JobDescMsg.

        Path to stderr file  # noqa: E501

        :param standard_error: The standard_error of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._standard_error = standard_error

    @property
    def standard_input(self):
        """Gets the standard_input of this V0040JobDescMsg.  # noqa: E501

        Path to stdin file  # noqa: E501

        :return: The standard_input of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._standard_input

    @standard_input.setter
    def standard_input(self, standard_input):
        """Sets the standard_input of this V0040JobDescMsg.

        Path to stdin file  # noqa: E501

        :param standard_input: The standard_input of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._standard_input = standard_input

    @property
    def standard_output(self):
        """Gets the standard_output of this V0040JobDescMsg.  # noqa: E501

        Path to stdout file  # noqa: E501

        :return: The standard_output of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._standard_output

    @standard_output.setter
    def standard_output(self, standard_output):
        """Sets the standard_output of this V0040JobDescMsg.

        Path to stdout file  # noqa: E501

        :param standard_output: The standard_output of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._standard_output = standard_output

    @property
    def wait_for_switch(self):
        """Gets the wait_for_switch of this V0040JobDescMsg.  # noqa: E501

        Maximum time to wait for switches in seconds  # noqa: E501

        :return: The wait_for_switch of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._wait_for_switch

    @wait_for_switch.setter
    def wait_for_switch(self, wait_for_switch):
        """Sets the wait_for_switch of this V0040JobDescMsg.

        Maximum time to wait for switches in seconds  # noqa: E501

        :param wait_for_switch: The wait_for_switch of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._wait_for_switch = wait_for_switch

    @property
    def wckey(self):
        """Gets the wckey of this V0040JobDescMsg.  # noqa: E501

        Workload characterization key  # noqa: E501

        :return: The wckey of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._wckey

    @wckey.setter
    def wckey(self, wckey):
        """Sets the wckey of this V0040JobDescMsg.

        Workload characterization key  # noqa: E501

        :param wckey: The wckey of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._wckey = wckey

    @property
    def x11(self):
        """Gets the x11 of this V0040JobDescMsg.  # noqa: E501

        X11 forwarding options  # noqa: E501

        :return: The x11 of this V0040JobDescMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._x11

    @x11.setter
    def x11(self, x11):
        """Sets the x11 of this V0040JobDescMsg.

        X11 forwarding options  # noqa: E501

        :param x11: The x11 of this V0040JobDescMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["FORWARD_ALL_NODES", "BATCH_NODE", "FIRST_NODE", "LAST_NODE"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(x11).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `x11` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(x11) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._x11 = x11

    @property
    def x11_magic_cookie(self):
        """Gets the x11_magic_cookie of this V0040JobDescMsg.  # noqa: E501

        Magic cookie for X11 forwarding  # noqa: E501

        :return: The x11_magic_cookie of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._x11_magic_cookie

    @x11_magic_cookie.setter
    def x11_magic_cookie(self, x11_magic_cookie):
        """Sets the x11_magic_cookie of this V0040JobDescMsg.

        Magic cookie for X11 forwarding  # noqa: E501

        :param x11_magic_cookie: The x11_magic_cookie of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._x11_magic_cookie = x11_magic_cookie

    @property
    def x11_target_host(self):
        """Gets the x11_target_host of this V0040JobDescMsg.  # noqa: E501

        Hostname or UNIX socket if x11_target_port=0  # noqa: E501

        :return: The x11_target_host of this V0040JobDescMsg.  # noqa: E501
        :rtype: str
        """
        return self._x11_target_host

    @x11_target_host.setter
    def x11_target_host(self, x11_target_host):
        """Sets the x11_target_host of this V0040JobDescMsg.

        Hostname or UNIX socket if x11_target_port=0  # noqa: E501

        :param x11_target_host: The x11_target_host of this V0040JobDescMsg.  # noqa: E501
        :type: str
        """

        self._x11_target_host = x11_target_host

    @property
    def x11_target_port(self):
        """Gets the x11_target_port of this V0040JobDescMsg.  # noqa: E501

        TCP port  # noqa: E501

        :return: The x11_target_port of this V0040JobDescMsg.  # noqa: E501
        :rtype: int
        """
        return self._x11_target_port

    @x11_target_port.setter
    def x11_target_port(self, x11_target_port):
        """Sets the x11_target_port of this V0040JobDescMsg.

        TCP port  # noqa: E501

        :param x11_target_port: The x11_target_port of this V0040JobDescMsg.  # noqa: E501
        :type: int
        """

        self._x11_target_port = x11_target_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040JobDescMsg):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040JobDescMsg):
            return True

        return self.to_dict() != other.to_dict()
