# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040JobRes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nodes': 'str',
        'allocated_cores': 'int',
        'allocated_cpus': 'int',
        'allocated_hosts': 'int',
        'allocated_nodes': 'list[object]'
    }

    attribute_map = {
        'nodes': 'nodes',
        'allocated_cores': 'allocated_cores',
        'allocated_cpus': 'allocated_cpus',
        'allocated_hosts': 'allocated_hosts',
        'allocated_nodes': 'allocated_nodes'
    }

    def __init__(self, nodes=None, allocated_cores=None, allocated_cpus=None, allocated_hosts=None, allocated_nodes=None, local_vars_configuration=None):  # noqa: E501
        """V0040JobRes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._nodes = None
        self._allocated_cores = None
        self._allocated_cpus = None
        self._allocated_hosts = None
        self._allocated_nodes = None
        self.discriminator = None

        if nodes is not None:
            self.nodes = nodes
        if allocated_cores is not None:
            self.allocated_cores = allocated_cores
        if allocated_cpus is not None:
            self.allocated_cpus = allocated_cpus
        if allocated_hosts is not None:
            self.allocated_hosts = allocated_hosts
        if allocated_nodes is not None:
            self.allocated_nodes = allocated_nodes

    @property
    def nodes(self):
        """Gets the nodes of this V0040JobRes.  # noqa: E501

        Node(s) allocated to the job  # noqa: E501

        :return: The nodes of this V0040JobRes.  # noqa: E501
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this V0040JobRes.

        Node(s) allocated to the job  # noqa: E501

        :param nodes: The nodes of this V0040JobRes.  # noqa: E501
        :type: str
        """

        self._nodes = nodes

    @property
    def allocated_cores(self):
        """Gets the allocated_cores of this V0040JobRes.  # noqa: E501

        Number of allocated cores  # noqa: E501

        :return: The allocated_cores of this V0040JobRes.  # noqa: E501
        :rtype: int
        """
        return self._allocated_cores

    @allocated_cores.setter
    def allocated_cores(self, allocated_cores):
        """Sets the allocated_cores of this V0040JobRes.

        Number of allocated cores  # noqa: E501

        :param allocated_cores: The allocated_cores of this V0040JobRes.  # noqa: E501
        :type: int
        """

        self._allocated_cores = allocated_cores

    @property
    def allocated_cpus(self):
        """Gets the allocated_cpus of this V0040JobRes.  # noqa: E501

        Number of allocated CPUs  # noqa: E501

        :return: The allocated_cpus of this V0040JobRes.  # noqa: E501
        :rtype: int
        """
        return self._allocated_cpus

    @allocated_cpus.setter
    def allocated_cpus(self, allocated_cpus):
        """Sets the allocated_cpus of this V0040JobRes.

        Number of allocated CPUs  # noqa: E501

        :param allocated_cpus: The allocated_cpus of this V0040JobRes.  # noqa: E501
        :type: int
        """

        self._allocated_cpus = allocated_cpus

    @property
    def allocated_hosts(self):
        """Gets the allocated_hosts of this V0040JobRes.  # noqa: E501

        Number of allocated hosts  # noqa: E501

        :return: The allocated_hosts of this V0040JobRes.  # noqa: E501
        :rtype: int
        """
        return self._allocated_hosts

    @allocated_hosts.setter
    def allocated_hosts(self, allocated_hosts):
        """Sets the allocated_hosts of this V0040JobRes.

        Number of allocated hosts  # noqa: E501

        :param allocated_hosts: The allocated_hosts of this V0040JobRes.  # noqa: E501
        :type: int
        """

        self._allocated_hosts = allocated_hosts

    @property
    def allocated_nodes(self):
        """Gets the allocated_nodes of this V0040JobRes.  # noqa: E501

        job node resources  # noqa: E501

        :return: The allocated_nodes of this V0040JobRes.  # noqa: E501
        :rtype: list[object]
        """
        return self._allocated_nodes

    @allocated_nodes.setter
    def allocated_nodes(self, allocated_nodes):
        """Sets the allocated_nodes of this V0040JobRes.

        job node resources  # noqa: E501

        :param allocated_nodes: The allocated_nodes of this V0040JobRes.  # noqa: E501
        :type: list[object]
        """

        self._allocated_nodes = allocated_nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040JobRes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040JobRes):
            return True

        return self.to_dict() != other.to_dict()
