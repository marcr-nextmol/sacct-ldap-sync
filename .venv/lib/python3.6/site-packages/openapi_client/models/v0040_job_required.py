# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040JobRequired(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cp_us': 'int',
        'memory_per_cpu': 'V0040Uint64NoVal',
        'memory_per_node': 'V0040Uint64NoVal'
    }

    attribute_map = {
        'cp_us': 'CPUs',
        'memory_per_cpu': 'memory_per_cpu',
        'memory_per_node': 'memory_per_node'
    }

    def __init__(self, cp_us=None, memory_per_cpu=None, memory_per_node=None, local_vars_configuration=None):  # noqa: E501
        """V0040JobRequired - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cp_us = None
        self._memory_per_cpu = None
        self._memory_per_node = None
        self.discriminator = None

        if cp_us is not None:
            self.cp_us = cp_us
        if memory_per_cpu is not None:
            self.memory_per_cpu = memory_per_cpu
        if memory_per_node is not None:
            self.memory_per_node = memory_per_node

    @property
    def cp_us(self):
        """Gets the cp_us of this V0040JobRequired.  # noqa: E501

        Minimum number of CPUs required  # noqa: E501

        :return: The cp_us of this V0040JobRequired.  # noqa: E501
        :rtype: int
        """
        return self._cp_us

    @cp_us.setter
    def cp_us(self, cp_us):
        """Sets the cp_us of this V0040JobRequired.

        Minimum number of CPUs required  # noqa: E501

        :param cp_us: The cp_us of this V0040JobRequired.  # noqa: E501
        :type: int
        """

        self._cp_us = cp_us

    @property
    def memory_per_cpu(self):
        """Gets the memory_per_cpu of this V0040JobRequired.  # noqa: E501


        :return: The memory_per_cpu of this V0040JobRequired.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._memory_per_cpu

    @memory_per_cpu.setter
    def memory_per_cpu(self, memory_per_cpu):
        """Sets the memory_per_cpu of this V0040JobRequired.


        :param memory_per_cpu: The memory_per_cpu of this V0040JobRequired.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._memory_per_cpu = memory_per_cpu

    @property
    def memory_per_node(self):
        """Gets the memory_per_node of this V0040JobRequired.  # noqa: E501


        :return: The memory_per_node of this V0040JobRequired.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._memory_per_node

    @memory_per_node.setter
    def memory_per_node(self, memory_per_node):
        """Sets the memory_per_node of this V0040JobRequired.


        :param memory_per_node: The memory_per_node of this V0040JobRequired.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._memory_per_node = memory_per_node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040JobRequired):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040JobRequired):
            return True

        return self.to_dict() != other.to_dict()
