# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'administrator_level': 'list[str]',
        'associations': 'list[V0040AssocShort]',
        'coordinators': 'list[V0040Coord]',
        'default': 'V0040UserDefault',
        'flags': 'list[str]',
        'name': 'str',
        'old_name': 'str',
        'wckeys': 'list[V0040Wckey]'
    }

    attribute_map = {
        'administrator_level': 'administrator_level',
        'associations': 'associations',
        'coordinators': 'coordinators',
        'default': 'default',
        'flags': 'flags',
        'name': 'name',
        'old_name': 'old_name',
        'wckeys': 'wckeys'
    }

    def __init__(self, administrator_level=None, associations=None, coordinators=None, default=None, flags=None, name=None, old_name=None, wckeys=None, local_vars_configuration=None):  # noqa: E501
        """V0040User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._administrator_level = None
        self._associations = None
        self._coordinators = None
        self._default = None
        self._flags = None
        self._name = None
        self._old_name = None
        self._wckeys = None
        self.discriminator = None

        if administrator_level is not None:
            self.administrator_level = administrator_level
        if associations is not None:
            self.associations = associations
        if coordinators is not None:
            self.coordinators = coordinators
        if default is not None:
            self.default = default
        if flags is not None:
            self.flags = flags
        self.name = name
        if old_name is not None:
            self.old_name = old_name
        if wckeys is not None:
            self.wckeys = wckeys

    @property
    def administrator_level(self):
        """Gets the administrator_level of this V0040User.  # noqa: E501

        AdminLevel granted to the user  # noqa: E501

        :return: The administrator_level of this V0040User.  # noqa: E501
        :rtype: list[str]
        """
        return self._administrator_level

    @administrator_level.setter
    def administrator_level(self, administrator_level):
        """Sets the administrator_level of this V0040User.

        AdminLevel granted to the user  # noqa: E501

        :param administrator_level: The administrator_level of this V0040User.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Not Set", "None", "Operator", "Administrator"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(administrator_level).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `administrator_level` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(administrator_level) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._administrator_level = administrator_level

    @property
    def associations(self):
        """Gets the associations of this V0040User.  # noqa: E501


        :return: The associations of this V0040User.  # noqa: E501
        :rtype: list[V0040AssocShort]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this V0040User.


        :param associations: The associations of this V0040User.  # noqa: E501
        :type: list[V0040AssocShort]
        """

        self._associations = associations

    @property
    def coordinators(self):
        """Gets the coordinators of this V0040User.  # noqa: E501


        :return: The coordinators of this V0040User.  # noqa: E501
        :rtype: list[V0040Coord]
        """
        return self._coordinators

    @coordinators.setter
    def coordinators(self, coordinators):
        """Sets the coordinators of this V0040User.


        :param coordinators: The coordinators of this V0040User.  # noqa: E501
        :type: list[V0040Coord]
        """

        self._coordinators = coordinators

    @property
    def default(self):
        """Gets the default of this V0040User.  # noqa: E501


        :return: The default of this V0040User.  # noqa: E501
        :rtype: V0040UserDefault
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this V0040User.


        :param default: The default of this V0040User.  # noqa: E501
        :type: V0040UserDefault
        """

        self._default = default

    @property
    def flags(self):
        """Gets the flags of this V0040User.  # noqa: E501

        Flags associated with user  # noqa: E501

        :return: The flags of this V0040User.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040User.

        Flags associated with user  # noqa: E501

        :param flags: The flags of this V0040User.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NONE", "DELETED"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def name(self):
        """Gets the name of this V0040User.  # noqa: E501

        User name  # noqa: E501

        :return: The name of this V0040User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040User.

        User name  # noqa: E501

        :param name: The name of this V0040User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def old_name(self):
        """Gets the old_name of this V0040User.  # noqa: E501

        Previous user name  # noqa: E501

        :return: The old_name of this V0040User.  # noqa: E501
        :rtype: str
        """
        return self._old_name

    @old_name.setter
    def old_name(self, old_name):
        """Sets the old_name of this V0040User.

        Previous user name  # noqa: E501

        :param old_name: The old_name of this V0040User.  # noqa: E501
        :type: str
        """

        self._old_name = old_name

    @property
    def wckeys(self):
        """Gets the wckeys of this V0040User.  # noqa: E501


        :return: The wckeys of this V0040User.  # noqa: E501
        :rtype: list[V0040Wckey]
        """
        return self._wckeys

    @wckeys.setter
    def wckeys(self, wckeys):
        """Sets the wckeys of this V0040User.


        :param wckeys: The wckeys of this V0040User.  # noqa: E501
        :type: list[V0040Wckey]
        """

        self._wckeys = wckeys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040User):
            return True

        return self.to_dict() != other.to_dict()
