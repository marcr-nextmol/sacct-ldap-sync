# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SlurmdbApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def slurmdb_v0040_delete_account(self, account_name, **kwargs):  # noqa: E501
        """Delete account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_account(account_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_name: Account name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiAccountsRemovedResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_delete_account_with_http_info(account_name, **kwargs)  # noqa: E501

    def slurmdb_v0040_delete_account_with_http_info(self, account_name, **kwargs):  # noqa: E501
        """Delete account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_account_with_http_info(account_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_name: Account name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiAccountsRemovedResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_delete_account" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account_name' is set
        if self.api_client.client_side_validation and ('account_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['account_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account_name` when calling `slurmdb_v0040_delete_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_name' in local_var_params:
            path_params['account_name'] = local_var_params['account_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/account/{account_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiAccountsRemovedResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_delete_association(self, **kwargs):  # noqa: E501
        """Delete association  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_association(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV accounts list
        :param str cluster: CSV clusters list
        :param str default_qos: CSV QOS list
        :param str format: CSV format list
        :param str id: CSV id list
        :param str only_defaults: Filter to only defaults
        :param str parent_account: CSV names of parent account
        :param str partition: CSV partition name list
        :param str qos: CSV QOS list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted associations
        :param str with_raw_qos: Include a raw qos or delta_qos
        :param str with_sub_accts: Include sub acct information also
        :param str without_parent_info: Exclude parent id/name
        :param str without_parent_limits: Exclude limits from parents
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiAssocsRemovedResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_delete_association_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_delete_association_with_http_info(self, **kwargs):  # noqa: E501
        """Delete association  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_association_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV accounts list
        :param str cluster: CSV clusters list
        :param str default_qos: CSV QOS list
        :param str format: CSV format list
        :param str id: CSV id list
        :param str only_defaults: Filter to only defaults
        :param str parent_account: CSV names of parent account
        :param str partition: CSV partition name list
        :param str qos: CSV QOS list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted associations
        :param str with_raw_qos: Include a raw qos or delta_qos
        :param str with_sub_accts: Include sub acct information also
        :param str without_parent_info: Exclude parent id/name
        :param str without_parent_limits: Exclude limits from parents
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiAssocsRemovedResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'cluster',
            'default_qos',
            'format',
            'id',
            'only_defaults',
            'parent_account',
            'partition',
            'qos',
            'usage_end',
            'usage_start',
            'user',
            'with_usage',
            'with_deleted',
            'with_raw_qos',
            'with_sub_accts',
            'without_parent_info',
            'without_parent_limits'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_delete_association" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account' in local_var_params and local_var_params['account'] is not None:  # noqa: E501
            query_params.append(('account', local_var_params['account']))  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'default_qos' in local_var_params and local_var_params['default_qos'] is not None:  # noqa: E501
            query_params.append(('default_qos', local_var_params['default_qos']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'only_defaults' in local_var_params and local_var_params['only_defaults'] is not None:  # noqa: E501
            query_params.append(('only_defaults', local_var_params['only_defaults']))  # noqa: E501
        if 'parent_account' in local_var_params and local_var_params['parent_account'] is not None:  # noqa: E501
            query_params.append(('parent_account', local_var_params['parent_account']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'qos' in local_var_params and local_var_params['qos'] is not None:  # noqa: E501
            query_params.append(('qos', local_var_params['qos']))  # noqa: E501
        if 'usage_end' in local_var_params and local_var_params['usage_end'] is not None:  # noqa: E501
            query_params.append(('usage_end', local_var_params['usage_end']))  # noqa: E501
        if 'usage_start' in local_var_params and local_var_params['usage_start'] is not None:  # noqa: E501
            query_params.append(('usage_start', local_var_params['usage_start']))  # noqa: E501
        if 'user' in local_var_params and local_var_params['user'] is not None:  # noqa: E501
            query_params.append(('user', local_var_params['user']))  # noqa: E501
        if 'with_usage' in local_var_params and local_var_params['with_usage'] is not None:  # noqa: E501
            query_params.append(('with_usage', local_var_params['with_usage']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501
        if 'with_raw_qos' in local_var_params and local_var_params['with_raw_qos'] is not None:  # noqa: E501
            query_params.append(('with_raw_qos', local_var_params['with_raw_qos']))  # noqa: E501
        if 'with_sub_accts' in local_var_params and local_var_params['with_sub_accts'] is not None:  # noqa: E501
            query_params.append(('with_sub_accts', local_var_params['with_sub_accts']))  # noqa: E501
        if 'without_parent_info' in local_var_params and local_var_params['without_parent_info'] is not None:  # noqa: E501
            query_params.append(('without_parent_info', local_var_params['without_parent_info']))  # noqa: E501
        if 'without_parent_limits' in local_var_params and local_var_params['without_parent_limits'] is not None:  # noqa: E501
            query_params.append(('without_parent_limits', local_var_params['without_parent_limits']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/association/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiAssocsRemovedResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_delete_associations(self, **kwargs):  # noqa: E501
        """Delete associations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_associations(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV accounts list
        :param str cluster: CSV clusters list
        :param str default_qos: CSV QOS list
        :param str format: CSV format list
        :param str id: CSV id list
        :param str only_defaults: Filter to only defaults
        :param str parent_account: CSV names of parent account
        :param str partition: CSV partition name list
        :param str qos: CSV QOS list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted associations
        :param str with_raw_qos: Include a raw qos or delta_qos
        :param str with_sub_accts: Include sub acct information also
        :param str without_parent_info: Exclude parent id/name
        :param str without_parent_limits: Exclude limits from parents
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiAssocsRemovedResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_delete_associations_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_delete_associations_with_http_info(self, **kwargs):  # noqa: E501
        """Delete associations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_associations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV accounts list
        :param str cluster: CSV clusters list
        :param str default_qos: CSV QOS list
        :param str format: CSV format list
        :param str id: CSV id list
        :param str only_defaults: Filter to only defaults
        :param str parent_account: CSV names of parent account
        :param str partition: CSV partition name list
        :param str qos: CSV QOS list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted associations
        :param str with_raw_qos: Include a raw qos or delta_qos
        :param str with_sub_accts: Include sub acct information also
        :param str without_parent_info: Exclude parent id/name
        :param str without_parent_limits: Exclude limits from parents
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiAssocsRemovedResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'cluster',
            'default_qos',
            'format',
            'id',
            'only_defaults',
            'parent_account',
            'partition',
            'qos',
            'usage_end',
            'usage_start',
            'user',
            'with_usage',
            'with_deleted',
            'with_raw_qos',
            'with_sub_accts',
            'without_parent_info',
            'without_parent_limits'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_delete_associations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account' in local_var_params and local_var_params['account'] is not None:  # noqa: E501
            query_params.append(('account', local_var_params['account']))  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'default_qos' in local_var_params and local_var_params['default_qos'] is not None:  # noqa: E501
            query_params.append(('default_qos', local_var_params['default_qos']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'only_defaults' in local_var_params and local_var_params['only_defaults'] is not None:  # noqa: E501
            query_params.append(('only_defaults', local_var_params['only_defaults']))  # noqa: E501
        if 'parent_account' in local_var_params and local_var_params['parent_account'] is not None:  # noqa: E501
            query_params.append(('parent_account', local_var_params['parent_account']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'qos' in local_var_params and local_var_params['qos'] is not None:  # noqa: E501
            query_params.append(('qos', local_var_params['qos']))  # noqa: E501
        if 'usage_end' in local_var_params and local_var_params['usage_end'] is not None:  # noqa: E501
            query_params.append(('usage_end', local_var_params['usage_end']))  # noqa: E501
        if 'usage_start' in local_var_params and local_var_params['usage_start'] is not None:  # noqa: E501
            query_params.append(('usage_start', local_var_params['usage_start']))  # noqa: E501
        if 'user' in local_var_params and local_var_params['user'] is not None:  # noqa: E501
            query_params.append(('user', local_var_params['user']))  # noqa: E501
        if 'with_usage' in local_var_params and local_var_params['with_usage'] is not None:  # noqa: E501
            query_params.append(('with_usage', local_var_params['with_usage']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501
        if 'with_raw_qos' in local_var_params and local_var_params['with_raw_qos'] is not None:  # noqa: E501
            query_params.append(('with_raw_qos', local_var_params['with_raw_qos']))  # noqa: E501
        if 'with_sub_accts' in local_var_params and local_var_params['with_sub_accts'] is not None:  # noqa: E501
            query_params.append(('with_sub_accts', local_var_params['with_sub_accts']))  # noqa: E501
        if 'without_parent_info' in local_var_params and local_var_params['without_parent_info'] is not None:  # noqa: E501
            query_params.append(('without_parent_info', local_var_params['without_parent_info']))  # noqa: E501
        if 'without_parent_limits' in local_var_params and local_var_params['without_parent_limits'] is not None:  # noqa: E501
            query_params.append(('without_parent_limits', local_var_params['without_parent_limits']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/associations/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiAssocsRemovedResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_delete_cluster(self, cluster_name, **kwargs):  # noqa: E501
        """Delete cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_cluster(cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster_name: Cluster name (required)
        :param str classification: Type of machine
        :param str cluster: CSV cluster list
        :param str federation: CSV federation list
        :param str flags: Query flags
        :param str format: CSV format list
        :param str rpc_version: CSV RPC version list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str with_deleted: Include deleted clusters
        :param str with_usage: Include usage
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiClustersRemovedResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_delete_cluster_with_http_info(cluster_name, **kwargs)  # noqa: E501

    def slurmdb_v0040_delete_cluster_with_http_info(self, cluster_name, **kwargs):  # noqa: E501
        """Delete cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_cluster_with_http_info(cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster_name: Cluster name (required)
        :param str classification: Type of machine
        :param str cluster: CSV cluster list
        :param str federation: CSV federation list
        :param str flags: Query flags
        :param str format: CSV format list
        :param str rpc_version: CSV RPC version list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str with_deleted: Include deleted clusters
        :param str with_usage: Include usage
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiClustersRemovedResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cluster_name',
            'classification',
            'cluster',
            'federation',
            'flags',
            'format',
            'rpc_version',
            'usage_end',
            'usage_start',
            'with_deleted',
            'with_usage'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_delete_cluster" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cluster_name' is set
        if self.api_client.client_side_validation and ('cluster_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['cluster_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cluster_name` when calling `slurmdb_v0040_delete_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_name' in local_var_params:
            path_params['cluster_name'] = local_var_params['cluster_name']  # noqa: E501

        query_params = []
        if 'classification' in local_var_params and local_var_params['classification'] is not None:  # noqa: E501
            query_params.append(('classification', local_var_params['classification']))  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'federation' in local_var_params and local_var_params['federation'] is not None:  # noqa: E501
            query_params.append(('federation', local_var_params['federation']))  # noqa: E501
        if 'flags' in local_var_params and local_var_params['flags'] is not None:  # noqa: E501
            query_params.append(('flags', local_var_params['flags']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'rpc_version' in local_var_params and local_var_params['rpc_version'] is not None:  # noqa: E501
            query_params.append(('rpc_version', local_var_params['rpc_version']))  # noqa: E501
        if 'usage_end' in local_var_params and local_var_params['usage_end'] is not None:  # noqa: E501
            query_params.append(('usage_end', local_var_params['usage_end']))  # noqa: E501
        if 'usage_start' in local_var_params and local_var_params['usage_start'] is not None:  # noqa: E501
            query_params.append(('usage_start', local_var_params['usage_start']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501
        if 'with_usage' in local_var_params and local_var_params['with_usage'] is not None:  # noqa: E501
            query_params.append(('with_usage', local_var_params['with_usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/cluster/{cluster_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiClustersRemovedResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_delete_single_qos(self, qos, **kwargs):  # noqa: E501
        """Delete QOS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_single_qos(qos, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str qos: QOS name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiSlurmdbdQosRemovedResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_delete_single_qos_with_http_info(qos, **kwargs)  # noqa: E501

    def slurmdb_v0040_delete_single_qos_with_http_info(self, qos, **kwargs):  # noqa: E501
        """Delete QOS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_single_qos_with_http_info(qos, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str qos: QOS name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiSlurmdbdQosRemovedResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'qos'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_delete_single_qos" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'qos' is set
        if self.api_client.client_side_validation and ('qos' not in local_var_params or  # noqa: E501
                                                        local_var_params['qos'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `qos` when calling `slurmdb_v0040_delete_single_qos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qos' in local_var_params:
            path_params['qos'] = local_var_params['qos']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/qos/{qos}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiSlurmdbdQosRemovedResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_delete_user(self, name, **kwargs):  # noqa: E501
        """Delete user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_user(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: User name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_delete_user_with_http_info(name, **kwargs)  # noqa: E501

    def slurmdb_v0040_delete_user_with_http_info(self, name, **kwargs):  # noqa: E501
        """Delete user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_user_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: User name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_delete_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `slurmdb_v0040_delete_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/user/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_delete_wckey(self, id, **kwargs):  # noqa: E501
        """Delete wckey  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_wckey(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: wckey id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiWckeyRemovedResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_delete_wckey_with_http_info(id, **kwargs)  # noqa: E501

    def slurmdb_v0040_delete_wckey_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete wckey  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_delete_wckey_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: wckey id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiWckeyRemovedResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_delete_wckey" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `slurmdb_v0040_delete_wckey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/wckey/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiWckeyRemovedResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_account(self, account_name, **kwargs):  # noqa: E501
        """Get account info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_account(account_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_name: Account name (required)
        :param str with_assocs: Include associations
        :param str with_coords: Include coordinators
        :param str with_deleted: Include deleted
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiAccountsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_account_with_http_info(account_name, **kwargs)  # noqa: E501

    def slurmdb_v0040_get_account_with_http_info(self, account_name, **kwargs):  # noqa: E501
        """Get account info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_account_with_http_info(account_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_name: Account name (required)
        :param str with_assocs: Include associations
        :param str with_coords: Include coordinators
        :param str with_deleted: Include deleted
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiAccountsResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account_name',
            'with_assocs',
            'with_coords',
            'with_deleted'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_account" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account_name' is set
        if self.api_client.client_side_validation and ('account_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['account_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account_name` when calling `slurmdb_v0040_get_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_name' in local_var_params:
            path_params['account_name'] = local_var_params['account_name']  # noqa: E501

        query_params = []
        if 'with_assocs' in local_var_params and local_var_params['with_assocs'] is not None:  # noqa: E501
            query_params.append(('with_assocs', local_var_params['with_assocs']))  # noqa: E501
        if 'with_coords' in local_var_params and local_var_params['with_coords'] is not None:  # noqa: E501
            query_params.append(('with_coords', local_var_params['with_coords']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/account/{account_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiAccountsResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_accounts(self, **kwargs):  # noqa: E501
        """Get account list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str description: CSV description list
        :param str with_assocs: Include associations
        :param str with_coords: Include coordinators
        :param str with_deleted: Include deleted accounts
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiAccountsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_accounts_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get account list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str description: CSV description list
        :param str with_assocs: Include associations
        :param str with_coords: Include coordinators
        :param str with_deleted: Include deleted accounts
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiAccountsResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'description',
            'with_assocs',
            'with_coords',
            'with_deleted'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_accounts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'with_assocs' in local_var_params and local_var_params['with_assocs'] is not None:  # noqa: E501
            query_params.append(('with_assocs', local_var_params['with_assocs']))  # noqa: E501
        if 'with_coords' in local_var_params and local_var_params['with_coords'] is not None:  # noqa: E501
            query_params.append(('with_coords', local_var_params['with_coords']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/accounts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiAccountsResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_association(self, **kwargs):  # noqa: E501
        """Get association info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_association(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV accounts list
        :param str cluster: CSV clusters list
        :param str default_qos: CSV QOS list
        :param str format: CSV format list
        :param str id: CSV id list
        :param str only_defaults: Filter to only defaults
        :param str parent_account: CSV names of parent account
        :param str partition: CSV partition name list
        :param str qos: CSV QOS list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted associations
        :param str with_raw_qos: Include a raw qos or delta_qos
        :param str with_sub_accts: Include sub acct information also
        :param str without_parent_info: Exclude parent id/name
        :param str without_parent_limits: Exclude limits from parents
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiAssocsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_association_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_association_with_http_info(self, **kwargs):  # noqa: E501
        """Get association info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_association_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV accounts list
        :param str cluster: CSV clusters list
        :param str default_qos: CSV QOS list
        :param str format: CSV format list
        :param str id: CSV id list
        :param str only_defaults: Filter to only defaults
        :param str parent_account: CSV names of parent account
        :param str partition: CSV partition name list
        :param str qos: CSV QOS list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted associations
        :param str with_raw_qos: Include a raw qos or delta_qos
        :param str with_sub_accts: Include sub acct information also
        :param str without_parent_info: Exclude parent id/name
        :param str without_parent_limits: Exclude limits from parents
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiAssocsResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'cluster',
            'default_qos',
            'format',
            'id',
            'only_defaults',
            'parent_account',
            'partition',
            'qos',
            'usage_end',
            'usage_start',
            'user',
            'with_usage',
            'with_deleted',
            'with_raw_qos',
            'with_sub_accts',
            'without_parent_info',
            'without_parent_limits'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_association" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account' in local_var_params and local_var_params['account'] is not None:  # noqa: E501
            query_params.append(('account', local_var_params['account']))  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'default_qos' in local_var_params and local_var_params['default_qos'] is not None:  # noqa: E501
            query_params.append(('default_qos', local_var_params['default_qos']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'only_defaults' in local_var_params and local_var_params['only_defaults'] is not None:  # noqa: E501
            query_params.append(('only_defaults', local_var_params['only_defaults']))  # noqa: E501
        if 'parent_account' in local_var_params and local_var_params['parent_account'] is not None:  # noqa: E501
            query_params.append(('parent_account', local_var_params['parent_account']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'qos' in local_var_params and local_var_params['qos'] is not None:  # noqa: E501
            query_params.append(('qos', local_var_params['qos']))  # noqa: E501
        if 'usage_end' in local_var_params and local_var_params['usage_end'] is not None:  # noqa: E501
            query_params.append(('usage_end', local_var_params['usage_end']))  # noqa: E501
        if 'usage_start' in local_var_params and local_var_params['usage_start'] is not None:  # noqa: E501
            query_params.append(('usage_start', local_var_params['usage_start']))  # noqa: E501
        if 'user' in local_var_params and local_var_params['user'] is not None:  # noqa: E501
            query_params.append(('user', local_var_params['user']))  # noqa: E501
        if 'with_usage' in local_var_params and local_var_params['with_usage'] is not None:  # noqa: E501
            query_params.append(('with_usage', local_var_params['with_usage']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501
        if 'with_raw_qos' in local_var_params and local_var_params['with_raw_qos'] is not None:  # noqa: E501
            query_params.append(('with_raw_qos', local_var_params['with_raw_qos']))  # noqa: E501
        if 'with_sub_accts' in local_var_params and local_var_params['with_sub_accts'] is not None:  # noqa: E501
            query_params.append(('with_sub_accts', local_var_params['with_sub_accts']))  # noqa: E501
        if 'without_parent_info' in local_var_params and local_var_params['without_parent_info'] is not None:  # noqa: E501
            query_params.append(('without_parent_info', local_var_params['without_parent_info']))  # noqa: E501
        if 'without_parent_limits' in local_var_params and local_var_params['without_parent_limits'] is not None:  # noqa: E501
            query_params.append(('without_parent_limits', local_var_params['without_parent_limits']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/association/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiAssocsResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_associations(self, **kwargs):  # noqa: E501
        """Get association list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_associations(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV accounts list
        :param str cluster: CSV clusters list
        :param str default_qos: CSV QOS list
        :param str format: CSV format list
        :param str id: CSV id list
        :param str only_defaults: Filter to only defaults
        :param str parent_account: CSV names of parent account
        :param str partition: CSV partition name list
        :param str qos: CSV QOS list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted associations
        :param str with_raw_qos: Include a raw qos or delta_qos
        :param str with_sub_accts: Include sub acct information also
        :param str without_parent_info: Exclude parent id/name
        :param str without_parent_limits: Exclude limits from parents
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiAssocsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_associations_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_associations_with_http_info(self, **kwargs):  # noqa: E501
        """Get association list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_associations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV accounts list
        :param str cluster: CSV clusters list
        :param str default_qos: CSV QOS list
        :param str format: CSV format list
        :param str id: CSV id list
        :param str only_defaults: Filter to only defaults
        :param str parent_account: CSV names of parent account
        :param str partition: CSV partition name list
        :param str qos: CSV QOS list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted associations
        :param str with_raw_qos: Include a raw qos or delta_qos
        :param str with_sub_accts: Include sub acct information also
        :param str without_parent_info: Exclude parent id/name
        :param str without_parent_limits: Exclude limits from parents
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiAssocsResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'cluster',
            'default_qos',
            'format',
            'id',
            'only_defaults',
            'parent_account',
            'partition',
            'qos',
            'usage_end',
            'usage_start',
            'user',
            'with_usage',
            'with_deleted',
            'with_raw_qos',
            'with_sub_accts',
            'without_parent_info',
            'without_parent_limits'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_associations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account' in local_var_params and local_var_params['account'] is not None:  # noqa: E501
            query_params.append(('account', local_var_params['account']))  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'default_qos' in local_var_params and local_var_params['default_qos'] is not None:  # noqa: E501
            query_params.append(('default_qos', local_var_params['default_qos']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'only_defaults' in local_var_params and local_var_params['only_defaults'] is not None:  # noqa: E501
            query_params.append(('only_defaults', local_var_params['only_defaults']))  # noqa: E501
        if 'parent_account' in local_var_params and local_var_params['parent_account'] is not None:  # noqa: E501
            query_params.append(('parent_account', local_var_params['parent_account']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'qos' in local_var_params and local_var_params['qos'] is not None:  # noqa: E501
            query_params.append(('qos', local_var_params['qos']))  # noqa: E501
        if 'usage_end' in local_var_params and local_var_params['usage_end'] is not None:  # noqa: E501
            query_params.append(('usage_end', local_var_params['usage_end']))  # noqa: E501
        if 'usage_start' in local_var_params and local_var_params['usage_start'] is not None:  # noqa: E501
            query_params.append(('usage_start', local_var_params['usage_start']))  # noqa: E501
        if 'user' in local_var_params and local_var_params['user'] is not None:  # noqa: E501
            query_params.append(('user', local_var_params['user']))  # noqa: E501
        if 'with_usage' in local_var_params and local_var_params['with_usage'] is not None:  # noqa: E501
            query_params.append(('with_usage', local_var_params['with_usage']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501
        if 'with_raw_qos' in local_var_params and local_var_params['with_raw_qos'] is not None:  # noqa: E501
            query_params.append(('with_raw_qos', local_var_params['with_raw_qos']))  # noqa: E501
        if 'with_sub_accts' in local_var_params and local_var_params['with_sub_accts'] is not None:  # noqa: E501
            query_params.append(('with_sub_accts', local_var_params['with_sub_accts']))  # noqa: E501
        if 'without_parent_info' in local_var_params and local_var_params['without_parent_info'] is not None:  # noqa: E501
            query_params.append(('without_parent_info', local_var_params['without_parent_info']))  # noqa: E501
        if 'without_parent_limits' in local_var_params and local_var_params['without_parent_limits'] is not None:  # noqa: E501
            query_params.append(('without_parent_limits', local_var_params['without_parent_limits']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/associations/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiAssocsResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_cluster(self, cluster_name, **kwargs):  # noqa: E501
        """Get cluster info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_cluster(cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster_name: Cluster name (required)
        :param str classification: Type of machine
        :param str cluster: CSV cluster list
        :param str federation: CSV federation list
        :param str flags: Query flags
        :param str format: CSV format list
        :param str rpc_version: CSV RPC version list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str with_deleted: Include deleted clusters
        :param str with_usage: Include usage
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiClustersResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_cluster_with_http_info(cluster_name, **kwargs)  # noqa: E501

    def slurmdb_v0040_get_cluster_with_http_info(self, cluster_name, **kwargs):  # noqa: E501
        """Get cluster info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_cluster_with_http_info(cluster_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster_name: Cluster name (required)
        :param str classification: Type of machine
        :param str cluster: CSV cluster list
        :param str federation: CSV federation list
        :param str flags: Query flags
        :param str format: CSV format list
        :param str rpc_version: CSV RPC version list
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str with_deleted: Include deleted clusters
        :param str with_usage: Include usage
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiClustersResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cluster_name',
            'classification',
            'cluster',
            'federation',
            'flags',
            'format',
            'rpc_version',
            'usage_end',
            'usage_start',
            'with_deleted',
            'with_usage'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_cluster" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cluster_name' is set
        if self.api_client.client_side_validation and ('cluster_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['cluster_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cluster_name` when calling `slurmdb_v0040_get_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_name' in local_var_params:
            path_params['cluster_name'] = local_var_params['cluster_name']  # noqa: E501

        query_params = []
        if 'classification' in local_var_params and local_var_params['classification'] is not None:  # noqa: E501
            query_params.append(('classification', local_var_params['classification']))  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'federation' in local_var_params and local_var_params['federation'] is not None:  # noqa: E501
            query_params.append(('federation', local_var_params['federation']))  # noqa: E501
        if 'flags' in local_var_params and local_var_params['flags'] is not None:  # noqa: E501
            query_params.append(('flags', local_var_params['flags']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'rpc_version' in local_var_params and local_var_params['rpc_version'] is not None:  # noqa: E501
            query_params.append(('rpc_version', local_var_params['rpc_version']))  # noqa: E501
        if 'usage_end' in local_var_params and local_var_params['usage_end'] is not None:  # noqa: E501
            query_params.append(('usage_end', local_var_params['usage_end']))  # noqa: E501
        if 'usage_start' in local_var_params and local_var_params['usage_start'] is not None:  # noqa: E501
            query_params.append(('usage_start', local_var_params['usage_start']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501
        if 'with_usage' in local_var_params and local_var_params['with_usage'] is not None:  # noqa: E501
            query_params.append(('with_usage', local_var_params['with_usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/cluster/{cluster_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiClustersResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_clusters(self, **kwargs):  # noqa: E501
        """Get cluster list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_clusters(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str update_time: Filter reservations since update timestamp
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiClustersResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_clusters_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_clusters_with_http_info(self, **kwargs):  # noqa: E501
        """Get cluster list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_clusters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str update_time: Filter reservations since update timestamp
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiClustersResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_clusters" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'update_time' in local_var_params and local_var_params['update_time'] is not None:  # noqa: E501
            query_params.append(('update_time', local_var_params['update_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/clusters/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiClustersResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_config(self, **kwargs):  # noqa: E501
        """Dump all configuration information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiSlurmdbdConfigResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_config_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_config_with_http_info(self, **kwargs):  # noqa: E501
        """Dump all configuration information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiSlurmdbdConfigResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_config" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiSlurmdbdConfigResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_diag(self, **kwargs):  # noqa: E501
        """Get slurmdb diagnostics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_diag(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiSlurmdbdStatsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_diag_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_diag_with_http_info(self, **kwargs):  # noqa: E501
        """Get slurmdb diagnostics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_diag_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiSlurmdbdStatsResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_diag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/diag/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiSlurmdbdStatsResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_instance(self, **kwargs):  # noqa: E501
        """Get instance info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_instance(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster: CSV clusters list
        :param str extra: CSV extra list
        :param str format: CSV format list
        :param str instance_id: CSV instance_id list
        :param str instance_type: CSV instance_type list
        :param str node_list: Ranged node string
        :param str time_end: Time end (UNIX timestamp)
        :param str time_start: Time start (UNIX timestamp)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiInstancesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_instance_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_instance_with_http_info(self, **kwargs):  # noqa: E501
        """Get instance info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_instance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster: CSV clusters list
        :param str extra: CSV extra list
        :param str format: CSV format list
        :param str instance_id: CSV instance_id list
        :param str instance_type: CSV instance_type list
        :param str node_list: Ranged node string
        :param str time_end: Time end (UNIX timestamp)
        :param str time_start: Time start (UNIX timestamp)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiInstancesResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cluster',
            'extra',
            'format',
            'instance_id',
            'instance_type',
            'node_list',
            'time_end',
            'time_start'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_instance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'extra' in local_var_params and local_var_params['extra'] is not None:  # noqa: E501
            query_params.append(('extra', local_var_params['extra']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'instance_id' in local_var_params and local_var_params['instance_id'] is not None:  # noqa: E501
            query_params.append(('instance_id', local_var_params['instance_id']))  # noqa: E501
        if 'instance_type' in local_var_params and local_var_params['instance_type'] is not None:  # noqa: E501
            query_params.append(('instance_type', local_var_params['instance_type']))  # noqa: E501
        if 'node_list' in local_var_params and local_var_params['node_list'] is not None:  # noqa: E501
            query_params.append(('node_list', local_var_params['node_list']))  # noqa: E501
        if 'time_end' in local_var_params and local_var_params['time_end'] is not None:  # noqa: E501
            query_params.append(('time_end', local_var_params['time_end']))  # noqa: E501
        if 'time_start' in local_var_params and local_var_params['time_start'] is not None:  # noqa: E501
            query_params.append(('time_start', local_var_params['time_start']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/instance/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiInstancesResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_instances(self, **kwargs):  # noqa: E501
        """Get instance list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_instances(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster: CSV clusters list
        :param str extra: CSV extra list
        :param str format: CSV format list
        :param str instance_id: CSV instance_id list
        :param str instance_type: CSV instance_type list
        :param str node_list: Ranged node string
        :param str time_end: Time end (UNIX timestamp)
        :param str time_start: Time start (UNIX timestamp)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiInstancesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_instances_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_instances_with_http_info(self, **kwargs):  # noqa: E501
        """Get instance list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_instances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster: CSV clusters list
        :param str extra: CSV extra list
        :param str format: CSV format list
        :param str instance_id: CSV instance_id list
        :param str instance_type: CSV instance_type list
        :param str node_list: Ranged node string
        :param str time_end: Time end (UNIX timestamp)
        :param str time_start: Time start (UNIX timestamp)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiInstancesResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cluster',
            'extra',
            'format',
            'instance_id',
            'instance_type',
            'node_list',
            'time_end',
            'time_start'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_instances" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'extra' in local_var_params and local_var_params['extra'] is not None:  # noqa: E501
            query_params.append(('extra', local_var_params['extra']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'instance_id' in local_var_params and local_var_params['instance_id'] is not None:  # noqa: E501
            query_params.append(('instance_id', local_var_params['instance_id']))  # noqa: E501
        if 'instance_type' in local_var_params and local_var_params['instance_type'] is not None:  # noqa: E501
            query_params.append(('instance_type', local_var_params['instance_type']))  # noqa: E501
        if 'node_list' in local_var_params and local_var_params['node_list'] is not None:  # noqa: E501
            query_params.append(('node_list', local_var_params['node_list']))  # noqa: E501
        if 'time_end' in local_var_params and local_var_params['time_end'] is not None:  # noqa: E501
            query_params.append(('time_end', local_var_params['time_end']))  # noqa: E501
        if 'time_start' in local_var_params and local_var_params['time_start'] is not None:  # noqa: E501
            query_params.append(('time_start', local_var_params['time_start']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/instances/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiInstancesResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_job(self, job_id, **kwargs):  # noqa: E501
        """Get job info  # noqa: E501

        This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_job(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str job_id: Job id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiSlurmdbdJobsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_job_with_http_info(job_id, **kwargs)  # noqa: E501

    def slurmdb_v0040_get_job_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get job info  # noqa: E501

        This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_job_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str job_id: Job id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiSlurmdbdJobsResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'job_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_id` when calling `slurmdb_v0040_get_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in local_var_params:
            path_params['job_id'] = local_var_params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/job/{job_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiSlurmdbdJobsResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_jobs(self, **kwargs):  # noqa: E501
        """Get job list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV account list
        :param str association: CSV association list
        :param str cluster: CSV cluster list
        :param str constraints: CSV constraint list
        :param str cpus_max: Maximum number of cpus
        :param str cpus_min: Minimum number of cpus
        :param str scheduler_unset: Schedule bits not set
        :param str scheduled_on_submit: Job was started on submit
        :param str scheduled_by_main: Job was started from main scheduler
        :param str scheduled_by_backfill: Job was started from backfill
        :param str job_started: Job start RPC was received
        :param str exit_code: Job exit code (numeric)
        :param str show_duplicates: Include duplicate job entries
        :param str skip_steps: Exclude job step details
        :param str disable_truncate_usage_time: Do not truncate the time to usage_start and usage_end
        :param str whole_hetjob: Include details on all hetjob components
        :param str disable_whole_hetjob: Only show details on specified hetjob components
        :param str disable_wait_for_result: Tell dbd not to wait for the result
        :param str usage_time_as_submit_time: Use usage_time as the submit_time of the job
        :param str show_batch_script: Include job script
        :param str show_job_environment: Include job environment
        :param str format: CSV format list
        :param str groups: CSV group list
        :param str job_name: CSV job name list
        :param str nodes_max: Maximum number of nodes
        :param str nodes_min: Minimum number of nodes
        :param str partition: CSV partition name list
        :param str qos: CSV QOS name list
        :param str reason: CSV reason list
        :param str reservation: CSV reservation name list
        :param str reservation_id: CSV reservation ID list
        :param str state: CSV state list
        :param str step: CSV step id list
        :param str timelimit_max: Maximum timelimit (seconds)
        :param str timelimit_min: Minimum timelimit (seconds)
        :param str end_time: Usage end (UNIX timestamp)
        :param str start_time: Usage start (UNIX timestamp)
        :param str submit_time: Submit time (UNIX timestamp)
        :param str node: Ranged node string where jobs ran
        :param str users: CSV user name list
        :param str wckey: CSV wckey list
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiSlurmdbdJobsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_jobs_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_jobs_with_http_info(self, **kwargs):  # noqa: E501
        """Get job list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: CSV account list
        :param str association: CSV association list
        :param str cluster: CSV cluster list
        :param str constraints: CSV constraint list
        :param str cpus_max: Maximum number of cpus
        :param str cpus_min: Minimum number of cpus
        :param str scheduler_unset: Schedule bits not set
        :param str scheduled_on_submit: Job was started on submit
        :param str scheduled_by_main: Job was started from main scheduler
        :param str scheduled_by_backfill: Job was started from backfill
        :param str job_started: Job start RPC was received
        :param str exit_code: Job exit code (numeric)
        :param str show_duplicates: Include duplicate job entries
        :param str skip_steps: Exclude job step details
        :param str disable_truncate_usage_time: Do not truncate the time to usage_start and usage_end
        :param str whole_hetjob: Include details on all hetjob components
        :param str disable_whole_hetjob: Only show details on specified hetjob components
        :param str disable_wait_for_result: Tell dbd not to wait for the result
        :param str usage_time_as_submit_time: Use usage_time as the submit_time of the job
        :param str show_batch_script: Include job script
        :param str show_job_environment: Include job environment
        :param str format: CSV format list
        :param str groups: CSV group list
        :param str job_name: CSV job name list
        :param str nodes_max: Maximum number of nodes
        :param str nodes_min: Minimum number of nodes
        :param str partition: CSV partition name list
        :param str qos: CSV QOS name list
        :param str reason: CSV reason list
        :param str reservation: CSV reservation name list
        :param str reservation_id: CSV reservation ID list
        :param str state: CSV state list
        :param str step: CSV step id list
        :param str timelimit_max: Maximum timelimit (seconds)
        :param str timelimit_min: Minimum timelimit (seconds)
        :param str end_time: Usage end (UNIX timestamp)
        :param str start_time: Usage start (UNIX timestamp)
        :param str submit_time: Submit time (UNIX timestamp)
        :param str node: Ranged node string where jobs ran
        :param str users: CSV user name list
        :param str wckey: CSV wckey list
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiSlurmdbdJobsResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'association',
            'cluster',
            'constraints',
            'cpus_max',
            'cpus_min',
            'scheduler_unset',
            'scheduled_on_submit',
            'scheduled_by_main',
            'scheduled_by_backfill',
            'job_started',
            'exit_code',
            'show_duplicates',
            'skip_steps',
            'disable_truncate_usage_time',
            'whole_hetjob',
            'disable_whole_hetjob',
            'disable_wait_for_result',
            'usage_time_as_submit_time',
            'show_batch_script',
            'show_job_environment',
            'format',
            'groups',
            'job_name',
            'nodes_max',
            'nodes_min',
            'partition',
            'qos',
            'reason',
            'reservation',
            'reservation_id',
            'state',
            'step',
            'timelimit_max',
            'timelimit_min',
            'end_time',
            'start_time',
            'submit_time',
            'node',
            'users',
            'wckey'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_jobs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account' in local_var_params and local_var_params['account'] is not None:  # noqa: E501
            query_params.append(('account', local_var_params['account']))  # noqa: E501
        if 'association' in local_var_params and local_var_params['association'] is not None:  # noqa: E501
            query_params.append(('association', local_var_params['association']))  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'constraints' in local_var_params and local_var_params['constraints'] is not None:  # noqa: E501
            query_params.append(('constraints', local_var_params['constraints']))  # noqa: E501
        if 'cpus_max' in local_var_params and local_var_params['cpus_max'] is not None:  # noqa: E501
            query_params.append(('cpus_max', local_var_params['cpus_max']))  # noqa: E501
        if 'cpus_min' in local_var_params and local_var_params['cpus_min'] is not None:  # noqa: E501
            query_params.append(('cpus_min', local_var_params['cpus_min']))  # noqa: E501
        if 'scheduler_unset' in local_var_params and local_var_params['scheduler_unset'] is not None:  # noqa: E501
            query_params.append(('scheduler_unset', local_var_params['scheduler_unset']))  # noqa: E501
        if 'scheduled_on_submit' in local_var_params and local_var_params['scheduled_on_submit'] is not None:  # noqa: E501
            query_params.append(('scheduled_on_submit', local_var_params['scheduled_on_submit']))  # noqa: E501
        if 'scheduled_by_main' in local_var_params and local_var_params['scheduled_by_main'] is not None:  # noqa: E501
            query_params.append(('scheduled_by_main', local_var_params['scheduled_by_main']))  # noqa: E501
        if 'scheduled_by_backfill' in local_var_params and local_var_params['scheduled_by_backfill'] is not None:  # noqa: E501
            query_params.append(('scheduled_by_backfill', local_var_params['scheduled_by_backfill']))  # noqa: E501
        if 'job_started' in local_var_params and local_var_params['job_started'] is not None:  # noqa: E501
            query_params.append(('job_started', local_var_params['job_started']))  # noqa: E501
        if 'exit_code' in local_var_params and local_var_params['exit_code'] is not None:  # noqa: E501
            query_params.append(('exit_code', local_var_params['exit_code']))  # noqa: E501
        if 'show_duplicates' in local_var_params and local_var_params['show_duplicates'] is not None:  # noqa: E501
            query_params.append(('show_duplicates', local_var_params['show_duplicates']))  # noqa: E501
        if 'skip_steps' in local_var_params and local_var_params['skip_steps'] is not None:  # noqa: E501
            query_params.append(('skip_steps', local_var_params['skip_steps']))  # noqa: E501
        if 'disable_truncate_usage_time' in local_var_params and local_var_params['disable_truncate_usage_time'] is not None:  # noqa: E501
            query_params.append(('disable_truncate_usage_time', local_var_params['disable_truncate_usage_time']))  # noqa: E501
        if 'whole_hetjob' in local_var_params and local_var_params['whole_hetjob'] is not None:  # noqa: E501
            query_params.append(('whole_hetjob', local_var_params['whole_hetjob']))  # noqa: E501
        if 'disable_whole_hetjob' in local_var_params and local_var_params['disable_whole_hetjob'] is not None:  # noqa: E501
            query_params.append(('disable_whole_hetjob', local_var_params['disable_whole_hetjob']))  # noqa: E501
        if 'disable_wait_for_result' in local_var_params and local_var_params['disable_wait_for_result'] is not None:  # noqa: E501
            query_params.append(('disable_wait_for_result', local_var_params['disable_wait_for_result']))  # noqa: E501
        if 'usage_time_as_submit_time' in local_var_params and local_var_params['usage_time_as_submit_time'] is not None:  # noqa: E501
            query_params.append(('usage_time_as_submit_time', local_var_params['usage_time_as_submit_time']))  # noqa: E501
        if 'show_batch_script' in local_var_params and local_var_params['show_batch_script'] is not None:  # noqa: E501
            query_params.append(('show_batch_script', local_var_params['show_batch_script']))  # noqa: E501
        if 'show_job_environment' in local_var_params and local_var_params['show_job_environment'] is not None:  # noqa: E501
            query_params.append(('show_job_environment', local_var_params['show_job_environment']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'groups' in local_var_params and local_var_params['groups'] is not None:  # noqa: E501
            query_params.append(('groups', local_var_params['groups']))  # noqa: E501
        if 'job_name' in local_var_params and local_var_params['job_name'] is not None:  # noqa: E501
            query_params.append(('job_name', local_var_params['job_name']))  # noqa: E501
        if 'nodes_max' in local_var_params and local_var_params['nodes_max'] is not None:  # noqa: E501
            query_params.append(('nodes_max', local_var_params['nodes_max']))  # noqa: E501
        if 'nodes_min' in local_var_params and local_var_params['nodes_min'] is not None:  # noqa: E501
            query_params.append(('nodes_min', local_var_params['nodes_min']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'qos' in local_var_params and local_var_params['qos'] is not None:  # noqa: E501
            query_params.append(('qos', local_var_params['qos']))  # noqa: E501
        if 'reason' in local_var_params and local_var_params['reason'] is not None:  # noqa: E501
            query_params.append(('reason', local_var_params['reason']))  # noqa: E501
        if 'reservation' in local_var_params and local_var_params['reservation'] is not None:  # noqa: E501
            query_params.append(('reservation', local_var_params['reservation']))  # noqa: E501
        if 'reservation_id' in local_var_params and local_var_params['reservation_id'] is not None:  # noqa: E501
            query_params.append(('reservation_id', local_var_params['reservation_id']))  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'step' in local_var_params and local_var_params['step'] is not None:  # noqa: E501
            query_params.append(('step', local_var_params['step']))  # noqa: E501
        if 'timelimit_max' in local_var_params and local_var_params['timelimit_max'] is not None:  # noqa: E501
            query_params.append(('timelimit_max', local_var_params['timelimit_max']))  # noqa: E501
        if 'timelimit_min' in local_var_params and local_var_params['timelimit_min'] is not None:  # noqa: E501
            query_params.append(('timelimit_min', local_var_params['timelimit_min']))  # noqa: E501
        if 'end_time' in local_var_params and local_var_params['end_time'] is not None:  # noqa: E501
            query_params.append(('end_time', local_var_params['end_time']))  # noqa: E501
        if 'start_time' in local_var_params and local_var_params['start_time'] is not None:  # noqa: E501
            query_params.append(('start_time', local_var_params['start_time']))  # noqa: E501
        if 'submit_time' in local_var_params and local_var_params['submit_time'] is not None:  # noqa: E501
            query_params.append(('submit_time', local_var_params['submit_time']))  # noqa: E501
        if 'node' in local_var_params and local_var_params['node'] is not None:  # noqa: E501
            query_params.append(('node', local_var_params['node']))  # noqa: E501
        if 'users' in local_var_params and local_var_params['users'] is not None:  # noqa: E501
            query_params.append(('users', local_var_params['users']))  # noqa: E501
        if 'wckey' in local_var_params and local_var_params['wckey'] is not None:  # noqa: E501
            query_params.append(('wckey', local_var_params['wckey']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/jobs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiSlurmdbdJobsResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_qos(self, **kwargs):  # noqa: E501
        """Get QOS list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_qos(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str description: CSV description list
        :param str id: CSV QOS id list
        :param str format: CSV format list
        :param str name: CSV QOS name list
        :param str preempt_mode: PreemptMode used when jobs in this QOS are preempted
        :param str with_deleted: Include deleted QOS
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiSlurmdbdQosResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_qos_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_qos_with_http_info(self, **kwargs):  # noqa: E501
        """Get QOS list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_qos_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str description: CSV description list
        :param str id: CSV QOS id list
        :param str format: CSV format list
        :param str name: CSV QOS name list
        :param str preempt_mode: PreemptMode used when jobs in this QOS are preempted
        :param str with_deleted: Include deleted QOS
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiSlurmdbdQosResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'description',
            'id',
            'format',
            'name',
            'preempt_mode',
            'with_deleted'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_qos" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'preempt_mode' in local_var_params and local_var_params['preempt_mode'] is not None:  # noqa: E501
            query_params.append(('preempt_mode', local_var_params['preempt_mode']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/qos/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiSlurmdbdQosResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_single_qos(self, qos, **kwargs):  # noqa: E501
        """Get QOS info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_single_qos(qos, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str qos: QOS name (required)
        :param str with_deleted: Query includes deleted QOS
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiSlurmdbdQosResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_single_qos_with_http_info(qos, **kwargs)  # noqa: E501

    def slurmdb_v0040_get_single_qos_with_http_info(self, qos, **kwargs):  # noqa: E501
        """Get QOS info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_single_qos_with_http_info(qos, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str qos: QOS name (required)
        :param str with_deleted: Query includes deleted QOS
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiSlurmdbdQosResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'qos',
            'with_deleted'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_single_qos" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'qos' is set
        if self.api_client.client_side_validation and ('qos' not in local_var_params or  # noqa: E501
                                                        local_var_params['qos'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `qos` when calling `slurmdb_v0040_get_single_qos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qos' in local_var_params:
            path_params['qos'] = local_var_params['qos']  # noqa: E501

        query_params = []
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/qos/{qos}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiSlurmdbdQosResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_tres(self, **kwargs):  # noqa: E501
        """Get TRES info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_tres(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiTresResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_tres_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_tres_with_http_info(self, **kwargs):  # noqa: E501
        """Get TRES info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_tres_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiTresResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_tres" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/tres/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiTresResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_user(self, name, **kwargs):  # noqa: E501
        """Get user info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_user(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: User name (required)
        :param str with_deleted: Include deleted users
        :param str with_assocs: Include associations
        :param str with_coords: Include coordinators
        :param str with_wckeys: Include wckeys
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiUsersResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_user_with_http_info(name, **kwargs)  # noqa: E501

    def slurmdb_v0040_get_user_with_http_info(self, name, **kwargs):  # noqa: E501
        """Get user info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_user_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: User name (required)
        :param str with_deleted: Include deleted users
        :param str with_assocs: Include associations
        :param str with_coords: Include coordinators
        :param str with_wckeys: Include wckeys
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiUsersResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'name',
            'with_deleted',
            'with_assocs',
            'with_coords',
            'with_wckeys'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `slurmdb_v0040_get_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501
        if 'with_assocs' in local_var_params and local_var_params['with_assocs'] is not None:  # noqa: E501
            query_params.append(('with_assocs', local_var_params['with_assocs']))  # noqa: E501
        if 'with_coords' in local_var_params and local_var_params['with_coords'] is not None:  # noqa: E501
            query_params.append(('with_coords', local_var_params['with_coords']))  # noqa: E501
        if 'with_wckeys' in local_var_params and local_var_params['with_wckeys'] is not None:  # noqa: E501
            query_params.append(('with_wckeys', local_var_params['with_wckeys']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/user/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiUsersResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_users(self, **kwargs):  # noqa: E501
        """Get user list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str admin_level: Administrator level
        :param str default_account: CSV default account list
        :param str default_wckey: CSV default wckey list
        :param str with_assocs: With associations
        :param str with_coords: With coordinators
        :param str with_deleted: With deleted
        :param str with_wckeys: With wckeys
        :param str without_defaults: Exclude defaults
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiUsersResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_users_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_users_with_http_info(self, **kwargs):  # noqa: E501
        """Get user list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str admin_level: Administrator level
        :param str default_account: CSV default account list
        :param str default_wckey: CSV default wckey list
        :param str with_assocs: With associations
        :param str with_coords: With coordinators
        :param str with_deleted: With deleted
        :param str with_wckeys: With wckeys
        :param str without_defaults: Exclude defaults
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiUsersResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'admin_level',
            'default_account',
            'default_wckey',
            'with_assocs',
            'with_coords',
            'with_deleted',
            'with_wckeys',
            'without_defaults'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_users" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'admin_level' in local_var_params and local_var_params['admin_level'] is not None:  # noqa: E501
            query_params.append(('admin_level', local_var_params['admin_level']))  # noqa: E501
        if 'default_account' in local_var_params and local_var_params['default_account'] is not None:  # noqa: E501
            query_params.append(('default_account', local_var_params['default_account']))  # noqa: E501
        if 'default_wckey' in local_var_params and local_var_params['default_wckey'] is not None:  # noqa: E501
            query_params.append(('default_wckey', local_var_params['default_wckey']))  # noqa: E501
        if 'with_assocs' in local_var_params and local_var_params['with_assocs'] is not None:  # noqa: E501
            query_params.append(('with_assocs', local_var_params['with_assocs']))  # noqa: E501
        if 'with_coords' in local_var_params and local_var_params['with_coords'] is not None:  # noqa: E501
            query_params.append(('with_coords', local_var_params['with_coords']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501
        if 'with_wckeys' in local_var_params and local_var_params['with_wckeys'] is not None:  # noqa: E501
            query_params.append(('with_wckeys', local_var_params['with_wckeys']))  # noqa: E501
        if 'without_defaults' in local_var_params and local_var_params['without_defaults'] is not None:  # noqa: E501
            query_params.append(('without_defaults', local_var_params['without_defaults']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/users/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiUsersResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_wckey(self, id, **kwargs):  # noqa: E501
        """Get wckey info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_wckey(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: wckey id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiWckeyResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_wckey_with_http_info(id, **kwargs)  # noqa: E501

    def slurmdb_v0040_get_wckey_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get wckey info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_wckey_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: wckey id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiWckeyResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_wckey" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `slurmdb_v0040_get_wckey`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/wckey/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiWckeyResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_get_wckeys(self, **kwargs):  # noqa: E501
        """Get wckey list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_wckeys(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster: CSV cluster name list
        :param str format: CSV format name list
        :param str id: CSV id list
        :param str name: CSV name list
        :param str only_defaults: Only query defaults
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted wckeys
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiWckeyResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_get_wckeys_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_get_wckeys_with_http_info(self, **kwargs):  # noqa: E501
        """Get wckey list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_get_wckeys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster: CSV cluster name list
        :param str format: CSV format name list
        :param str id: CSV id list
        :param str name: CSV name list
        :param str only_defaults: Only query defaults
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted wckeys
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiWckeyResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cluster',
            'format',
            'id',
            'name',
            'only_defaults',
            'usage_end',
            'usage_start',
            'user',
            'with_usage',
            'with_deleted'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_get_wckeys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'only_defaults' in local_var_params and local_var_params['only_defaults'] is not None:  # noqa: E501
            query_params.append(('only_defaults', local_var_params['only_defaults']))  # noqa: E501
        if 'usage_end' in local_var_params and local_var_params['usage_end'] is not None:  # noqa: E501
            query_params.append(('usage_end', local_var_params['usage_end']))  # noqa: E501
        if 'usage_start' in local_var_params and local_var_params['usage_start'] is not None:  # noqa: E501
            query_params.append(('usage_start', local_var_params['usage_start']))  # noqa: E501
        if 'user' in local_var_params and local_var_params['user'] is not None:  # noqa: E501
            query_params.append(('user', local_var_params['user']))  # noqa: E501
        if 'with_usage' in local_var_params and local_var_params['with_usage'] is not None:  # noqa: E501
            query_params.append(('with_usage', local_var_params['with_usage']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/wckeys/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiWckeyResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_accounts(self, **kwargs):  # noqa: E501
        """Add/update list of accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiAccountsResp v0040_openapi_accounts_resp: Description of accounts to update/create
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_accounts_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Add/update list of accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiAccountsResp v0040_openapi_accounts_resp: Description of accounts to update/create
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v0040_openapi_accounts_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_accounts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_accounts_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_accounts_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/accounts/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_accounts_association(self, **kwargs):  # noqa: E501
        """Add accounts with conditional association  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_accounts_association(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiAccountsAddCondResp v0040_openapi_accounts_add_cond_resp: Add list of accounts with conditional association
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiAccountsAddCondRespStr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_accounts_association_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_accounts_association_with_http_info(self, **kwargs):  # noqa: E501
        """Add accounts with conditional association  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_accounts_association_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiAccountsAddCondResp v0040_openapi_accounts_add_cond_resp: Add list of accounts with conditional association
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiAccountsAddCondRespStr, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v0040_openapi_accounts_add_cond_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_accounts_association" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_accounts_add_cond_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_accounts_add_cond_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/accounts_association/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiAccountsAddCondRespStr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_associations(self, **kwargs):  # noqa: E501
        """Set associations info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_associations(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiAssocsResp v0040_openapi_assocs_resp: Job description
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_associations_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_associations_with_http_info(self, **kwargs):  # noqa: E501
        """Set associations info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_associations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiAssocsResp v0040_openapi_assocs_resp: Job description
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v0040_openapi_assocs_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_associations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_assocs_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_assocs_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/associations/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_clusters(self, **kwargs):  # noqa: E501
        """Get cluster list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_clusters(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str update_time: Filter reservations since update timestamp
        :param V0040OpenapiClustersResp v0040_openapi_clusters_resp: Cluster add or update descriptions
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_clusters_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_clusters_with_http_info(self, **kwargs):  # noqa: E501
        """Get cluster list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_clusters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str update_time: Filter reservations since update timestamp
        :param V0040OpenapiClustersResp v0040_openapi_clusters_resp: Cluster add or update descriptions
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_time',
            'v0040_openapi_clusters_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_clusters" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'update_time' in local_var_params and local_var_params['update_time'] is not None:  # noqa: E501
            query_params.append(('update_time', local_var_params['update_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_clusters_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_clusters_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/clusters/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_config(self, **kwargs):  # noqa: E501
        """Load all configuration information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiSlurmdbdConfigResp v0040_openapi_slurmdbd_config_resp: Add or update config
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_config_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_config_with_http_info(self, **kwargs):  # noqa: E501
        """Load all configuration information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiSlurmdbdConfigResp v0040_openapi_slurmdbd_config_resp: Add or update config
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v0040_openapi_slurmdbd_config_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_config" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_slurmdbd_config_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_slurmdbd_config_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_qos(self, **kwargs):  # noqa: E501
        """Add or update QOSs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_qos(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str description: CSV description list
        :param str id: CSV QOS id list
        :param str format: CSV format list
        :param str name: CSV QOS name list
        :param str preempt_mode: PreemptMode used when jobs in this QOS are preempted
        :param str with_deleted: Include deleted QOS
        :param V0040OpenapiSlurmdbdQosResp v0040_openapi_slurmdbd_qos_resp: Description of QOS to add or update
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_qos_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_qos_with_http_info(self, **kwargs):  # noqa: E501
        """Add or update QOSs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_qos_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str description: CSV description list
        :param str id: CSV QOS id list
        :param str format: CSV format list
        :param str name: CSV QOS name list
        :param str preempt_mode: PreemptMode used when jobs in this QOS are preempted
        :param str with_deleted: Include deleted QOS
        :param V0040OpenapiSlurmdbdQosResp v0040_openapi_slurmdbd_qos_resp: Description of QOS to add or update
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'description',
            'id',
            'format',
            'name',
            'preempt_mode',
            'with_deleted',
            'v0040_openapi_slurmdbd_qos_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_qos" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'preempt_mode' in local_var_params and local_var_params['preempt_mode'] is not None:  # noqa: E501
            query_params.append(('preempt_mode', local_var_params['preempt_mode']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_slurmdbd_qos_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_slurmdbd_qos_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/qos/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_tres(self, **kwargs):  # noqa: E501
        """Add TRES  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_tres(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiTresResp v0040_openapi_tres_resp: TRES descriptions. Only works in developer mode.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_tres_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_tres_with_http_info(self, **kwargs):  # noqa: E501
        """Add TRES  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_tres_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiTresResp v0040_openapi_tres_resp: TRES descriptions. Only works in developer mode.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v0040_openapi_tres_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_tres" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_tres_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_tres_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/tres/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_users(self, **kwargs):  # noqa: E501
        """Update users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiUsersResp v0040_openapi_users_resp: add or update user
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_users_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_users_with_http_info(self, **kwargs):  # noqa: E501
        """Update users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param V0040OpenapiUsersResp v0040_openapi_users_resp: add or update user
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'v0040_openapi_users_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_users" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_users_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_users_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/users/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_users_association(self, **kwargs):  # noqa: E501
        """Add users with conditional association  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_users_association(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str update_time: Filter partitions since update timestamp
        :param str flags: Query flags
        :param V0040OpenapiUsersAddCondResp v0040_openapi_users_add_cond_resp: Create users with conditional association
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiUsersAddCondRespStr
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_users_association_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_users_association_with_http_info(self, **kwargs):  # noqa: E501
        """Add users with conditional association  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_users_association_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str update_time: Filter partitions since update timestamp
        :param str flags: Query flags
        :param V0040OpenapiUsersAddCondResp v0040_openapi_users_add_cond_resp: Create users with conditional association
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiUsersAddCondRespStr, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_time',
            'flags',
            'v0040_openapi_users_add_cond_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_users_association" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'update_time' in local_var_params and local_var_params['update_time'] is not None:  # noqa: E501
            query_params.append(('update_time', local_var_params['update_time']))  # noqa: E501
        if 'flags' in local_var_params and local_var_params['flags'] is not None:  # noqa: E501
            query_params.append(('flags', local_var_params['flags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_users_add_cond_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_users_add_cond_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/users_association/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiUsersAddCondRespStr',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def slurmdb_v0040_post_wckeys(self, **kwargs):  # noqa: E501
        """Add or update wckeys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_wckeys(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster: CSV cluster name list
        :param str format: CSV format name list
        :param str id: CSV id list
        :param str name: CSV name list
        :param str only_defaults: Only query defaults
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted wckeys
        :param V0040OpenapiWckeyResp v0040_openapi_wckey_resp: wckeys description
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V0040OpenapiResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.slurmdb_v0040_post_wckeys_with_http_info(**kwargs)  # noqa: E501

    def slurmdb_v0040_post_wckeys_with_http_info(self, **kwargs):  # noqa: E501
        """Add or update wckeys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.slurmdb_v0040_post_wckeys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cluster: CSV cluster name list
        :param str format: CSV format name list
        :param str id: CSV id list
        :param str name: CSV name list
        :param str only_defaults: Only query defaults
        :param str usage_end: Usage end (UNIX timestamp)
        :param str usage_start: Usage start (UNIX timestamp)
        :param str user: CSV user list
        :param str with_usage: Include usage
        :param str with_deleted: Include deleted wckeys
        :param V0040OpenapiWckeyResp v0040_openapi_wckey_resp: wckeys description
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V0040OpenapiResp, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cluster',
            'format',
            'id',
            'name',
            'only_defaults',
            'usage_end',
            'usage_start',
            'user',
            'with_usage',
            'with_deleted',
            'v0040_openapi_wckey_resp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method slurmdb_v0040_post_wckeys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'only_defaults' in local_var_params and local_var_params['only_defaults'] is not None:  # noqa: E501
            query_params.append(('only_defaults', local_var_params['only_defaults']))  # noqa: E501
        if 'usage_end' in local_var_params and local_var_params['usage_end'] is not None:  # noqa: E501
            query_params.append(('usage_end', local_var_params['usage_end']))  # noqa: E501
        if 'usage_start' in local_var_params and local_var_params['usage_start'] is not None:  # noqa: E501
            query_params.append(('usage_start', local_var_params['usage_start']))  # noqa: E501
        if 'user' in local_var_params and local_var_params['user'] is not None:  # noqa: E501
            query_params.append(('user', local_var_params['user']))  # noqa: E501
        if 'with_usage' in local_var_params and local_var_params['with_usage'] is not None:  # noqa: E501
            query_params.append(('with_usage', local_var_params['with_usage']))  # noqa: E501
        if 'with_deleted' in local_var_params and local_var_params['with_deleted'] is not None:  # noqa: E501
            query_params.append(('with_deleted', local_var_params['with_deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v0040_openapi_wckey_resp' in local_var_params:
            body_params = local_var_params['v0040_openapi_wckey_resp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'token', 'user']  # noqa: E501

        return self.api_client.call_api(
            '/slurmdb/v0.0.40/wckeys/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0040OpenapiResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
