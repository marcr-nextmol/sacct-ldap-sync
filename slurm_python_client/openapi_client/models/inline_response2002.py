# coding: utf-8

"""
    Slurm REST API (Partial)

    A partial OpenAPI specification for the Slurm REST API, focusing on user and account management. This specification describes the endpoints used by the Python script to create and manage Slurm users and accounts.   # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse2002(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'meta': 'object',
        'accounts': 'list[SlurmAccount]'
    }

    attribute_map = {
        'meta': 'meta',
        'accounts': 'accounts'
    }

    def __init__(self, meta=None, accounts=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2002 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._meta = None
        self._accounts = None
        self.discriminator = None

        if meta is not None:
            self.meta = meta
        if accounts is not None:
            self.accounts = accounts

    @property
    def meta(self):
        """Gets the meta of this InlineResponse2002.  # noqa: E501


        :return: The meta of this InlineResponse2002.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this InlineResponse2002.


        :param meta: The meta of this InlineResponse2002.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def accounts(self):
        """Gets the accounts of this InlineResponse2002.  # noqa: E501


        :return: The accounts of this InlineResponse2002.  # noqa: E501
        :rtype: list[SlurmAccount]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this InlineResponse2002.


        :param accounts: The accounts of this InlineResponse2002.  # noqa: E501
        :type: list[SlurmAccount]
        """

        self._accounts = accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2002):
            return True

        return self.to_dict() != other.to_dict()
