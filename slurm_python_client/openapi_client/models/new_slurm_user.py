# coding: utf-8

"""
    Slurm REST API (Partial)

    A partial OpenAPI specification for the Slurm REST API, focusing on user and account management. This specification describes the endpoints used by the Python script to create and manage Slurm users and accounts.   # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class NewSlurmUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'uid': 'int',
        'default_account': 'str'
    }

    attribute_map = {
        'name': 'name',
        'uid': 'uid',
        'default_account': 'default_account'
    }

    def __init__(self, name=None, uid=None, default_account=None, local_vars_configuration=None):  # noqa: E501
        """NewSlurmUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._uid = None
        self._default_account = None
        self.discriminator = None

        self.name = name
        self.uid = uid
        self.default_account = default_account

    @property
    def name(self):
        """Gets the name of this NewSlurmUser.  # noqa: E501

        The username to create.  # noqa: E501

        :return: The name of this NewSlurmUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewSlurmUser.

        The username to create.  # noqa: E501

        :param name: The name of this NewSlurmUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def uid(self):
        """Gets the uid of this NewSlurmUser.  # noqa: E501

        The UID for the new user.  # noqa: E501

        :return: The uid of this NewSlurmUser.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this NewSlurmUser.

        The UID for the new user.  # noqa: E501

        :param uid: The uid of this NewSlurmUser.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and uid is None:  # noqa: E501
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def default_account(self):
        """Gets the default_account of this NewSlurmUser.  # noqa: E501

        The default Slurm account for the new user.  # noqa: E501

        :return: The default_account of this NewSlurmUser.  # noqa: E501
        :rtype: str
        """
        return self._default_account

    @default_account.setter
    def default_account(self, default_account):
        """Sets the default_account of this NewSlurmUser.

        The default Slurm account for the new user.  # noqa: E501

        :param default_account: The default_account of this NewSlurmUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and default_account is None:  # noqa: E501
            raise ValueError("Invalid value for `default_account`, must not be `None`")  # noqa: E501

        self._default_account = default_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewSlurmUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewSlurmUser):
            return True

        return self.to_dict() != other.to_dict()
