# coding: utf-8

"""
    Slurm REST API (Partial)

    A partial OpenAPI specification for the Slurm REST API, focusing on user and account management. This specification describes the endpoints used by the Python script to create and manage Slurm users and accounts.   # noqa: E501

    The version of the OpenAPI document: 0.0.38
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SlurmAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'organization': 'str',
        'fairshare': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'organization': 'organization',
        'fairshare': 'fairshare'
    }

    def __init__(self, name=None, description=None, organization=None, fairshare=None, local_vars_configuration=None):  # noqa: E501
        """SlurmAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._organization = None
        self._fairshare = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if organization is not None:
            self.organization = organization
        if fairshare is not None:
            self.fairshare = fairshare

    @property
    def name(self):
        """Gets the name of this SlurmAccount.  # noqa: E501

        The account name.  # noqa: E501

        :return: The name of this SlurmAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SlurmAccount.

        The account name.  # noqa: E501

        :param name: The name of this SlurmAccount.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SlurmAccount.  # noqa: E501

        A human-readable description of the account.  # noqa: E501

        :return: The description of this SlurmAccount.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SlurmAccount.

        A human-readable description of the account.  # noqa: E501

        :param description: The description of this SlurmAccount.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def organization(self):
        """Gets the organization of this SlurmAccount.  # noqa: E501

        The organization associated with the account.  # noqa: E501

        :return: The organization of this SlurmAccount.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this SlurmAccount.

        The organization associated with the account.  # noqa: E501

        :param organization: The organization of this SlurmAccount.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def fairshare(self):
        """Gets the fairshare of this SlurmAccount.  # noqa: E501

        Fairshare value for the account.  # noqa: E501

        :return: The fairshare of this SlurmAccount.  # noqa: E501
        :rtype: int
        """
        return self._fairshare

    @fairshare.setter
    def fairshare(self, fairshare):
        """Sets the fairshare of this SlurmAccount.

        Fairshare value for the account.  # noqa: E501

        :param fairshare: The fairshare of this SlurmAccount.  # noqa: E501
        :type: int
        """

        self._fairshare = fairshare

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlurmAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SlurmAccount):
            return True

        return self.to_dict() != other.to_dict()
