# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.v0040_accounts_add_cond import V0040AccountsAddCond  # noqa: E501
from openapi_client.rest import ApiException

class TestV0040AccountsAddCond(unittest.TestCase):
    """V0040AccountsAddCond unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V0040AccountsAddCond
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.v0040_accounts_add_cond.V0040AccountsAddCond()  # noqa: E501
        if include_optional :
            return V0040AccountsAddCond(
                accounts = [
                    '0'
                    ], 
                association = openapi_client.models.v0/0/40_assoc_rec_set.v0.0.40_assoc_rec_set(
                    comment = '0', 
                    defaultqos = '0', 
                    grpjobs = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    grpjobsaccrue = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    grpsubmitjobs = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    grptres = [
                        openapi_client.models.v0/0/40_tres.v0.0.40_tres(
                            type = '0', 
                            name = '0', 
                            id = 56, 
                            count = 56, )
                        ], 
                    grptresmins = [
                        openapi_client.models.v0/0/40_tres.v0.0.40_tres(
                            type = '0', 
                            name = '0', 
                            id = 56, 
                            count = 56, )
                        ], 
                    grptresrunmins = [
                        openapi_client.models.v0/0/40_tres.v0.0.40_tres(
                            type = '0', 
                            name = '0', 
                            id = 56, 
                            count = 56, )
                        ], 
                    grpwall = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    maxjobs = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    maxjobsaccrue = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    maxsubmitjobs = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    maxtresminsperjob = [
                        openapi_client.models.v0/0/40_tres.v0.0.40_tres(
                            type = '0', 
                            name = '0', 
                            id = 56, 
                            count = 56, )
                        ], 
                    maxtresrunmins = [
                        openapi_client.models.v0/0/40_tres.v0.0.40_tres(
                            type = '0', 
                            name = '0', 
                            id = 56, 
                            count = 56, )
                        ], 
                    maxtresperjob = [
                        openapi_client.models.v0/0/40_tres.v0.0.40_tres(
                            type = '0', 
                            name = '0', 
                            id = 56, 
                            count = 56, )
                        ], 
                    maxtrespernode = [
                        openapi_client.models.v0/0/40_tres.v0.0.40_tres(
                            type = '0', 
                            name = '0', 
                            id = 56, 
                            count = 56, )
                        ], 
                    maxwalldurationperjob = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    minpriothresh = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    parent = '0', 
                    priority = openapi_client.models.v0/0/40_uint32_no_val.v0.0.40_uint32_no_val(
                        set = True, 
                        infinite = True, 
                        number = 56, ), 
                    qoslevel = [
                        '0'
                        ], 
                    fairshare = 56, ), 
                clusters = [
                    '0'
                    ]
            )
        else :
            return V0040AccountsAddCond(
                accounts = [
                    '0'
                    ],
        )

    def testV0040AccountsAddCond(self):
        """Test V0040AccountsAddCond"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
