# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040AssocSharesObjWrap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'cluster': 'str',
        'name': 'str',
        'parent': 'str',
        'partition': 'str',
        'shares_normalized': 'V0040Float64NoVal',
        'shares': 'V0040Uint32NoVal',
        'tres': 'V0040AssocSharesObjWrapTres',
        'effective_usage': 'float',
        'usage_normalized': 'V0040Float64NoVal',
        'usage': 'int',
        'fairshare': 'V0040AssocSharesObjWrapFairshare',
        'type': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'cluster': 'cluster',
        'name': 'name',
        'parent': 'parent',
        'partition': 'partition',
        'shares_normalized': 'shares_normalized',
        'shares': 'shares',
        'tres': 'tres',
        'effective_usage': 'effective_usage',
        'usage_normalized': 'usage_normalized',
        'usage': 'usage',
        'fairshare': 'fairshare',
        'type': 'type'
    }

    def __init__(self, id=None, cluster=None, name=None, parent=None, partition=None, shares_normalized=None, shares=None, tres=None, effective_usage=None, usage_normalized=None, usage=None, fairshare=None, type=None, local_vars_configuration=None):  # noqa: E501
        """V0040AssocSharesObjWrap - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._cluster = None
        self._name = None
        self._parent = None
        self._partition = None
        self._shares_normalized = None
        self._shares = None
        self._tres = None
        self._effective_usage = None
        self._usage_normalized = None
        self._usage = None
        self._fairshare = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if cluster is not None:
            self.cluster = cluster
        if name is not None:
            self.name = name
        if parent is not None:
            self.parent = parent
        if partition is not None:
            self.partition = partition
        if shares_normalized is not None:
            self.shares_normalized = shares_normalized
        if shares is not None:
            self.shares = shares
        if tres is not None:
            self.tres = tres
        if effective_usage is not None:
            self.effective_usage = effective_usage
        if usage_normalized is not None:
            self.usage_normalized = usage_normalized
        if usage is not None:
            self.usage = usage
        if fairshare is not None:
            self.fairshare = fairshare
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this V0040AssocSharesObjWrap.  # noqa: E501

        Association ID  # noqa: E501

        :return: The id of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V0040AssocSharesObjWrap.

        Association ID  # noqa: E501

        :param id: The id of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cluster(self):
        """Gets the cluster of this V0040AssocSharesObjWrap.  # noqa: E501

        Cluster name  # noqa: E501

        :return: The cluster of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this V0040AssocSharesObjWrap.

        Cluster name  # noqa: E501

        :param cluster: The cluster of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def name(self):
        """Gets the name of this V0040AssocSharesObjWrap.  # noqa: E501

        Share name  # noqa: E501

        :return: The name of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040AssocSharesObjWrap.

        Share name  # noqa: E501

        :param name: The name of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this V0040AssocSharesObjWrap.  # noqa: E501

        Parent name  # noqa: E501

        :return: The parent of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this V0040AssocSharesObjWrap.

        Parent name  # noqa: E501

        :param parent: The parent of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def partition(self):
        """Gets the partition of this V0040AssocSharesObjWrap.  # noqa: E501

        Partition name  # noqa: E501

        :return: The partition of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this V0040AssocSharesObjWrap.

        Partition name  # noqa: E501

        :param partition: The partition of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def shares_normalized(self):
        """Gets the shares_normalized of this V0040AssocSharesObjWrap.  # noqa: E501


        :return: The shares_normalized of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: V0040Float64NoVal
        """
        return self._shares_normalized

    @shares_normalized.setter
    def shares_normalized(self, shares_normalized):
        """Sets the shares_normalized of this V0040AssocSharesObjWrap.


        :param shares_normalized: The shares_normalized of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: V0040Float64NoVal
        """

        self._shares_normalized = shares_normalized

    @property
    def shares(self):
        """Gets the shares of this V0040AssocSharesObjWrap.  # noqa: E501


        :return: The shares of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this V0040AssocSharesObjWrap.


        :param shares: The shares of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._shares = shares

    @property
    def tres(self):
        """Gets the tres of this V0040AssocSharesObjWrap.  # noqa: E501


        :return: The tres of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: V0040AssocSharesObjWrapTres
        """
        return self._tres

    @tres.setter
    def tres(self, tres):
        """Sets the tres of this V0040AssocSharesObjWrap.


        :param tres: The tres of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: V0040AssocSharesObjWrapTres
        """

        self._tres = tres

    @property
    def effective_usage(self):
        """Gets the effective_usage of this V0040AssocSharesObjWrap.  # noqa: E501

        Effective, normalized usage  # noqa: E501

        :return: The effective_usage of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: float
        """
        return self._effective_usage

    @effective_usage.setter
    def effective_usage(self, effective_usage):
        """Sets the effective_usage of this V0040AssocSharesObjWrap.

        Effective, normalized usage  # noqa: E501

        :param effective_usage: The effective_usage of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: float
        """

        self._effective_usage = effective_usage

    @property
    def usage_normalized(self):
        """Gets the usage_normalized of this V0040AssocSharesObjWrap.  # noqa: E501


        :return: The usage_normalized of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: V0040Float64NoVal
        """
        return self._usage_normalized

    @usage_normalized.setter
    def usage_normalized(self, usage_normalized):
        """Sets the usage_normalized of this V0040AssocSharesObjWrap.


        :param usage_normalized: The usage_normalized of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: V0040Float64NoVal
        """

        self._usage_normalized = usage_normalized

    @property
    def usage(self):
        """Gets the usage of this V0040AssocSharesObjWrap.  # noqa: E501

        Measure of tresbillableunits usage  # noqa: E501

        :return: The usage of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this V0040AssocSharesObjWrap.

        Measure of tresbillableunits usage  # noqa: E501

        :param usage: The usage of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: int
        """

        self._usage = usage

    @property
    def fairshare(self):
        """Gets the fairshare of this V0040AssocSharesObjWrap.  # noqa: E501


        :return: The fairshare of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: V0040AssocSharesObjWrapFairshare
        """
        return self._fairshare

    @fairshare.setter
    def fairshare(self, fairshare):
        """Sets the fairshare of this V0040AssocSharesObjWrap.


        :param fairshare: The fairshare of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: V0040AssocSharesObjWrapFairshare
        """

        self._fairshare = fairshare

    @property
    def type(self):
        """Gets the type of this V0040AssocSharesObjWrap.  # noqa: E501

        User or account association  # noqa: E501

        :return: The type of this V0040AssocSharesObjWrap.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V0040AssocSharesObjWrap.

        User or account association  # noqa: E501

        :param type: The type of this V0040AssocSharesObjWrap.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["USER", "ASSOCIATION"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(type).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040AssocSharesObjWrap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040AssocSharesObjWrap):
            return True

        return self.to_dict() != other.to_dict()
