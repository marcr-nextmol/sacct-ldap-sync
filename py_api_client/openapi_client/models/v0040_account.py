# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040Account(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associations': 'list[V0040AssocShort]',
        'coordinators': 'list[V0040Coord]',
        'description': 'str',
        'name': 'str',
        'organization': 'str',
        'flags': 'list[str]'
    }

    attribute_map = {
        'associations': 'associations',
        'coordinators': 'coordinators',
        'description': 'description',
        'name': 'name',
        'organization': 'organization',
        'flags': 'flags'
    }

    def __init__(self, associations=None, coordinators=None, description=None, name=None, organization=None, flags=None, local_vars_configuration=None):  # noqa: E501
        """V0040Account - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._associations = None
        self._coordinators = None
        self._description = None
        self._name = None
        self._organization = None
        self._flags = None
        self.discriminator = None

        if associations is not None:
            self.associations = associations
        if coordinators is not None:
            self.coordinators = coordinators
        self.description = description
        self.name = name
        self.organization = organization
        if flags is not None:
            self.flags = flags

    @property
    def associations(self):
        """Gets the associations of this V0040Account.  # noqa: E501


        :return: The associations of this V0040Account.  # noqa: E501
        :rtype: list[V0040AssocShort]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this V0040Account.


        :param associations: The associations of this V0040Account.  # noqa: E501
        :type: list[V0040AssocShort]
        """

        self._associations = associations

    @property
    def coordinators(self):
        """Gets the coordinators of this V0040Account.  # noqa: E501


        :return: The coordinators of this V0040Account.  # noqa: E501
        :rtype: list[V0040Coord]
        """
        return self._coordinators

    @coordinators.setter
    def coordinators(self, coordinators):
        """Sets the coordinators of this V0040Account.


        :param coordinators: The coordinators of this V0040Account.  # noqa: E501
        :type: list[V0040Coord]
        """

        self._coordinators = coordinators

    @property
    def description(self):
        """Gets the description of this V0040Account.  # noqa: E501

        Arbitrary string describing the account  # noqa: E501

        :return: The description of this V0040Account.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V0040Account.

        Arbitrary string describing the account  # noqa: E501

        :param description: The description of this V0040Account.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def name(self):
        """Gets the name of this V0040Account.  # noqa: E501

        Account name  # noqa: E501

        :return: The name of this V0040Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040Account.

        Account name  # noqa: E501

        :param name: The name of this V0040Account.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this V0040Account.  # noqa: E501

        Organization to which the account belongs  # noqa: E501

        :return: The organization of this V0040Account.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this V0040Account.

        Organization to which the account belongs  # noqa: E501

        :param organization: The organization of this V0040Account.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and organization is None:  # noqa: E501
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def flags(self):
        """Gets the flags of this V0040Account.  # noqa: E501

        Flags associated with the account  # noqa: E501

        :return: The flags of this V0040Account.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040Account.

        Flags associated with the account  # noqa: E501

        :param flags: The flags of this V0040Account.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DELETED"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040Account):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040Account):
            return True

        return self.to_dict() != other.to_dict()
