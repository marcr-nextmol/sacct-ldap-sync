# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040Node(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'architecture': 'str',
        'burstbuffer_network_address': 'str',
        'boards': 'int',
        'boot_time': 'V0040Uint64NoVal',
        'cluster_name': 'str',
        'cores': 'int',
        'specialized_cores': 'int',
        'cpu_binding': 'int',
        'cpu_load': 'int',
        'free_mem': 'V0040Uint64NoVal',
        'cpus': 'int',
        'effective_cpus': 'int',
        'specialized_cpus': 'str',
        'energy': 'V0040AcctGatherEnergy',
        'external_sensors': 'object',
        'extra': 'str',
        'power': 'object',
        'features': 'list[str]',
        'active_features': 'list[str]',
        'gres': 'str',
        'gres_drained': 'str',
        'gres_used': 'str',
        'instance_id': 'str',
        'instance_type': 'str',
        'last_busy': 'V0040Uint64NoVal',
        'mcs_label': 'str',
        'specialized_memory': 'int',
        'name': 'str',
        'next_state_after_reboot': 'list[str]',
        'address': 'str',
        'hostname': 'str',
        'state': 'list[str]',
        'operating_system': 'str',
        'owner': 'str',
        'partitions': 'list[str]',
        'port': 'int',
        'real_memory': 'int',
        'comment': 'str',
        'reason': 'str',
        'reason_changed_at': 'V0040Uint64NoVal',
        'reason_set_by_user': 'str',
        'resume_after': 'V0040Uint64NoVal',
        'reservation': 'str',
        'alloc_memory': 'int',
        'alloc_cpus': 'int',
        'alloc_idle_cpus': 'int',
        'tres_used': 'str',
        'tres_weighted': 'float',
        'slurmd_start_time': 'V0040Uint64NoVal',
        'sockets': 'int',
        'threads': 'int',
        'temporary_disk': 'int',
        'weight': 'int',
        'tres': 'str',
        'version': 'str'
    }

    attribute_map = {
        'architecture': 'architecture',
        'burstbuffer_network_address': 'burstbuffer_network_address',
        'boards': 'boards',
        'boot_time': 'boot_time',
        'cluster_name': 'cluster_name',
        'cores': 'cores',
        'specialized_cores': 'specialized_cores',
        'cpu_binding': 'cpu_binding',
        'cpu_load': 'cpu_load',
        'free_mem': 'free_mem',
        'cpus': 'cpus',
        'effective_cpus': 'effective_cpus',
        'specialized_cpus': 'specialized_cpus',
        'energy': 'energy',
        'external_sensors': 'external_sensors',
        'extra': 'extra',
        'power': 'power',
        'features': 'features',
        'active_features': 'active_features',
        'gres': 'gres',
        'gres_drained': 'gres_drained',
        'gres_used': 'gres_used',
        'instance_id': 'instance_id',
        'instance_type': 'instance_type',
        'last_busy': 'last_busy',
        'mcs_label': 'mcs_label',
        'specialized_memory': 'specialized_memory',
        'name': 'name',
        'next_state_after_reboot': 'next_state_after_reboot',
        'address': 'address',
        'hostname': 'hostname',
        'state': 'state',
        'operating_system': 'operating_system',
        'owner': 'owner',
        'partitions': 'partitions',
        'port': 'port',
        'real_memory': 'real_memory',
        'comment': 'comment',
        'reason': 'reason',
        'reason_changed_at': 'reason_changed_at',
        'reason_set_by_user': 'reason_set_by_user',
        'resume_after': 'resume_after',
        'reservation': 'reservation',
        'alloc_memory': 'alloc_memory',
        'alloc_cpus': 'alloc_cpus',
        'alloc_idle_cpus': 'alloc_idle_cpus',
        'tres_used': 'tres_used',
        'tres_weighted': 'tres_weighted',
        'slurmd_start_time': 'slurmd_start_time',
        'sockets': 'sockets',
        'threads': 'threads',
        'temporary_disk': 'temporary_disk',
        'weight': 'weight',
        'tres': 'tres',
        'version': 'version'
    }

    def __init__(self, architecture=None, burstbuffer_network_address=None, boards=None, boot_time=None, cluster_name=None, cores=None, specialized_cores=None, cpu_binding=None, cpu_load=None, free_mem=None, cpus=None, effective_cpus=None, specialized_cpus=None, energy=None, external_sensors=None, extra=None, power=None, features=None, active_features=None, gres=None, gres_drained=None, gres_used=None, instance_id=None, instance_type=None, last_busy=None, mcs_label=None, specialized_memory=None, name=None, next_state_after_reboot=None, address=None, hostname=None, state=None, operating_system=None, owner=None, partitions=None, port=None, real_memory=None, comment=None, reason=None, reason_changed_at=None, reason_set_by_user=None, resume_after=None, reservation=None, alloc_memory=None, alloc_cpus=None, alloc_idle_cpus=None, tres_used=None, tres_weighted=None, slurmd_start_time=None, sockets=None, threads=None, temporary_disk=None, weight=None, tres=None, version=None, local_vars_configuration=None):  # noqa: E501
        """V0040Node - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._architecture = None
        self._burstbuffer_network_address = None
        self._boards = None
        self._boot_time = None
        self._cluster_name = None
        self._cores = None
        self._specialized_cores = None
        self._cpu_binding = None
        self._cpu_load = None
        self._free_mem = None
        self._cpus = None
        self._effective_cpus = None
        self._specialized_cpus = None
        self._energy = None
        self._external_sensors = None
        self._extra = None
        self._power = None
        self._features = None
        self._active_features = None
        self._gres = None
        self._gres_drained = None
        self._gres_used = None
        self._instance_id = None
        self._instance_type = None
        self._last_busy = None
        self._mcs_label = None
        self._specialized_memory = None
        self._name = None
        self._next_state_after_reboot = None
        self._address = None
        self._hostname = None
        self._state = None
        self._operating_system = None
        self._owner = None
        self._partitions = None
        self._port = None
        self._real_memory = None
        self._comment = None
        self._reason = None
        self._reason_changed_at = None
        self._reason_set_by_user = None
        self._resume_after = None
        self._reservation = None
        self._alloc_memory = None
        self._alloc_cpus = None
        self._alloc_idle_cpus = None
        self._tres_used = None
        self._tres_weighted = None
        self._slurmd_start_time = None
        self._sockets = None
        self._threads = None
        self._temporary_disk = None
        self._weight = None
        self._tres = None
        self._version = None
        self.discriminator = None

        if architecture is not None:
            self.architecture = architecture
        if burstbuffer_network_address is not None:
            self.burstbuffer_network_address = burstbuffer_network_address
        if boards is not None:
            self.boards = boards
        if boot_time is not None:
            self.boot_time = boot_time
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if cores is not None:
            self.cores = cores
        if specialized_cores is not None:
            self.specialized_cores = specialized_cores
        if cpu_binding is not None:
            self.cpu_binding = cpu_binding
        if cpu_load is not None:
            self.cpu_load = cpu_load
        if free_mem is not None:
            self.free_mem = free_mem
        if cpus is not None:
            self.cpus = cpus
        if effective_cpus is not None:
            self.effective_cpus = effective_cpus
        if specialized_cpus is not None:
            self.specialized_cpus = specialized_cpus
        if energy is not None:
            self.energy = energy
        if external_sensors is not None:
            self.external_sensors = external_sensors
        if extra is not None:
            self.extra = extra
        if power is not None:
            self.power = power
        if features is not None:
            self.features = features
        if active_features is not None:
            self.active_features = active_features
        if gres is not None:
            self.gres = gres
        if gres_drained is not None:
            self.gres_drained = gres_drained
        if gres_used is not None:
            self.gres_used = gres_used
        if instance_id is not None:
            self.instance_id = instance_id
        if instance_type is not None:
            self.instance_type = instance_type
        if last_busy is not None:
            self.last_busy = last_busy
        if mcs_label is not None:
            self.mcs_label = mcs_label
        if specialized_memory is not None:
            self.specialized_memory = specialized_memory
        if name is not None:
            self.name = name
        if next_state_after_reboot is not None:
            self.next_state_after_reboot = next_state_after_reboot
        if address is not None:
            self.address = address
        if hostname is not None:
            self.hostname = hostname
        if state is not None:
            self.state = state
        if operating_system is not None:
            self.operating_system = operating_system
        if owner is not None:
            self.owner = owner
        if partitions is not None:
            self.partitions = partitions
        if port is not None:
            self.port = port
        if real_memory is not None:
            self.real_memory = real_memory
        if comment is not None:
            self.comment = comment
        if reason is not None:
            self.reason = reason
        if reason_changed_at is not None:
            self.reason_changed_at = reason_changed_at
        if reason_set_by_user is not None:
            self.reason_set_by_user = reason_set_by_user
        if resume_after is not None:
            self.resume_after = resume_after
        if reservation is not None:
            self.reservation = reservation
        if alloc_memory is not None:
            self.alloc_memory = alloc_memory
        if alloc_cpus is not None:
            self.alloc_cpus = alloc_cpus
        if alloc_idle_cpus is not None:
            self.alloc_idle_cpus = alloc_idle_cpus
        if tres_used is not None:
            self.tres_used = tres_used
        if tres_weighted is not None:
            self.tres_weighted = tres_weighted
        if slurmd_start_time is not None:
            self.slurmd_start_time = slurmd_start_time
        if sockets is not None:
            self.sockets = sockets
        if threads is not None:
            self.threads = threads
        if temporary_disk is not None:
            self.temporary_disk = temporary_disk
        if weight is not None:
            self.weight = weight
        if tres is not None:
            self.tres = tres
        if version is not None:
            self.version = version

    @property
    def architecture(self):
        """Gets the architecture of this V0040Node.  # noqa: E501

        Computer architecture  # noqa: E501

        :return: The architecture of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this V0040Node.

        Computer architecture  # noqa: E501

        :param architecture: The architecture of this V0040Node.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def burstbuffer_network_address(self):
        """Gets the burstbuffer_network_address of this V0040Node.  # noqa: E501

        Alternate network path to be used for sbcast network traffic  # noqa: E501

        :return: The burstbuffer_network_address of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._burstbuffer_network_address

    @burstbuffer_network_address.setter
    def burstbuffer_network_address(self, burstbuffer_network_address):
        """Sets the burstbuffer_network_address of this V0040Node.

        Alternate network path to be used for sbcast network traffic  # noqa: E501

        :param burstbuffer_network_address: The burstbuffer_network_address of this V0040Node.  # noqa: E501
        :type: str
        """

        self._burstbuffer_network_address = burstbuffer_network_address

    @property
    def boards(self):
        """Gets the boards of this V0040Node.  # noqa: E501

        Number of Baseboards in nodes with a baseboard controller  # noqa: E501

        :return: The boards of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._boards

    @boards.setter
    def boards(self, boards):
        """Sets the boards of this V0040Node.

        Number of Baseboards in nodes with a baseboard controller  # noqa: E501

        :param boards: The boards of this V0040Node.  # noqa: E501
        :type: int
        """

        self._boards = boards

    @property
    def boot_time(self):
        """Gets the boot_time of this V0040Node.  # noqa: E501


        :return: The boot_time of this V0040Node.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._boot_time

    @boot_time.setter
    def boot_time(self, boot_time):
        """Sets the boot_time of this V0040Node.


        :param boot_time: The boot_time of this V0040Node.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._boot_time = boot_time

    @property
    def cluster_name(self):
        """Gets the cluster_name of this V0040Node.  # noqa: E501

        Cluster name (only set in federated environments)  # noqa: E501

        :return: The cluster_name of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this V0040Node.

        Cluster name (only set in federated environments)  # noqa: E501

        :param cluster_name: The cluster_name of this V0040Node.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def cores(self):
        """Gets the cores of this V0040Node.  # noqa: E501

        Number of cores in a single physical processor socket  # noqa: E501

        :return: The cores of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this V0040Node.

        Number of cores in a single physical processor socket  # noqa: E501

        :param cores: The cores of this V0040Node.  # noqa: E501
        :type: int
        """

        self._cores = cores

    @property
    def specialized_cores(self):
        """Gets the specialized_cores of this V0040Node.  # noqa: E501

        Number of cores reserved for system use  # noqa: E501

        :return: The specialized_cores of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._specialized_cores

    @specialized_cores.setter
    def specialized_cores(self, specialized_cores):
        """Sets the specialized_cores of this V0040Node.

        Number of cores reserved for system use  # noqa: E501

        :param specialized_cores: The specialized_cores of this V0040Node.  # noqa: E501
        :type: int
        """

        self._specialized_cores = specialized_cores

    @property
    def cpu_binding(self):
        """Gets the cpu_binding of this V0040Node.  # noqa: E501

        Default method for binding tasks to allocated CPUs  # noqa: E501

        :return: The cpu_binding of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._cpu_binding

    @cpu_binding.setter
    def cpu_binding(self, cpu_binding):
        """Sets the cpu_binding of this V0040Node.

        Default method for binding tasks to allocated CPUs  # noqa: E501

        :param cpu_binding: The cpu_binding of this V0040Node.  # noqa: E501
        :type: int
        """

        self._cpu_binding = cpu_binding

    @property
    def cpu_load(self):
        """Gets the cpu_load of this V0040Node.  # noqa: E501

        CPU load as reported by the OS  # noqa: E501

        :return: The cpu_load of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._cpu_load

    @cpu_load.setter
    def cpu_load(self, cpu_load):
        """Sets the cpu_load of this V0040Node.

        CPU load as reported by the OS  # noqa: E501

        :param cpu_load: The cpu_load of this V0040Node.  # noqa: E501
        :type: int
        """

        self._cpu_load = cpu_load

    @property
    def free_mem(self):
        """Gets the free_mem of this V0040Node.  # noqa: E501


        :return: The free_mem of this V0040Node.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._free_mem

    @free_mem.setter
    def free_mem(self, free_mem):
        """Sets the free_mem of this V0040Node.


        :param free_mem: The free_mem of this V0040Node.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._free_mem = free_mem

    @property
    def cpus(self):
        """Gets the cpus of this V0040Node.  # noqa: E501

        Total CPUs, including cores and threads  # noqa: E501

        :return: The cpus of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this V0040Node.

        Total CPUs, including cores and threads  # noqa: E501

        :param cpus: The cpus of this V0040Node.  # noqa: E501
        :type: int
        """

        self._cpus = cpus

    @property
    def effective_cpus(self):
        """Gets the effective_cpus of this V0040Node.  # noqa: E501

        Number of effective CPUs (excluding specialized CPUs)  # noqa: E501

        :return: The effective_cpus of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._effective_cpus

    @effective_cpus.setter
    def effective_cpus(self, effective_cpus):
        """Sets the effective_cpus of this V0040Node.

        Number of effective CPUs (excluding specialized CPUs)  # noqa: E501

        :param effective_cpus: The effective_cpus of this V0040Node.  # noqa: E501
        :type: int
        """

        self._effective_cpus = effective_cpus

    @property
    def specialized_cpus(self):
        """Gets the specialized_cpus of this V0040Node.  # noqa: E501

        Abstract CPU IDs on this node reserved for exclusive use by slurmd and slurmstepd  # noqa: E501

        :return: The specialized_cpus of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._specialized_cpus

    @specialized_cpus.setter
    def specialized_cpus(self, specialized_cpus):
        """Sets the specialized_cpus of this V0040Node.

        Abstract CPU IDs on this node reserved for exclusive use by slurmd and slurmstepd  # noqa: E501

        :param specialized_cpus: The specialized_cpus of this V0040Node.  # noqa: E501
        :type: str
        """

        self._specialized_cpus = specialized_cpus

    @property
    def energy(self):
        """Gets the energy of this V0040Node.  # noqa: E501


        :return: The energy of this V0040Node.  # noqa: E501
        :rtype: V0040AcctGatherEnergy
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this V0040Node.


        :param energy: The energy of this V0040Node.  # noqa: E501
        :type: V0040AcctGatherEnergy
        """

        self._energy = energy

    @property
    def external_sensors(self):
        """Gets the external_sensors of this V0040Node.  # noqa: E501

        removed field  # noqa: E501

        :return: The external_sensors of this V0040Node.  # noqa: E501
        :rtype: object
        """
        return self._external_sensors

    @external_sensors.setter
    def external_sensors(self, external_sensors):
        """Sets the external_sensors of this V0040Node.

        removed field  # noqa: E501

        :param external_sensors: The external_sensors of this V0040Node.  # noqa: E501
        :type: object
        """

        self._external_sensors = external_sensors

    @property
    def extra(self):
        """Gets the extra of this V0040Node.  # noqa: E501

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :return: The extra of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this V0040Node.

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :param extra: The extra of this V0040Node.  # noqa: E501
        :type: str
        """

        self._extra = extra

    @property
    def power(self):
        """Gets the power of this V0040Node.  # noqa: E501

        removed field  # noqa: E501

        :return: The power of this V0040Node.  # noqa: E501
        :rtype: object
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this V0040Node.

        removed field  # noqa: E501

        :param power: The power of this V0040Node.  # noqa: E501
        :type: object
        """

        self._power = power

    @property
    def features(self):
        """Gets the features of this V0040Node.  # noqa: E501


        :return: The features of this V0040Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this V0040Node.


        :param features: The features of this V0040Node.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def active_features(self):
        """Gets the active_features of this V0040Node.  # noqa: E501


        :return: The active_features of this V0040Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._active_features

    @active_features.setter
    def active_features(self, active_features):
        """Sets the active_features of this V0040Node.


        :param active_features: The active_features of this V0040Node.  # noqa: E501
        :type: list[str]
        """

        self._active_features = active_features

    @property
    def gres(self):
        """Gets the gres of this V0040Node.  # noqa: E501

        Generic resources  # noqa: E501

        :return: The gres of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._gres

    @gres.setter
    def gres(self, gres):
        """Sets the gres of this V0040Node.

        Generic resources  # noqa: E501

        :param gres: The gres of this V0040Node.  # noqa: E501
        :type: str
        """

        self._gres = gres

    @property
    def gres_drained(self):
        """Gets the gres_drained of this V0040Node.  # noqa: E501

        Drained generic resources  # noqa: E501

        :return: The gres_drained of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._gres_drained

    @gres_drained.setter
    def gres_drained(self, gres_drained):
        """Sets the gres_drained of this V0040Node.

        Drained generic resources  # noqa: E501

        :param gres_drained: The gres_drained of this V0040Node.  # noqa: E501
        :type: str
        """

        self._gres_drained = gres_drained

    @property
    def gres_used(self):
        """Gets the gres_used of this V0040Node.  # noqa: E501

        Generic resources currently in use  # noqa: E501

        :return: The gres_used of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._gres_used

    @gres_used.setter
    def gres_used(self, gres_used):
        """Sets the gres_used of this V0040Node.

        Generic resources currently in use  # noqa: E501

        :param gres_used: The gres_used of this V0040Node.  # noqa: E501
        :type: str
        """

        self._gres_used = gres_used

    @property
    def instance_id(self):
        """Gets the instance_id of this V0040Node.  # noqa: E501

        Cloud instance ID  # noqa: E501

        :return: The instance_id of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this V0040Node.

        Cloud instance ID  # noqa: E501

        :param instance_id: The instance_id of this V0040Node.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def instance_type(self):
        """Gets the instance_type of this V0040Node.  # noqa: E501

        Cloud instance type  # noqa: E501

        :return: The instance_type of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this V0040Node.

        Cloud instance type  # noqa: E501

        :param instance_type: The instance_type of this V0040Node.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def last_busy(self):
        """Gets the last_busy of this V0040Node.  # noqa: E501


        :return: The last_busy of this V0040Node.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._last_busy

    @last_busy.setter
    def last_busy(self, last_busy):
        """Sets the last_busy of this V0040Node.


        :param last_busy: The last_busy of this V0040Node.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._last_busy = last_busy

    @property
    def mcs_label(self):
        """Gets the mcs_label of this V0040Node.  # noqa: E501

        Multi-Category Security label  # noqa: E501

        :return: The mcs_label of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._mcs_label

    @mcs_label.setter
    def mcs_label(self, mcs_label):
        """Sets the mcs_label of this V0040Node.

        Multi-Category Security label  # noqa: E501

        :param mcs_label: The mcs_label of this V0040Node.  # noqa: E501
        :type: str
        """

        self._mcs_label = mcs_label

    @property
    def specialized_memory(self):
        """Gets the specialized_memory of this V0040Node.  # noqa: E501

        Combined memory limit, in MB, for Slurm compute node daemons  # noqa: E501

        :return: The specialized_memory of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._specialized_memory

    @specialized_memory.setter
    def specialized_memory(self, specialized_memory):
        """Sets the specialized_memory of this V0040Node.

        Combined memory limit, in MB, for Slurm compute node daemons  # noqa: E501

        :param specialized_memory: The specialized_memory of this V0040Node.  # noqa: E501
        :type: int
        """

        self._specialized_memory = specialized_memory

    @property
    def name(self):
        """Gets the name of this V0040Node.  # noqa: E501

        NodeName  # noqa: E501

        :return: The name of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040Node.

        NodeName  # noqa: E501

        :param name: The name of this V0040Node.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def next_state_after_reboot(self):
        """Gets the next_state_after_reboot of this V0040Node.  # noqa: E501

        The state the node will be assigned after rebooting  # noqa: E501

        :return: The next_state_after_reboot of this V0040Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._next_state_after_reboot

    @next_state_after_reboot.setter
    def next_state_after_reboot(self, next_state_after_reboot):
        """Sets the next_state_after_reboot of this V0040Node.

        The state the node will be assigned after rebooting  # noqa: E501

        :param next_state_after_reboot: The next_state_after_reboot of this V0040Node.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["INVALID", "UNKNOWN", "DOWN", "IDLE", "ALLOCATED", "ERROR", "MIXED", "FUTURE", "RESERVED", "UNDRAIN", "CLOUD", "RESUME", "DRAIN", "COMPLETING", "NOT_RESPONDING", "POWERED_DOWN", "FAIL", "POWERING_UP", "MAINTENANCE", "REBOOT_REQUESTED", "REBOOT_CANCELED", "POWERING_DOWN", "DYNAMIC_FUTURE", "REBOOT_ISSUED", "PLANNED", "INVALID_REG", "POWER_DOWN", "POWER_UP", "POWER_DRAIN", "DYNAMIC_NORM"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(next_state_after_reboot).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `next_state_after_reboot` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(next_state_after_reboot) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._next_state_after_reboot = next_state_after_reboot

    @property
    def address(self):
        """Gets the address of this V0040Node.  # noqa: E501

        NodeAddr, used to establish a communication path  # noqa: E501

        :return: The address of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this V0040Node.

        NodeAddr, used to establish a communication path  # noqa: E501

        :param address: The address of this V0040Node.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def hostname(self):
        """Gets the hostname of this V0040Node.  # noqa: E501

        NodeHostname  # noqa: E501

        :return: The hostname of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this V0040Node.

        NodeHostname  # noqa: E501

        :param hostname: The hostname of this V0040Node.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def state(self):
        """Gets the state of this V0040Node.  # noqa: E501

        Node state(s) applicable to this node  # noqa: E501

        :return: The state of this V0040Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V0040Node.

        Node state(s) applicable to this node  # noqa: E501

        :param state: The state of this V0040Node.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["INVALID", "UNKNOWN", "DOWN", "IDLE", "ALLOCATED", "ERROR", "MIXED", "FUTURE", "RESERVED", "UNDRAIN", "CLOUD", "RESUME", "DRAIN", "COMPLETING", "NOT_RESPONDING", "POWERED_DOWN", "FAIL", "POWERING_UP", "MAINTENANCE", "REBOOT_REQUESTED", "REBOOT_CANCELED", "POWERING_DOWN", "DYNAMIC_FUTURE", "REBOOT_ISSUED", "PLANNED", "INVALID_REG", "POWER_DOWN", "POWER_UP", "POWER_DRAIN", "DYNAMIC_NORM"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(state).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `state` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(state) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._state = state

    @property
    def operating_system(self):
        """Gets the operating_system of this V0040Node.  # noqa: E501

        Operating system reported by the node  # noqa: E501

        :return: The operating_system of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this V0040Node.

        Operating system reported by the node  # noqa: E501

        :param operating_system: The operating_system of this V0040Node.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def owner(self):
        """Gets the owner of this V0040Node.  # noqa: E501

        User allowed to run jobs on this node (unset if no restriction)  # noqa: E501

        :return: The owner of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this V0040Node.

        User allowed to run jobs on this node (unset if no restriction)  # noqa: E501

        :param owner: The owner of this V0040Node.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def partitions(self):
        """Gets the partitions of this V0040Node.  # noqa: E501


        :return: The partitions of this V0040Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this V0040Node.


        :param partitions: The partitions of this V0040Node.  # noqa: E501
        :type: list[str]
        """

        self._partitions = partitions

    @property
    def port(self):
        """Gets the port of this V0040Node.  # noqa: E501

        TCP port number of the slurmd  # noqa: E501

        :return: The port of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this V0040Node.

        TCP port number of the slurmd  # noqa: E501

        :param port: The port of this V0040Node.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def real_memory(self):
        """Gets the real_memory of this V0040Node.  # noqa: E501

        Total memory in MB on the node  # noqa: E501

        :return: The real_memory of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._real_memory

    @real_memory.setter
    def real_memory(self, real_memory):
        """Sets the real_memory of this V0040Node.

        Total memory in MB on the node  # noqa: E501

        :param real_memory: The real_memory of this V0040Node.  # noqa: E501
        :type: int
        """

        self._real_memory = real_memory

    @property
    def comment(self):
        """Gets the comment of this V0040Node.  # noqa: E501

        Arbitrary comment  # noqa: E501

        :return: The comment of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this V0040Node.

        Arbitrary comment  # noqa: E501

        :param comment: The comment of this V0040Node.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def reason(self):
        """Gets the reason of this V0040Node.  # noqa: E501

        Describes why the node is in a \"DOWN\", \"DRAINED\", \"DRAINING\", \"FAILING\" or \"FAIL\" state  # noqa: E501

        :return: The reason of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this V0040Node.

        Describes why the node is in a \"DOWN\", \"DRAINED\", \"DRAINING\", \"FAILING\" or \"FAIL\" state  # noqa: E501

        :param reason: The reason of this V0040Node.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def reason_changed_at(self):
        """Gets the reason_changed_at of this V0040Node.  # noqa: E501


        :return: The reason_changed_at of this V0040Node.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._reason_changed_at

    @reason_changed_at.setter
    def reason_changed_at(self, reason_changed_at):
        """Sets the reason_changed_at of this V0040Node.


        :param reason_changed_at: The reason_changed_at of this V0040Node.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._reason_changed_at = reason_changed_at

    @property
    def reason_set_by_user(self):
        """Gets the reason_set_by_user of this V0040Node.  # noqa: E501

        User who set the reason  # noqa: E501

        :return: The reason_set_by_user of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._reason_set_by_user

    @reason_set_by_user.setter
    def reason_set_by_user(self, reason_set_by_user):
        """Sets the reason_set_by_user of this V0040Node.

        User who set the reason  # noqa: E501

        :param reason_set_by_user: The reason_set_by_user of this V0040Node.  # noqa: E501
        :type: str
        """

        self._reason_set_by_user = reason_set_by_user

    @property
    def resume_after(self):
        """Gets the resume_after of this V0040Node.  # noqa: E501


        :return: The resume_after of this V0040Node.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._resume_after

    @resume_after.setter
    def resume_after(self, resume_after):
        """Sets the resume_after of this V0040Node.


        :param resume_after: The resume_after of this V0040Node.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._resume_after = resume_after

    @property
    def reservation(self):
        """Gets the reservation of this V0040Node.  # noqa: E501

        Name of reservation containing this node  # noqa: E501

        :return: The reservation of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this V0040Node.

        Name of reservation containing this node  # noqa: E501

        :param reservation: The reservation of this V0040Node.  # noqa: E501
        :type: str
        """

        self._reservation = reservation

    @property
    def alloc_memory(self):
        """Gets the alloc_memory of this V0040Node.  # noqa: E501

        Total memory in MB currently allocated for jobs  # noqa: E501

        :return: The alloc_memory of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._alloc_memory

    @alloc_memory.setter
    def alloc_memory(self, alloc_memory):
        """Sets the alloc_memory of this V0040Node.

        Total memory in MB currently allocated for jobs  # noqa: E501

        :param alloc_memory: The alloc_memory of this V0040Node.  # noqa: E501
        :type: int
        """

        self._alloc_memory = alloc_memory

    @property
    def alloc_cpus(self):
        """Gets the alloc_cpus of this V0040Node.  # noqa: E501

        Total number of CPUs currently allocated for jobs  # noqa: E501

        :return: The alloc_cpus of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._alloc_cpus

    @alloc_cpus.setter
    def alloc_cpus(self, alloc_cpus):
        """Sets the alloc_cpus of this V0040Node.

        Total number of CPUs currently allocated for jobs  # noqa: E501

        :param alloc_cpus: The alloc_cpus of this V0040Node.  # noqa: E501
        :type: int
        """

        self._alloc_cpus = alloc_cpus

    @property
    def alloc_idle_cpus(self):
        """Gets the alloc_idle_cpus of this V0040Node.  # noqa: E501

        Total number of idle CPUs  # noqa: E501

        :return: The alloc_idle_cpus of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._alloc_idle_cpus

    @alloc_idle_cpus.setter
    def alloc_idle_cpus(self, alloc_idle_cpus):
        """Sets the alloc_idle_cpus of this V0040Node.

        Total number of idle CPUs  # noqa: E501

        :param alloc_idle_cpus: The alloc_idle_cpus of this V0040Node.  # noqa: E501
        :type: int
        """

        self._alloc_idle_cpus = alloc_idle_cpus

    @property
    def tres_used(self):
        """Gets the tres_used of this V0040Node.  # noqa: E501

        Trackable resources currently allocated for jobs  # noqa: E501

        :return: The tres_used of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._tres_used

    @tres_used.setter
    def tres_used(self, tres_used):
        """Sets the tres_used of this V0040Node.

        Trackable resources currently allocated for jobs  # noqa: E501

        :param tres_used: The tres_used of this V0040Node.  # noqa: E501
        :type: str
        """

        self._tres_used = tres_used

    @property
    def tres_weighted(self):
        """Gets the tres_weighted of this V0040Node.  # noqa: E501

        Weighted number of billable trackable resources allocated  # noqa: E501

        :return: The tres_weighted of this V0040Node.  # noqa: E501
        :rtype: float
        """
        return self._tres_weighted

    @tres_weighted.setter
    def tres_weighted(self, tres_weighted):
        """Sets the tres_weighted of this V0040Node.

        Weighted number of billable trackable resources allocated  # noqa: E501

        :param tres_weighted: The tres_weighted of this V0040Node.  # noqa: E501
        :type: float
        """

        self._tres_weighted = tres_weighted

    @property
    def slurmd_start_time(self):
        """Gets the slurmd_start_time of this V0040Node.  # noqa: E501


        :return: The slurmd_start_time of this V0040Node.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._slurmd_start_time

    @slurmd_start_time.setter
    def slurmd_start_time(self, slurmd_start_time):
        """Sets the slurmd_start_time of this V0040Node.


        :param slurmd_start_time: The slurmd_start_time of this V0040Node.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._slurmd_start_time = slurmd_start_time

    @property
    def sockets(self):
        """Gets the sockets of this V0040Node.  # noqa: E501

        Number of physical processor sockets/chips on the node  # noqa: E501

        :return: The sockets of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._sockets

    @sockets.setter
    def sockets(self, sockets):
        """Sets the sockets of this V0040Node.

        Number of physical processor sockets/chips on the node  # noqa: E501

        :param sockets: The sockets of this V0040Node.  # noqa: E501
        :type: int
        """

        self._sockets = sockets

    @property
    def threads(self):
        """Gets the threads of this V0040Node.  # noqa: E501

        Number of logical threads in a single physical core  # noqa: E501

        :return: The threads of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """Sets the threads of this V0040Node.

        Number of logical threads in a single physical core  # noqa: E501

        :param threads: The threads of this V0040Node.  # noqa: E501
        :type: int
        """

        self._threads = threads

    @property
    def temporary_disk(self):
        """Gets the temporary_disk of this V0040Node.  # noqa: E501

        Total size in MB of temporary disk storage in TmpFS  # noqa: E501

        :return: The temporary_disk of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._temporary_disk

    @temporary_disk.setter
    def temporary_disk(self, temporary_disk):
        """Sets the temporary_disk of this V0040Node.

        Total size in MB of temporary disk storage in TmpFS  # noqa: E501

        :param temporary_disk: The temporary_disk of this V0040Node.  # noqa: E501
        :type: int
        """

        self._temporary_disk = temporary_disk

    @property
    def weight(self):
        """Gets the weight of this V0040Node.  # noqa: E501

        Weight of the node for scheduling purposes  # noqa: E501

        :return: The weight of this V0040Node.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this V0040Node.

        Weight of the node for scheduling purposes  # noqa: E501

        :param weight: The weight of this V0040Node.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def tres(self):
        """Gets the tres of this V0040Node.  # noqa: E501

        Configured trackable resources  # noqa: E501

        :return: The tres of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._tres

    @tres.setter
    def tres(self, tres):
        """Sets the tres of this V0040Node.

        Configured trackable resources  # noqa: E501

        :param tres: The tres of this V0040Node.  # noqa: E501
        :type: str
        """

        self._tres = tres

    @property
    def version(self):
        """Gets the version of this V0040Node.  # noqa: E501

        Slurmd version  # noqa: E501

        :return: The version of this V0040Node.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V0040Node.

        Slurmd version  # noqa: E501

        :param version: The version of this V0040Node.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040Node):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040Node):
            return True

        return self.to_dict() != other.to_dict()
