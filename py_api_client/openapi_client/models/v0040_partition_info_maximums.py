# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040PartitionInfoMaximums(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpus_per_node': 'V0040Uint32NoVal',
        'cpus_per_socket': 'V0040Uint32NoVal',
        'memory_per_cpu': 'int',
        'partition_memory_per_cpu': 'V0040Uint64NoVal',
        'partition_memory_per_node': 'V0040Uint64NoVal',
        'nodes': 'V0040Uint32NoVal',
        'shares': 'int',
        'oversubscribe': 'V0040PartitionInfoMaximumsOversubscribe',
        'time': 'V0040Uint32NoVal',
        'over_time_limit': 'V0040Uint16NoVal'
    }

    attribute_map = {
        'cpus_per_node': 'cpus_per_node',
        'cpus_per_socket': 'cpus_per_socket',
        'memory_per_cpu': 'memory_per_cpu',
        'partition_memory_per_cpu': 'partition_memory_per_cpu',
        'partition_memory_per_node': 'partition_memory_per_node',
        'nodes': 'nodes',
        'shares': 'shares',
        'oversubscribe': 'oversubscribe',
        'time': 'time',
        'over_time_limit': 'over_time_limit'
    }

    def __init__(self, cpus_per_node=None, cpus_per_socket=None, memory_per_cpu=None, partition_memory_per_cpu=None, partition_memory_per_node=None, nodes=None, shares=None, oversubscribe=None, time=None, over_time_limit=None, local_vars_configuration=None):  # noqa: E501
        """V0040PartitionInfoMaximums - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpus_per_node = None
        self._cpus_per_socket = None
        self._memory_per_cpu = None
        self._partition_memory_per_cpu = None
        self._partition_memory_per_node = None
        self._nodes = None
        self._shares = None
        self._oversubscribe = None
        self._time = None
        self._over_time_limit = None
        self.discriminator = None

        if cpus_per_node is not None:
            self.cpus_per_node = cpus_per_node
        if cpus_per_socket is not None:
            self.cpus_per_socket = cpus_per_socket
        if memory_per_cpu is not None:
            self.memory_per_cpu = memory_per_cpu
        if partition_memory_per_cpu is not None:
            self.partition_memory_per_cpu = partition_memory_per_cpu
        if partition_memory_per_node is not None:
            self.partition_memory_per_node = partition_memory_per_node
        if nodes is not None:
            self.nodes = nodes
        if shares is not None:
            self.shares = shares
        if oversubscribe is not None:
            self.oversubscribe = oversubscribe
        if time is not None:
            self.time = time
        if over_time_limit is not None:
            self.over_time_limit = over_time_limit

    @property
    def cpus_per_node(self):
        """Gets the cpus_per_node of this V0040PartitionInfoMaximums.  # noqa: E501


        :return: The cpus_per_node of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._cpus_per_node

    @cpus_per_node.setter
    def cpus_per_node(self, cpus_per_node):
        """Sets the cpus_per_node of this V0040PartitionInfoMaximums.


        :param cpus_per_node: The cpus_per_node of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._cpus_per_node = cpus_per_node

    @property
    def cpus_per_socket(self):
        """Gets the cpus_per_socket of this V0040PartitionInfoMaximums.  # noqa: E501


        :return: The cpus_per_socket of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._cpus_per_socket

    @cpus_per_socket.setter
    def cpus_per_socket(self, cpus_per_socket):
        """Sets the cpus_per_socket of this V0040PartitionInfoMaximums.


        :param cpus_per_socket: The cpus_per_socket of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._cpus_per_socket = cpus_per_socket

    @property
    def memory_per_cpu(self):
        """Gets the memory_per_cpu of this V0040PartitionInfoMaximums.  # noqa: E501

        MaxMemPerCPU or MaxMemPerNode  # noqa: E501

        :return: The memory_per_cpu of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: int
        """
        return self._memory_per_cpu

    @memory_per_cpu.setter
    def memory_per_cpu(self, memory_per_cpu):
        """Sets the memory_per_cpu of this V0040PartitionInfoMaximums.

        MaxMemPerCPU or MaxMemPerNode  # noqa: E501

        :param memory_per_cpu: The memory_per_cpu of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: int
        """

        self._memory_per_cpu = memory_per_cpu

    @property
    def partition_memory_per_cpu(self):
        """Gets the partition_memory_per_cpu of this V0040PartitionInfoMaximums.  # noqa: E501


        :return: The partition_memory_per_cpu of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._partition_memory_per_cpu

    @partition_memory_per_cpu.setter
    def partition_memory_per_cpu(self, partition_memory_per_cpu):
        """Sets the partition_memory_per_cpu of this V0040PartitionInfoMaximums.


        :param partition_memory_per_cpu: The partition_memory_per_cpu of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._partition_memory_per_cpu = partition_memory_per_cpu

    @property
    def partition_memory_per_node(self):
        """Gets the partition_memory_per_node of this V0040PartitionInfoMaximums.  # noqa: E501


        :return: The partition_memory_per_node of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._partition_memory_per_node

    @partition_memory_per_node.setter
    def partition_memory_per_node(self, partition_memory_per_node):
        """Sets the partition_memory_per_node of this V0040PartitionInfoMaximums.


        :param partition_memory_per_node: The partition_memory_per_node of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._partition_memory_per_node = partition_memory_per_node

    @property
    def nodes(self):
        """Gets the nodes of this V0040PartitionInfoMaximums.  # noqa: E501


        :return: The nodes of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this V0040PartitionInfoMaximums.


        :param nodes: The nodes of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._nodes = nodes

    @property
    def shares(self):
        """Gets the shares of this V0040PartitionInfoMaximums.  # noqa: E501

        OverSubscribe  # noqa: E501

        :return: The shares of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: int
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this V0040PartitionInfoMaximums.

        OverSubscribe  # noqa: E501

        :param shares: The shares of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: int
        """

        self._shares = shares

    @property
    def oversubscribe(self):
        """Gets the oversubscribe of this V0040PartitionInfoMaximums.  # noqa: E501


        :return: The oversubscribe of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: V0040PartitionInfoMaximumsOversubscribe
        """
        return self._oversubscribe

    @oversubscribe.setter
    def oversubscribe(self, oversubscribe):
        """Sets the oversubscribe of this V0040PartitionInfoMaximums.


        :param oversubscribe: The oversubscribe of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: V0040PartitionInfoMaximumsOversubscribe
        """

        self._oversubscribe = oversubscribe

    @property
    def time(self):
        """Gets the time of this V0040PartitionInfoMaximums.  # noqa: E501


        :return: The time of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this V0040PartitionInfoMaximums.


        :param time: The time of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._time = time

    @property
    def over_time_limit(self):
        """Gets the over_time_limit of this V0040PartitionInfoMaximums.  # noqa: E501


        :return: The over_time_limit of this V0040PartitionInfoMaximums.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._over_time_limit

    @over_time_limit.setter
    def over_time_limit(self, over_time_limit):
        """Sets the over_time_limit of this V0040PartitionInfoMaximums.


        :param over_time_limit: The over_time_limit of this V0040PartitionInfoMaximums.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._over_time_limit = over_time_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040PartitionInfoMaximums):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040PartitionInfoMaximums):
            return True

        return self.to_dict() != other.to_dict()
