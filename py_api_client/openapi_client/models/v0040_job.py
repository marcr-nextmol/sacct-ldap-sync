# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account': 'str',
        'comment': 'V0040JobComment',
        'allocation_nodes': 'int',
        'array': 'V0040JobArray',
        'association': 'V0040AssocShort',
        'block': 'str',
        'cluster': 'str',
        'constraints': 'str',
        'container': 'str',
        'derived_exit_code': 'V0040ProcessExitCodeVerbose',
        'time': 'V0040JobTime',
        'exit_code': 'V0040ProcessExitCodeVerbose',
        'extra': 'str',
        'failed_node': 'str',
        'flags': 'list[str]',
        'group': 'str',
        'het': 'V0040JobHet',
        'job_id': 'int',
        'name': 'str',
        'licenses': 'str',
        'mcs': 'V0040JobMcs',
        'nodes': 'str',
        'partition': 'str',
        'hold': 'bool',
        'priority': 'V0040Uint32NoVal',
        'qos': 'str',
        'required': 'V0040JobRequired',
        'kill_request_user': 'str',
        'reservation': 'V0040JobReservation',
        'script': 'str',
        'state': 'V0040JobState',
        'steps': 'list[V0040Step]',
        'submit_line': 'str',
        'tres': 'V0040JobTres',
        'used_gres': 'str',
        'user': 'str',
        'wckey': 'V0040WckeyTagStruct',
        'working_directory': 'str'
    }

    attribute_map = {
        'account': 'account',
        'comment': 'comment',
        'allocation_nodes': 'allocation_nodes',
        'array': 'array',
        'association': 'association',
        'block': 'block',
        'cluster': 'cluster',
        'constraints': 'constraints',
        'container': 'container',
        'derived_exit_code': 'derived_exit_code',
        'time': 'time',
        'exit_code': 'exit_code',
        'extra': 'extra',
        'failed_node': 'failed_node',
        'flags': 'flags',
        'group': 'group',
        'het': 'het',
        'job_id': 'job_id',
        'name': 'name',
        'licenses': 'licenses',
        'mcs': 'mcs',
        'nodes': 'nodes',
        'partition': 'partition',
        'hold': 'hold',
        'priority': 'priority',
        'qos': 'qos',
        'required': 'required',
        'kill_request_user': 'kill_request_user',
        'reservation': 'reservation',
        'script': 'script',
        'state': 'state',
        'steps': 'steps',
        'submit_line': 'submit_line',
        'tres': 'tres',
        'used_gres': 'used_gres',
        'user': 'user',
        'wckey': 'wckey',
        'working_directory': 'working_directory'
    }

    def __init__(self, account=None, comment=None, allocation_nodes=None, array=None, association=None, block=None, cluster=None, constraints=None, container=None, derived_exit_code=None, time=None, exit_code=None, extra=None, failed_node=None, flags=None, group=None, het=None, job_id=None, name=None, licenses=None, mcs=None, nodes=None, partition=None, hold=None, priority=None, qos=None, required=None, kill_request_user=None, reservation=None, script=None, state=None, steps=None, submit_line=None, tres=None, used_gres=None, user=None, wckey=None, working_directory=None, local_vars_configuration=None):  # noqa: E501
        """V0040Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account = None
        self._comment = None
        self._allocation_nodes = None
        self._array = None
        self._association = None
        self._block = None
        self._cluster = None
        self._constraints = None
        self._container = None
        self._derived_exit_code = None
        self._time = None
        self._exit_code = None
        self._extra = None
        self._failed_node = None
        self._flags = None
        self._group = None
        self._het = None
        self._job_id = None
        self._name = None
        self._licenses = None
        self._mcs = None
        self._nodes = None
        self._partition = None
        self._hold = None
        self._priority = None
        self._qos = None
        self._required = None
        self._kill_request_user = None
        self._reservation = None
        self._script = None
        self._state = None
        self._steps = None
        self._submit_line = None
        self._tres = None
        self._used_gres = None
        self._user = None
        self._wckey = None
        self._working_directory = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if comment is not None:
            self.comment = comment
        if allocation_nodes is not None:
            self.allocation_nodes = allocation_nodes
        if array is not None:
            self.array = array
        if association is not None:
            self.association = association
        if block is not None:
            self.block = block
        if cluster is not None:
            self.cluster = cluster
        if constraints is not None:
            self.constraints = constraints
        if container is not None:
            self.container = container
        if derived_exit_code is not None:
            self.derived_exit_code = derived_exit_code
        if time is not None:
            self.time = time
        if exit_code is not None:
            self.exit_code = exit_code
        if extra is not None:
            self.extra = extra
        if failed_node is not None:
            self.failed_node = failed_node
        if flags is not None:
            self.flags = flags
        if group is not None:
            self.group = group
        if het is not None:
            self.het = het
        if job_id is not None:
            self.job_id = job_id
        if name is not None:
            self.name = name
        if licenses is not None:
            self.licenses = licenses
        if mcs is not None:
            self.mcs = mcs
        if nodes is not None:
            self.nodes = nodes
        if partition is not None:
            self.partition = partition
        if hold is not None:
            self.hold = hold
        if priority is not None:
            self.priority = priority
        if qos is not None:
            self.qos = qos
        if required is not None:
            self.required = required
        if kill_request_user is not None:
            self.kill_request_user = kill_request_user
        if reservation is not None:
            self.reservation = reservation
        if script is not None:
            self.script = script
        if state is not None:
            self.state = state
        if steps is not None:
            self.steps = steps
        if submit_line is not None:
            self.submit_line = submit_line
        if tres is not None:
            self.tres = tres
        if used_gres is not None:
            self.used_gres = used_gres
        if user is not None:
            self.user = user
        if wckey is not None:
            self.wckey = wckey
        if working_directory is not None:
            self.working_directory = working_directory

    @property
    def account(self):
        """Gets the account of this V0040Job.  # noqa: E501

        Account the job ran under  # noqa: E501

        :return: The account of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this V0040Job.

        Account the job ran under  # noqa: E501

        :param account: The account of this V0040Job.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def comment(self):
        """Gets the comment of this V0040Job.  # noqa: E501


        :return: The comment of this V0040Job.  # noqa: E501
        :rtype: V0040JobComment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this V0040Job.


        :param comment: The comment of this V0040Job.  # noqa: E501
        :type: V0040JobComment
        """

        self._comment = comment

    @property
    def allocation_nodes(self):
        """Gets the allocation_nodes of this V0040Job.  # noqa: E501

        List of nodes allocated to the job  # noqa: E501

        :return: The allocation_nodes of this V0040Job.  # noqa: E501
        :rtype: int
        """
        return self._allocation_nodes

    @allocation_nodes.setter
    def allocation_nodes(self, allocation_nodes):
        """Sets the allocation_nodes of this V0040Job.

        List of nodes allocated to the job  # noqa: E501

        :param allocation_nodes: The allocation_nodes of this V0040Job.  # noqa: E501
        :type: int
        """

        self._allocation_nodes = allocation_nodes

    @property
    def array(self):
        """Gets the array of this V0040Job.  # noqa: E501


        :return: The array of this V0040Job.  # noqa: E501
        :rtype: V0040JobArray
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this V0040Job.


        :param array: The array of this V0040Job.  # noqa: E501
        :type: V0040JobArray
        """

        self._array = array

    @property
    def association(self):
        """Gets the association of this V0040Job.  # noqa: E501


        :return: The association of this V0040Job.  # noqa: E501
        :rtype: V0040AssocShort
        """
        return self._association

    @association.setter
    def association(self, association):
        """Sets the association of this V0040Job.


        :param association: The association of this V0040Job.  # noqa: E501
        :type: V0040AssocShort
        """

        self._association = association

    @property
    def block(self):
        """Gets the block of this V0040Job.  # noqa: E501

        The name of the block to be used (used with Blue Gene systems)  # noqa: E501

        :return: The block of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this V0040Job.

        The name of the block to be used (used with Blue Gene systems)  # noqa: E501

        :param block: The block of this V0040Job.  # noqa: E501
        :type: str
        """

        self._block = block

    @property
    def cluster(self):
        """Gets the cluster of this V0040Job.  # noqa: E501

        Cluster name  # noqa: E501

        :return: The cluster of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this V0040Job.

        Cluster name  # noqa: E501

        :param cluster: The cluster of this V0040Job.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def constraints(self):
        """Gets the constraints of this V0040Job.  # noqa: E501

        Feature(s) the job requested as a constraint  # noqa: E501

        :return: The constraints of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this V0040Job.

        Feature(s) the job requested as a constraint  # noqa: E501

        :param constraints: The constraints of this V0040Job.  # noqa: E501
        :type: str
        """

        self._constraints = constraints

    @property
    def container(self):
        """Gets the container of this V0040Job.  # noqa: E501

        Absolute path to OCI container bundle  # noqa: E501

        :return: The container of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this V0040Job.

        Absolute path to OCI container bundle  # noqa: E501

        :param container: The container of this V0040Job.  # noqa: E501
        :type: str
        """

        self._container = container

    @property
    def derived_exit_code(self):
        """Gets the derived_exit_code of this V0040Job.  # noqa: E501


        :return: The derived_exit_code of this V0040Job.  # noqa: E501
        :rtype: V0040ProcessExitCodeVerbose
        """
        return self._derived_exit_code

    @derived_exit_code.setter
    def derived_exit_code(self, derived_exit_code):
        """Sets the derived_exit_code of this V0040Job.


        :param derived_exit_code: The derived_exit_code of this V0040Job.  # noqa: E501
        :type: V0040ProcessExitCodeVerbose
        """

        self._derived_exit_code = derived_exit_code

    @property
    def time(self):
        """Gets the time of this V0040Job.  # noqa: E501


        :return: The time of this V0040Job.  # noqa: E501
        :rtype: V0040JobTime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this V0040Job.


        :param time: The time of this V0040Job.  # noqa: E501
        :type: V0040JobTime
        """

        self._time = time

    @property
    def exit_code(self):
        """Gets the exit_code of this V0040Job.  # noqa: E501


        :return: The exit_code of this V0040Job.  # noqa: E501
        :rtype: V0040ProcessExitCodeVerbose
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this V0040Job.


        :param exit_code: The exit_code of this V0040Job.  # noqa: E501
        :type: V0040ProcessExitCodeVerbose
        """

        self._exit_code = exit_code

    @property
    def extra(self):
        """Gets the extra of this V0040Job.  # noqa: E501

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :return: The extra of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this V0040Job.

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :param extra: The extra of this V0040Job.  # noqa: E501
        :type: str
        """

        self._extra = extra

    @property
    def failed_node(self):
        """Gets the failed_node of this V0040Job.  # noqa: E501

        Name of node that caused job failure  # noqa: E501

        :return: The failed_node of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._failed_node

    @failed_node.setter
    def failed_node(self, failed_node):
        """Sets the failed_node of this V0040Job.

        Name of node that caused job failure  # noqa: E501

        :param failed_node: The failed_node of this V0040Job.  # noqa: E501
        :type: str
        """

        self._failed_node = failed_node

    @property
    def flags(self):
        """Gets the flags of this V0040Job.  # noqa: E501

        Flags associated with the job  # noqa: E501

        :return: The flags of this V0040Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040Job.

        Flags associated with the job  # noqa: E501

        :param flags: The flags of this V0040Job.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NONE", "CLEAR_SCHEDULING", "NOT_SET", "STARTED_ON_SUBMIT", "STARTED_ON_SCHEDULE", "STARTED_ON_BACKFILL", "START_RECEIVED"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def group(self):
        """Gets the group of this V0040Job.  # noqa: E501

        Group ID of the user that owns the job  # noqa: E501

        :return: The group of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this V0040Job.

        Group ID of the user that owns the job  # noqa: E501

        :param group: The group of this V0040Job.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def het(self):
        """Gets the het of this V0040Job.  # noqa: E501


        :return: The het of this V0040Job.  # noqa: E501
        :rtype: V0040JobHet
        """
        return self._het

    @het.setter
    def het(self, het):
        """Sets the het of this V0040Job.


        :param het: The het of this V0040Job.  # noqa: E501
        :type: V0040JobHet
        """

        self._het = het

    @property
    def job_id(self):
        """Gets the job_id of this V0040Job.  # noqa: E501

        Job ID  # noqa: E501

        :return: The job_id of this V0040Job.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this V0040Job.

        Job ID  # noqa: E501

        :param job_id: The job_id of this V0040Job.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def name(self):
        """Gets the name of this V0040Job.  # noqa: E501

        Job name  # noqa: E501

        :return: The name of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040Job.

        Job name  # noqa: E501

        :param name: The name of this V0040Job.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def licenses(self):
        """Gets the licenses of this V0040Job.  # noqa: E501

        License(s) required by the job  # noqa: E501

        :return: The licenses of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this V0040Job.

        License(s) required by the job  # noqa: E501

        :param licenses: The licenses of this V0040Job.  # noqa: E501
        :type: str
        """

        self._licenses = licenses

    @property
    def mcs(self):
        """Gets the mcs of this V0040Job.  # noqa: E501


        :return: The mcs of this V0040Job.  # noqa: E501
        :rtype: V0040JobMcs
        """
        return self._mcs

    @mcs.setter
    def mcs(self, mcs):
        """Sets the mcs of this V0040Job.


        :param mcs: The mcs of this V0040Job.  # noqa: E501
        :type: V0040JobMcs
        """

        self._mcs = mcs

    @property
    def nodes(self):
        """Gets the nodes of this V0040Job.  # noqa: E501

        Node(s) allocated to the job  # noqa: E501

        :return: The nodes of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this V0040Job.

        Node(s) allocated to the job  # noqa: E501

        :param nodes: The nodes of this V0040Job.  # noqa: E501
        :type: str
        """

        self._nodes = nodes

    @property
    def partition(self):
        """Gets the partition of this V0040Job.  # noqa: E501

        Partition assigned to the job  # noqa: E501

        :return: The partition of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this V0040Job.

        Partition assigned to the job  # noqa: E501

        :param partition: The partition of this V0040Job.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def hold(self):
        """Gets the hold of this V0040Job.  # noqa: E501

        Job held  # noqa: E501

        :return: The hold of this V0040Job.  # noqa: E501
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this V0040Job.

        Job held  # noqa: E501

        :param hold: The hold of this V0040Job.  # noqa: E501
        :type: bool
        """

        self._hold = hold

    @property
    def priority(self):
        """Gets the priority of this V0040Job.  # noqa: E501


        :return: The priority of this V0040Job.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this V0040Job.


        :param priority: The priority of this V0040Job.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._priority = priority

    @property
    def qos(self):
        """Gets the qos of this V0040Job.  # noqa: E501

        Quality of Service assigned to the job  # noqa: E501

        :return: The qos of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this V0040Job.

        Quality of Service assigned to the job  # noqa: E501

        :param qos: The qos of this V0040Job.  # noqa: E501
        :type: str
        """

        self._qos = qos

    @property
    def required(self):
        """Gets the required of this V0040Job.  # noqa: E501


        :return: The required of this V0040Job.  # noqa: E501
        :rtype: V0040JobRequired
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this V0040Job.


        :param required: The required of this V0040Job.  # noqa: E501
        :type: V0040JobRequired
        """

        self._required = required

    @property
    def kill_request_user(self):
        """Gets the kill_request_user of this V0040Job.  # noqa: E501

        User ID that requested termination of the job  # noqa: E501

        :return: The kill_request_user of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._kill_request_user

    @kill_request_user.setter
    def kill_request_user(self, kill_request_user):
        """Sets the kill_request_user of this V0040Job.

        User ID that requested termination of the job  # noqa: E501

        :param kill_request_user: The kill_request_user of this V0040Job.  # noqa: E501
        :type: str
        """

        self._kill_request_user = kill_request_user

    @property
    def reservation(self):
        """Gets the reservation of this V0040Job.  # noqa: E501


        :return: The reservation of this V0040Job.  # noqa: E501
        :rtype: V0040JobReservation
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this V0040Job.


        :param reservation: The reservation of this V0040Job.  # noqa: E501
        :type: V0040JobReservation
        """

        self._reservation = reservation

    @property
    def script(self):
        """Gets the script of this V0040Job.  # noqa: E501

        Job batch script; only the first component in a HetJob is populated or honored  # noqa: E501

        :return: The script of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this V0040Job.

        Job batch script; only the first component in a HetJob is populated or honored  # noqa: E501

        :param script: The script of this V0040Job.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def state(self):
        """Gets the state of this V0040Job.  # noqa: E501


        :return: The state of this V0040Job.  # noqa: E501
        :rtype: V0040JobState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V0040Job.


        :param state: The state of this V0040Job.  # noqa: E501
        :type: V0040JobState
        """

        self._state = state

    @property
    def steps(self):
        """Gets the steps of this V0040Job.  # noqa: E501


        :return: The steps of this V0040Job.  # noqa: E501
        :rtype: list[V0040Step]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this V0040Job.


        :param steps: The steps of this V0040Job.  # noqa: E501
        :type: list[V0040Step]
        """

        self._steps = steps

    @property
    def submit_line(self):
        """Gets the submit_line of this V0040Job.  # noqa: E501

        Command used to submit the job  # noqa: E501

        :return: The submit_line of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._submit_line

    @submit_line.setter
    def submit_line(self, submit_line):
        """Sets the submit_line of this V0040Job.

        Command used to submit the job  # noqa: E501

        :param submit_line: The submit_line of this V0040Job.  # noqa: E501
        :type: str
        """

        self._submit_line = submit_line

    @property
    def tres(self):
        """Gets the tres of this V0040Job.  # noqa: E501


        :return: The tres of this V0040Job.  # noqa: E501
        :rtype: V0040JobTres
        """
        return self._tres

    @tres.setter
    def tres(self, tres):
        """Sets the tres of this V0040Job.


        :param tres: The tres of this V0040Job.  # noqa: E501
        :type: V0040JobTres
        """

        self._tres = tres

    @property
    def used_gres(self):
        """Gets the used_gres of this V0040Job.  # noqa: E501

        Generic resources used by job  # noqa: E501

        :return: The used_gres of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._used_gres

    @used_gres.setter
    def used_gres(self, used_gres):
        """Sets the used_gres of this V0040Job.

        Generic resources used by job  # noqa: E501

        :param used_gres: The used_gres of this V0040Job.  # noqa: E501
        :type: str
        """

        self._used_gres = used_gres

    @property
    def user(self):
        """Gets the user of this V0040Job.  # noqa: E501

        User that owns the job  # noqa: E501

        :return: The user of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V0040Job.

        User that owns the job  # noqa: E501

        :param user: The user of this V0040Job.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def wckey(self):
        """Gets the wckey of this V0040Job.  # noqa: E501


        :return: The wckey of this V0040Job.  # noqa: E501
        :rtype: V0040WckeyTagStruct
        """
        return self._wckey

    @wckey.setter
    def wckey(self, wckey):
        """Sets the wckey of this V0040Job.


        :param wckey: The wckey of this V0040Job.  # noqa: E501
        :type: V0040WckeyTagStruct
        """

        self._wckey = wckey

    @property
    def working_directory(self):
        """Gets the working_directory of this V0040Job.  # noqa: E501

        Path to current working directory  # noqa: E501

        :return: The working_directory of this V0040Job.  # noqa: E501
        :rtype: str
        """
        return self._working_directory

    @working_directory.setter
    def working_directory(self, working_directory):
        """Sets the working_directory of this V0040Job.

        Path to current working directory  # noqa: E501

        :param working_directory: The working_directory of this V0040Job.  # noqa: E501
        :type: str
        """

        self._working_directory = working_directory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040Job):
            return True

        return self.to_dict() != other.to_dict()
