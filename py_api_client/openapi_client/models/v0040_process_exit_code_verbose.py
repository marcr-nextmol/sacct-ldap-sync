# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040ProcessExitCodeVerbose(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'list[str]',
        'return_code': 'V0040Uint32NoVal',
        'signal': 'V0040ProcessExitCodeVerboseSignal'
    }

    attribute_map = {
        'status': 'status',
        'return_code': 'return_code',
        'signal': 'signal'
    }

    def __init__(self, status=None, return_code=None, signal=None, local_vars_configuration=None):  # noqa: E501
        """V0040ProcessExitCodeVerbose - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._return_code = None
        self._signal = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if return_code is not None:
            self.return_code = return_code
        if signal is not None:
            self.signal = signal

    @property
    def status(self):
        """Gets the status of this V0040ProcessExitCodeVerbose.  # noqa: E501

        Status given by return code  # noqa: E501

        :return: The status of this V0040ProcessExitCodeVerbose.  # noqa: E501
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V0040ProcessExitCodeVerbose.

        Status given by return code  # noqa: E501

        :param status: The status of this V0040ProcessExitCodeVerbose.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["INVALID", "PENDING", "SUCCESS", "ERROR", "SIGNALED", "CORE_DUMPED"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(status).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `status` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(status) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._status = status

    @property
    def return_code(self):
        """Gets the return_code of this V0040ProcessExitCodeVerbose.  # noqa: E501


        :return: The return_code of this V0040ProcessExitCodeVerbose.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this V0040ProcessExitCodeVerbose.


        :param return_code: The return_code of this V0040ProcessExitCodeVerbose.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._return_code = return_code

    @property
    def signal(self):
        """Gets the signal of this V0040ProcessExitCodeVerbose.  # noqa: E501


        :return: The signal of this V0040ProcessExitCodeVerbose.  # noqa: E501
        :rtype: V0040ProcessExitCodeVerboseSignal
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this V0040ProcessExitCodeVerbose.


        :param signal: The signal of this V0040ProcessExitCodeVerbose.  # noqa: E501
        :type: V0040ProcessExitCodeVerboseSignal
        """

        self._signal = signal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040ProcessExitCodeVerbose):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040ProcessExitCodeVerbose):
            return True

        return self.to_dict() != other.to_dict()
