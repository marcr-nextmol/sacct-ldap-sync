# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040UserShort(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'adminlevel': 'list[str]',
        'defaultaccount': 'str',
        'defaultwckey': 'str'
    }

    attribute_map = {
        'adminlevel': 'adminlevel',
        'defaultaccount': 'defaultaccount',
        'defaultwckey': 'defaultwckey'
    }

    def __init__(self, adminlevel=None, defaultaccount=None, defaultwckey=None, local_vars_configuration=None):  # noqa: E501
        """V0040UserShort - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._adminlevel = None
        self._defaultaccount = None
        self._defaultwckey = None
        self.discriminator = None

        if adminlevel is not None:
            self.adminlevel = adminlevel
        if defaultaccount is not None:
            self.defaultaccount = defaultaccount
        if defaultwckey is not None:
            self.defaultwckey = defaultwckey

    @property
    def adminlevel(self):
        """Gets the adminlevel of this V0040UserShort.  # noqa: E501

        AdminLevel granted to the user  # noqa: E501

        :return: The adminlevel of this V0040UserShort.  # noqa: E501
        :rtype: list[str]
        """
        return self._adminlevel

    @adminlevel.setter
    def adminlevel(self, adminlevel):
        """Sets the adminlevel of this V0040UserShort.

        AdminLevel granted to the user  # noqa: E501

        :param adminlevel: The adminlevel of this V0040UserShort.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Not Set", "None", "Operator", "Administrator"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(adminlevel).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `adminlevel` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(adminlevel) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._adminlevel = adminlevel

    @property
    def defaultaccount(self):
        """Gets the defaultaccount of this V0040UserShort.  # noqa: E501

        Default account  # noqa: E501

        :return: The defaultaccount of this V0040UserShort.  # noqa: E501
        :rtype: str
        """
        return self._defaultaccount

    @defaultaccount.setter
    def defaultaccount(self, defaultaccount):
        """Sets the defaultaccount of this V0040UserShort.

        Default account  # noqa: E501

        :param defaultaccount: The defaultaccount of this V0040UserShort.  # noqa: E501
        :type: str
        """

        self._defaultaccount = defaultaccount

    @property
    def defaultwckey(self):
        """Gets the defaultwckey of this V0040UserShort.  # noqa: E501

        Default WCKey  # noqa: E501

        :return: The defaultwckey of this V0040UserShort.  # noqa: E501
        :rtype: str
        """
        return self._defaultwckey

    @defaultwckey.setter
    def defaultwckey(self, defaultwckey):
        """Sets the defaultwckey of this V0040UserShort.

        Default WCKey  # noqa: E501

        :param defaultwckey: The defaultwckey of this V0040UserShort.  # noqa: E501
        :type: str
        """

        self._defaultwckey = defaultwckey

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040UserShort):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040UserShort):
            return True

        return self.to_dict() != other.to_dict()
