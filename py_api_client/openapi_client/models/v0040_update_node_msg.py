# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040UpdateNodeMsg(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comment': 'str',
        'cpu_bind': 'int',
        'extra': 'str',
        'features': 'list[str]',
        'features_act': 'list[str]',
        'gres': 'str',
        'address': 'list[str]',
        'hostname': 'list[str]',
        'name': 'list[str]',
        'state': 'list[str]',
        'reason': 'str',
        'reason_uid': 'str',
        'resume_after': 'V0040Uint32NoVal',
        'weight': 'V0040Uint32NoVal'
    }

    attribute_map = {
        'comment': 'comment',
        'cpu_bind': 'cpu_bind',
        'extra': 'extra',
        'features': 'features',
        'features_act': 'features_act',
        'gres': 'gres',
        'address': 'address',
        'hostname': 'hostname',
        'name': 'name',
        'state': 'state',
        'reason': 'reason',
        'reason_uid': 'reason_uid',
        'resume_after': 'resume_after',
        'weight': 'weight'
    }

    def __init__(self, comment=None, cpu_bind=None, extra=None, features=None, features_act=None, gres=None, address=None, hostname=None, name=None, state=None, reason=None, reason_uid=None, resume_after=None, weight=None, local_vars_configuration=None):  # noqa: E501
        """V0040UpdateNodeMsg - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._comment = None
        self._cpu_bind = None
        self._extra = None
        self._features = None
        self._features_act = None
        self._gres = None
        self._address = None
        self._hostname = None
        self._name = None
        self._state = None
        self._reason = None
        self._reason_uid = None
        self._resume_after = None
        self._weight = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if cpu_bind is not None:
            self.cpu_bind = cpu_bind
        if extra is not None:
            self.extra = extra
        if features is not None:
            self.features = features
        if features_act is not None:
            self.features_act = features_act
        if gres is not None:
            self.gres = gres
        if address is not None:
            self.address = address
        if hostname is not None:
            self.hostname = hostname
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if reason is not None:
            self.reason = reason
        if reason_uid is not None:
            self.reason_uid = reason_uid
        if resume_after is not None:
            self.resume_after = resume_after
        if weight is not None:
            self.weight = weight

    @property
    def comment(self):
        """Gets the comment of this V0040UpdateNodeMsg.  # noqa: E501

        Arbitrary comment  # noqa: E501

        :return: The comment of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this V0040UpdateNodeMsg.

        Arbitrary comment  # noqa: E501

        :param comment: The comment of this V0040UpdateNodeMsg.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def cpu_bind(self):
        """Gets the cpu_bind of this V0040UpdateNodeMsg.  # noqa: E501

        Default method for binding tasks to allocated CPUs  # noqa: E501

        :return: The cpu_bind of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: int
        """
        return self._cpu_bind

    @cpu_bind.setter
    def cpu_bind(self, cpu_bind):
        """Sets the cpu_bind of this V0040UpdateNodeMsg.

        Default method for binding tasks to allocated CPUs  # noqa: E501

        :param cpu_bind: The cpu_bind of this V0040UpdateNodeMsg.  # noqa: E501
        :type: int
        """

        self._cpu_bind = cpu_bind

    @property
    def extra(self):
        """Gets the extra of this V0040UpdateNodeMsg.  # noqa: E501

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :return: The extra of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this V0040UpdateNodeMsg.

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :param extra: The extra of this V0040UpdateNodeMsg.  # noqa: E501
        :type: str
        """

        self._extra = extra

    @property
    def features(self):
        """Gets the features of this V0040UpdateNodeMsg.  # noqa: E501


        :return: The features of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this V0040UpdateNodeMsg.


        :param features: The features of this V0040UpdateNodeMsg.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def features_act(self):
        """Gets the features_act of this V0040UpdateNodeMsg.  # noqa: E501


        :return: The features_act of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._features_act

    @features_act.setter
    def features_act(self, features_act):
        """Sets the features_act of this V0040UpdateNodeMsg.


        :param features_act: The features_act of this V0040UpdateNodeMsg.  # noqa: E501
        :type: list[str]
        """

        self._features_act = features_act

    @property
    def gres(self):
        """Gets the gres of this V0040UpdateNodeMsg.  # noqa: E501

        Generic resources  # noqa: E501

        :return: The gres of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: str
        """
        return self._gres

    @gres.setter
    def gres(self, gres):
        """Sets the gres of this V0040UpdateNodeMsg.

        Generic resources  # noqa: E501

        :param gres: The gres of this V0040UpdateNodeMsg.  # noqa: E501
        :type: str
        """

        self._gres = gres

    @property
    def address(self):
        """Gets the address of this V0040UpdateNodeMsg.  # noqa: E501


        :return: The address of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this V0040UpdateNodeMsg.


        :param address: The address of this V0040UpdateNodeMsg.  # noqa: E501
        :type: list[str]
        """

        self._address = address

    @property
    def hostname(self):
        """Gets the hostname of this V0040UpdateNodeMsg.  # noqa: E501


        :return: The hostname of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this V0040UpdateNodeMsg.


        :param hostname: The hostname of this V0040UpdateNodeMsg.  # noqa: E501
        :type: list[str]
        """

        self._hostname = hostname

    @property
    def name(self):
        """Gets the name of this V0040UpdateNodeMsg.  # noqa: E501


        :return: The name of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040UpdateNodeMsg.


        :param name: The name of this V0040UpdateNodeMsg.  # noqa: E501
        :type: list[str]
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this V0040UpdateNodeMsg.  # noqa: E501

        New state to assign to the node  # noqa: E501

        :return: The state of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V0040UpdateNodeMsg.

        New state to assign to the node  # noqa: E501

        :param state: The state of this V0040UpdateNodeMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["INVALID", "UNKNOWN", "DOWN", "IDLE", "ALLOCATED", "ERROR", "MIXED", "FUTURE", "RESERVED", "UNDRAIN", "CLOUD", "RESUME", "DRAIN", "COMPLETING", "NOT_RESPONDING", "POWERED_DOWN", "FAIL", "POWERING_UP", "MAINTENANCE", "REBOOT_REQUESTED", "REBOOT_CANCELED", "POWERING_DOWN", "DYNAMIC_FUTURE", "REBOOT_ISSUED", "PLANNED", "INVALID_REG", "POWER_DOWN", "POWER_UP", "POWER_DRAIN", "DYNAMIC_NORM"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(state).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `state` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(state) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._state = state

    @property
    def reason(self):
        """Gets the reason of this V0040UpdateNodeMsg.  # noqa: E501

        Reason for node being DOWN or DRAINING  # noqa: E501

        :return: The reason of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this V0040UpdateNodeMsg.

        Reason for node being DOWN or DRAINING  # noqa: E501

        :param reason: The reason of this V0040UpdateNodeMsg.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def reason_uid(self):
        """Gets the reason_uid of this V0040UpdateNodeMsg.  # noqa: E501

        User ID to associate with the reason (needed if user root is sending message)  # noqa: E501

        :return: The reason_uid of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: str
        """
        return self._reason_uid

    @reason_uid.setter
    def reason_uid(self, reason_uid):
        """Sets the reason_uid of this V0040UpdateNodeMsg.

        User ID to associate with the reason (needed if user root is sending message)  # noqa: E501

        :param reason_uid: The reason_uid of this V0040UpdateNodeMsg.  # noqa: E501
        :type: str
        """

        self._reason_uid = reason_uid

    @property
    def resume_after(self):
        """Gets the resume_after of this V0040UpdateNodeMsg.  # noqa: E501


        :return: The resume_after of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._resume_after

    @resume_after.setter
    def resume_after(self, resume_after):
        """Sets the resume_after of this V0040UpdateNodeMsg.


        :param resume_after: The resume_after of this V0040UpdateNodeMsg.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._resume_after = resume_after

    @property
    def weight(self):
        """Gets the weight of this V0040UpdateNodeMsg.  # noqa: E501


        :return: The weight of this V0040UpdateNodeMsg.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this V0040UpdateNodeMsg.


        :param weight: The weight of this V0040UpdateNodeMsg.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040UpdateNodeMsg):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040UpdateNodeMsg):
            return True

        return self.to_dict() != other.to_dict()
