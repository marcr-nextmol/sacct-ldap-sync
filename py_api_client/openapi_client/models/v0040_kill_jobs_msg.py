# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040KillJobsMsg(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account': 'str',
        'flags': 'list[str]',
        'job_name': 'str',
        'jobs': 'list[str]',
        'partition': 'str',
        'qos': 'str',
        'reservation': 'str',
        'signal': 'str',
        'job_state': 'list[str]',
        'user_id': 'str',
        'user_name': 'str',
        'wckey': 'str',
        'nodes': 'list[str]'
    }

    attribute_map = {
        'account': 'account',
        'flags': 'flags',
        'job_name': 'job_name',
        'jobs': 'jobs',
        'partition': 'partition',
        'qos': 'qos',
        'reservation': 'reservation',
        'signal': 'signal',
        'job_state': 'job_state',
        'user_id': 'user_id',
        'user_name': 'user_name',
        'wckey': 'wckey',
        'nodes': 'nodes'
    }

    def __init__(self, account=None, flags=None, job_name=None, jobs=None, partition=None, qos=None, reservation=None, signal=None, job_state=None, user_id=None, user_name=None, wckey=None, nodes=None, local_vars_configuration=None):  # noqa: E501
        """V0040KillJobsMsg - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account = None
        self._flags = None
        self._job_name = None
        self._jobs = None
        self._partition = None
        self._qos = None
        self._reservation = None
        self._signal = None
        self._job_state = None
        self._user_id = None
        self._user_name = None
        self._wckey = None
        self._nodes = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if flags is not None:
            self.flags = flags
        if job_name is not None:
            self.job_name = job_name
        if jobs is not None:
            self.jobs = jobs
        if partition is not None:
            self.partition = partition
        if qos is not None:
            self.qos = qos
        if reservation is not None:
            self.reservation = reservation
        if signal is not None:
            self.signal = signal
        if job_state is not None:
            self.job_state = job_state
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if wckey is not None:
            self.wckey = wckey
        if nodes is not None:
            self.nodes = nodes

    @property
    def account(self):
        """Gets the account of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs to a specific account  # noqa: E501

        :return: The account of this V0040KillJobsMsg.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this V0040KillJobsMsg.

        Filter jobs to a specific account  # noqa: E501

        :param account: The account of this V0040KillJobsMsg.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def flags(self):
        """Gets the flags of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs according to flags  # noqa: E501

        :return: The flags of this V0040KillJobsMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040KillJobsMsg.

        Filter jobs according to flags  # noqa: E501

        :param flags: The flags of this V0040KillJobsMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["BATCH_JOB", "ARRAY_TASK", "FULL_STEPS_ONLY", "FULL_JOB", "FEDERATION_REQUEUE", "HURRY", "OUT_OF_MEMORY", "NO_SIBLING_JOBS", "RESERVATION_JOB", "NO_CRON_JOBS", "VERBOSE", "CRON_JOBS", "WARNING_SENT"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def job_name(self):
        """Gets the job_name of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs to a specific name  # noqa: E501

        :return: The job_name of this V0040KillJobsMsg.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this V0040KillJobsMsg.

        Filter jobs to a specific name  # noqa: E501

        :param job_name: The job_name of this V0040KillJobsMsg.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def jobs(self):
        """Gets the jobs of this V0040KillJobsMsg.  # noqa: E501


        :return: The jobs of this V0040KillJobsMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this V0040KillJobsMsg.


        :param jobs: The jobs of this V0040KillJobsMsg.  # noqa: E501
        :type: list[str]
        """

        self._jobs = jobs

    @property
    def partition(self):
        """Gets the partition of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs to a specific partition  # noqa: E501

        :return: The partition of this V0040KillJobsMsg.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this V0040KillJobsMsg.

        Filter jobs to a specific partition  # noqa: E501

        :param partition: The partition of this V0040KillJobsMsg.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def qos(self):
        """Gets the qos of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs to a specific QOS  # noqa: E501

        :return: The qos of this V0040KillJobsMsg.  # noqa: E501
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this V0040KillJobsMsg.

        Filter jobs to a specific QOS  # noqa: E501

        :param qos: The qos of this V0040KillJobsMsg.  # noqa: E501
        :type: str
        """

        self._qos = qos

    @property
    def reservation(self):
        """Gets the reservation of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs to a specific reservation  # noqa: E501

        :return: The reservation of this V0040KillJobsMsg.  # noqa: E501
        :rtype: str
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this V0040KillJobsMsg.

        Filter jobs to a specific reservation  # noqa: E501

        :param reservation: The reservation of this V0040KillJobsMsg.  # noqa: E501
        :type: str
        """

        self._reservation = reservation

    @property
    def signal(self):
        """Gets the signal of this V0040KillJobsMsg.  # noqa: E501

        Signal to send to jobs  # noqa: E501

        :return: The signal of this V0040KillJobsMsg.  # noqa: E501
        :rtype: str
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this V0040KillJobsMsg.

        Signal to send to jobs  # noqa: E501

        :param signal: The signal of this V0040KillJobsMsg.  # noqa: E501
        :type: str
        """

        self._signal = signal

    @property
    def job_state(self):
        """Gets the job_state of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs to a specific state  # noqa: E501

        :return: The job_state of this V0040KillJobsMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state):
        """Sets the job_state of this V0040KillJobsMsg.

        Filter jobs to a specific state  # noqa: E501

        :param job_state: The job_state of this V0040KillJobsMsg.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["PENDING", "RUNNING", "SUSPENDED", "COMPLETED", "CANCELLED", "FAILED", "TIMEOUT", "NODE_FAIL", "PREEMPTED", "BOOT_FAIL", "DEADLINE", "OUT_OF_MEMORY", "LAUNCH_FAILED", "UPDATE_DB", "REQUEUED", "REQUEUE_HOLD", "SPECIAL_EXIT", "RESIZING", "CONFIGURING", "COMPLETING", "STOPPED", "RECONFIG_FAIL", "POWER_UP_NODE", "REVOKED", "REQUEUE_FED", "RESV_DEL_HOLD", "SIGNALING", "STAGE_OUT"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(job_state).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `job_state` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(job_state) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._job_state = job_state

    @property
    def user_id(self):
        """Gets the user_id of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs to a specific numeric user id  # noqa: E501

        :return: The user_id of this V0040KillJobsMsg.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V0040KillJobsMsg.

        Filter jobs to a specific numeric user id  # noqa: E501

        :param user_id: The user_id of this V0040KillJobsMsg.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs to a specific user name  # noqa: E501

        :return: The user_name of this V0040KillJobsMsg.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this V0040KillJobsMsg.

        Filter jobs to a specific user name  # noqa: E501

        :param user_name: The user_name of this V0040KillJobsMsg.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def wckey(self):
        """Gets the wckey of this V0040KillJobsMsg.  # noqa: E501

        Filter jobs to a specific wckey  # noqa: E501

        :return: The wckey of this V0040KillJobsMsg.  # noqa: E501
        :rtype: str
        """
        return self._wckey

    @wckey.setter
    def wckey(self, wckey):
        """Sets the wckey of this V0040KillJobsMsg.

        Filter jobs to a specific wckey  # noqa: E501

        :param wckey: The wckey of this V0040KillJobsMsg.  # noqa: E501
        :type: str
        """

        self._wckey = wckey

    @property
    def nodes(self):
        """Gets the nodes of this V0040KillJobsMsg.  # noqa: E501


        :return: The nodes of this V0040KillJobsMsg.  # noqa: E501
        :rtype: list[str]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this V0040KillJobsMsg.


        :param nodes: The nodes of this V0040KillJobsMsg.  # noqa: E501
        :type: list[str]
        """

        self._nodes = nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040KillJobsMsg):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040KillJobsMsg):
            return True

        return self.to_dict() != other.to_dict()
