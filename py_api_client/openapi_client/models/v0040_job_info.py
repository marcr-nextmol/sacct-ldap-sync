# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040JobInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account': 'str',
        'accrue_time': 'V0040Uint64NoVal',
        'admin_comment': 'str',
        'allocating_node': 'str',
        'array_job_id': 'V0040Uint32NoVal',
        'array_task_id': 'V0040Uint32NoVal',
        'array_max_tasks': 'V0040Uint32NoVal',
        'array_task_string': 'str',
        'association_id': 'int',
        'batch_features': 'str',
        'batch_flag': 'bool',
        'batch_host': 'str',
        'flags': 'list[str]',
        'burst_buffer': 'str',
        'burst_buffer_state': 'str',
        'cluster': 'str',
        'cluster_features': 'str',
        'command': 'str',
        'comment': 'str',
        'container': 'str',
        'container_id': 'str',
        'contiguous': 'bool',
        'core_spec': 'int',
        'thread_spec': 'int',
        'cores_per_socket': 'V0040Uint16NoVal',
        'billable_tres': 'V0040Float64NoVal',
        'cpus_per_task': 'V0040Uint16NoVal',
        'cpu_frequency_minimum': 'V0040Uint32NoVal',
        'cpu_frequency_maximum': 'V0040Uint32NoVal',
        'cpu_frequency_governor': 'V0040Uint32NoVal',
        'cpus_per_tres': 'str',
        'cron': 'str',
        'deadline': 'V0040Uint64NoVal',
        'delay_boot': 'V0040Uint32NoVal',
        'dependency': 'str',
        'derived_exit_code': 'V0040ProcessExitCodeVerbose',
        'eligible_time': 'V0040Uint64NoVal',
        'end_time': 'V0040Uint64NoVal',
        'excluded_nodes': 'str',
        'exit_code': 'V0040ProcessExitCodeVerbose',
        'extra': 'str',
        'failed_node': 'str',
        'features': 'str',
        'federation_origin': 'str',
        'federation_siblings_active': 'str',
        'federation_siblings_viable': 'str',
        'gres_detail': 'list[str]',
        'group_id': 'int',
        'group_name': 'str',
        'het_job_id': 'V0040Uint32NoVal',
        'het_job_id_set': 'str',
        'het_job_offset': 'V0040Uint32NoVal',
        'job_id': 'int',
        'job_resources': 'V0040JobRes',
        'job_size_str': 'list[str]',
        'job_state': 'list[str]',
        'last_sched_evaluation': 'V0040Uint64NoVal',
        'licenses': 'str',
        'mail_type': 'list[str]',
        'mail_user': 'str',
        'max_cpus': 'V0040Uint32NoVal',
        'max_nodes': 'V0040Uint32NoVal',
        'mcs_label': 'str',
        'memory_per_tres': 'str',
        'name': 'str',
        'network': 'str',
        'nodes': 'str',
        'nice': 'int',
        'tasks_per_core': 'V0040Uint16NoVal',
        'tasks_per_tres': 'V0040Uint16NoVal',
        'tasks_per_node': 'V0040Uint16NoVal',
        'tasks_per_socket': 'V0040Uint16NoVal',
        'tasks_per_board': 'V0040Uint16NoVal',
        'cpus': 'V0040Uint32NoVal',
        'node_count': 'V0040Uint32NoVal',
        'tasks': 'V0040Uint32NoVal',
        'partition': 'str',
        'prefer': 'str',
        'memory_per_cpu': 'V0040Uint64NoVal',
        'memory_per_node': 'V0040Uint64NoVal',
        'minimum_cpus_per_node': 'V0040Uint16NoVal',
        'minimum_tmp_disk_per_node': 'V0040Uint32NoVal',
        'power': 'V0040JobInfoPower',
        'preempt_time': 'V0040Uint64NoVal',
        'preemptable_time': 'V0040Uint64NoVal',
        'pre_sus_time': 'V0040Uint64NoVal',
        'hold': 'bool',
        'priority': 'V0040Uint32NoVal',
        'profile': 'list[str]',
        'qos': 'str',
        'reboot': 'bool',
        'required_nodes': 'str',
        'minimum_switches': 'int',
        'requeue': 'bool',
        'resize_time': 'V0040Uint64NoVal',
        'restart_cnt': 'int',
        'resv_name': 'str',
        'scheduled_nodes': 'str',
        'selinux_context': 'str',
        'shared': 'list[str]',
        'exclusive': 'list[str]',
        'oversubscribe': 'bool',
        'show_flags': 'list[str]',
        'sockets_per_board': 'int',
        'sockets_per_node': 'V0040Uint16NoVal',
        'start_time': 'V0040Uint64NoVal',
        'state_description': 'str',
        'state_reason': 'str',
        'standard_error': 'str',
        'standard_input': 'str',
        'standard_output': 'str',
        'submit_time': 'V0040Uint64NoVal',
        'suspend_time': 'V0040Uint64NoVal',
        'system_comment': 'str',
        'time_limit': 'V0040Uint32NoVal',
        'time_minimum': 'V0040Uint32NoVal',
        'threads_per_core': 'V0040Uint16NoVal',
        'tres_bind': 'str',
        'tres_freq': 'str',
        'tres_per_job': 'str',
        'tres_per_node': 'str',
        'tres_per_socket': 'str',
        'tres_per_task': 'str',
        'tres_req_str': 'str',
        'tres_alloc_str': 'str',
        'user_id': 'int',
        'user_name': 'str',
        'maximum_switch_wait_time': 'int',
        'wckey': 'str',
        'current_working_directory': 'str'
    }

    attribute_map = {
        'account': 'account',
        'accrue_time': 'accrue_time',
        'admin_comment': 'admin_comment',
        'allocating_node': 'allocating_node',
        'array_job_id': 'array_job_id',
        'array_task_id': 'array_task_id',
        'array_max_tasks': 'array_max_tasks',
        'array_task_string': 'array_task_string',
        'association_id': 'association_id',
        'batch_features': 'batch_features',
        'batch_flag': 'batch_flag',
        'batch_host': 'batch_host',
        'flags': 'flags',
        'burst_buffer': 'burst_buffer',
        'burst_buffer_state': 'burst_buffer_state',
        'cluster': 'cluster',
        'cluster_features': 'cluster_features',
        'command': 'command',
        'comment': 'comment',
        'container': 'container',
        'container_id': 'container_id',
        'contiguous': 'contiguous',
        'core_spec': 'core_spec',
        'thread_spec': 'thread_spec',
        'cores_per_socket': 'cores_per_socket',
        'billable_tres': 'billable_tres',
        'cpus_per_task': 'cpus_per_task',
        'cpu_frequency_minimum': 'cpu_frequency_minimum',
        'cpu_frequency_maximum': 'cpu_frequency_maximum',
        'cpu_frequency_governor': 'cpu_frequency_governor',
        'cpus_per_tres': 'cpus_per_tres',
        'cron': 'cron',
        'deadline': 'deadline',
        'delay_boot': 'delay_boot',
        'dependency': 'dependency',
        'derived_exit_code': 'derived_exit_code',
        'eligible_time': 'eligible_time',
        'end_time': 'end_time',
        'excluded_nodes': 'excluded_nodes',
        'exit_code': 'exit_code',
        'extra': 'extra',
        'failed_node': 'failed_node',
        'features': 'features',
        'federation_origin': 'federation_origin',
        'federation_siblings_active': 'federation_siblings_active',
        'federation_siblings_viable': 'federation_siblings_viable',
        'gres_detail': 'gres_detail',
        'group_id': 'group_id',
        'group_name': 'group_name',
        'het_job_id': 'het_job_id',
        'het_job_id_set': 'het_job_id_set',
        'het_job_offset': 'het_job_offset',
        'job_id': 'job_id',
        'job_resources': 'job_resources',
        'job_size_str': 'job_size_str',
        'job_state': 'job_state',
        'last_sched_evaluation': 'last_sched_evaluation',
        'licenses': 'licenses',
        'mail_type': 'mail_type',
        'mail_user': 'mail_user',
        'max_cpus': 'max_cpus',
        'max_nodes': 'max_nodes',
        'mcs_label': 'mcs_label',
        'memory_per_tres': 'memory_per_tres',
        'name': 'name',
        'network': 'network',
        'nodes': 'nodes',
        'nice': 'nice',
        'tasks_per_core': 'tasks_per_core',
        'tasks_per_tres': 'tasks_per_tres',
        'tasks_per_node': 'tasks_per_node',
        'tasks_per_socket': 'tasks_per_socket',
        'tasks_per_board': 'tasks_per_board',
        'cpus': 'cpus',
        'node_count': 'node_count',
        'tasks': 'tasks',
        'partition': 'partition',
        'prefer': 'prefer',
        'memory_per_cpu': 'memory_per_cpu',
        'memory_per_node': 'memory_per_node',
        'minimum_cpus_per_node': 'minimum_cpus_per_node',
        'minimum_tmp_disk_per_node': 'minimum_tmp_disk_per_node',
        'power': 'power',
        'preempt_time': 'preempt_time',
        'preemptable_time': 'preemptable_time',
        'pre_sus_time': 'pre_sus_time',
        'hold': 'hold',
        'priority': 'priority',
        'profile': 'profile',
        'qos': 'qos',
        'reboot': 'reboot',
        'required_nodes': 'required_nodes',
        'minimum_switches': 'minimum_switches',
        'requeue': 'requeue',
        'resize_time': 'resize_time',
        'restart_cnt': 'restart_cnt',
        'resv_name': 'resv_name',
        'scheduled_nodes': 'scheduled_nodes',
        'selinux_context': 'selinux_context',
        'shared': 'shared',
        'exclusive': 'exclusive',
        'oversubscribe': 'oversubscribe',
        'show_flags': 'show_flags',
        'sockets_per_board': 'sockets_per_board',
        'sockets_per_node': 'sockets_per_node',
        'start_time': 'start_time',
        'state_description': 'state_description',
        'state_reason': 'state_reason',
        'standard_error': 'standard_error',
        'standard_input': 'standard_input',
        'standard_output': 'standard_output',
        'submit_time': 'submit_time',
        'suspend_time': 'suspend_time',
        'system_comment': 'system_comment',
        'time_limit': 'time_limit',
        'time_minimum': 'time_minimum',
        'threads_per_core': 'threads_per_core',
        'tres_bind': 'tres_bind',
        'tres_freq': 'tres_freq',
        'tres_per_job': 'tres_per_job',
        'tres_per_node': 'tres_per_node',
        'tres_per_socket': 'tres_per_socket',
        'tres_per_task': 'tres_per_task',
        'tres_req_str': 'tres_req_str',
        'tres_alloc_str': 'tres_alloc_str',
        'user_id': 'user_id',
        'user_name': 'user_name',
        'maximum_switch_wait_time': 'maximum_switch_wait_time',
        'wckey': 'wckey',
        'current_working_directory': 'current_working_directory'
    }

    def __init__(self, account=None, accrue_time=None, admin_comment=None, allocating_node=None, array_job_id=None, array_task_id=None, array_max_tasks=None, array_task_string=None, association_id=None, batch_features=None, batch_flag=None, batch_host=None, flags=None, burst_buffer=None, burst_buffer_state=None, cluster=None, cluster_features=None, command=None, comment=None, container=None, container_id=None, contiguous=None, core_spec=None, thread_spec=None, cores_per_socket=None, billable_tres=None, cpus_per_task=None, cpu_frequency_minimum=None, cpu_frequency_maximum=None, cpu_frequency_governor=None, cpus_per_tres=None, cron=None, deadline=None, delay_boot=None, dependency=None, derived_exit_code=None, eligible_time=None, end_time=None, excluded_nodes=None, exit_code=None, extra=None, failed_node=None, features=None, federation_origin=None, federation_siblings_active=None, federation_siblings_viable=None, gres_detail=None, group_id=None, group_name=None, het_job_id=None, het_job_id_set=None, het_job_offset=None, job_id=None, job_resources=None, job_size_str=None, job_state=None, last_sched_evaluation=None, licenses=None, mail_type=None, mail_user=None, max_cpus=None, max_nodes=None, mcs_label=None, memory_per_tres=None, name=None, network=None, nodes=None, nice=None, tasks_per_core=None, tasks_per_tres=None, tasks_per_node=None, tasks_per_socket=None, tasks_per_board=None, cpus=None, node_count=None, tasks=None, partition=None, prefer=None, memory_per_cpu=None, memory_per_node=None, minimum_cpus_per_node=None, minimum_tmp_disk_per_node=None, power=None, preempt_time=None, preemptable_time=None, pre_sus_time=None, hold=None, priority=None, profile=None, qos=None, reboot=None, required_nodes=None, minimum_switches=None, requeue=None, resize_time=None, restart_cnt=None, resv_name=None, scheduled_nodes=None, selinux_context=None, shared=None, exclusive=None, oversubscribe=None, show_flags=None, sockets_per_board=None, sockets_per_node=None, start_time=None, state_description=None, state_reason=None, standard_error=None, standard_input=None, standard_output=None, submit_time=None, suspend_time=None, system_comment=None, time_limit=None, time_minimum=None, threads_per_core=None, tres_bind=None, tres_freq=None, tres_per_job=None, tres_per_node=None, tres_per_socket=None, tres_per_task=None, tres_req_str=None, tres_alloc_str=None, user_id=None, user_name=None, maximum_switch_wait_time=None, wckey=None, current_working_directory=None, local_vars_configuration=None):  # noqa: E501
        """V0040JobInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account = None
        self._accrue_time = None
        self._admin_comment = None
        self._allocating_node = None
        self._array_job_id = None
        self._array_task_id = None
        self._array_max_tasks = None
        self._array_task_string = None
        self._association_id = None
        self._batch_features = None
        self._batch_flag = None
        self._batch_host = None
        self._flags = None
        self._burst_buffer = None
        self._burst_buffer_state = None
        self._cluster = None
        self._cluster_features = None
        self._command = None
        self._comment = None
        self._container = None
        self._container_id = None
        self._contiguous = None
        self._core_spec = None
        self._thread_spec = None
        self._cores_per_socket = None
        self._billable_tres = None
        self._cpus_per_task = None
        self._cpu_frequency_minimum = None
        self._cpu_frequency_maximum = None
        self._cpu_frequency_governor = None
        self._cpus_per_tres = None
        self._cron = None
        self._deadline = None
        self._delay_boot = None
        self._dependency = None
        self._derived_exit_code = None
        self._eligible_time = None
        self._end_time = None
        self._excluded_nodes = None
        self._exit_code = None
        self._extra = None
        self._failed_node = None
        self._features = None
        self._federation_origin = None
        self._federation_siblings_active = None
        self._federation_siblings_viable = None
        self._gres_detail = None
        self._group_id = None
        self._group_name = None
        self._het_job_id = None
        self._het_job_id_set = None
        self._het_job_offset = None
        self._job_id = None
        self._job_resources = None
        self._job_size_str = None
        self._job_state = None
        self._last_sched_evaluation = None
        self._licenses = None
        self._mail_type = None
        self._mail_user = None
        self._max_cpus = None
        self._max_nodes = None
        self._mcs_label = None
        self._memory_per_tres = None
        self._name = None
        self._network = None
        self._nodes = None
        self._nice = None
        self._tasks_per_core = None
        self._tasks_per_tres = None
        self._tasks_per_node = None
        self._tasks_per_socket = None
        self._tasks_per_board = None
        self._cpus = None
        self._node_count = None
        self._tasks = None
        self._partition = None
        self._prefer = None
        self._memory_per_cpu = None
        self._memory_per_node = None
        self._minimum_cpus_per_node = None
        self._minimum_tmp_disk_per_node = None
        self._power = None
        self._preempt_time = None
        self._preemptable_time = None
        self._pre_sus_time = None
        self._hold = None
        self._priority = None
        self._profile = None
        self._qos = None
        self._reboot = None
        self._required_nodes = None
        self._minimum_switches = None
        self._requeue = None
        self._resize_time = None
        self._restart_cnt = None
        self._resv_name = None
        self._scheduled_nodes = None
        self._selinux_context = None
        self._shared = None
        self._exclusive = None
        self._oversubscribe = None
        self._show_flags = None
        self._sockets_per_board = None
        self._sockets_per_node = None
        self._start_time = None
        self._state_description = None
        self._state_reason = None
        self._standard_error = None
        self._standard_input = None
        self._standard_output = None
        self._submit_time = None
        self._suspend_time = None
        self._system_comment = None
        self._time_limit = None
        self._time_minimum = None
        self._threads_per_core = None
        self._tres_bind = None
        self._tres_freq = None
        self._tres_per_job = None
        self._tres_per_node = None
        self._tres_per_socket = None
        self._tres_per_task = None
        self._tres_req_str = None
        self._tres_alloc_str = None
        self._user_id = None
        self._user_name = None
        self._maximum_switch_wait_time = None
        self._wckey = None
        self._current_working_directory = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if accrue_time is not None:
            self.accrue_time = accrue_time
        if admin_comment is not None:
            self.admin_comment = admin_comment
        if allocating_node is not None:
            self.allocating_node = allocating_node
        if array_job_id is not None:
            self.array_job_id = array_job_id
        if array_task_id is not None:
            self.array_task_id = array_task_id
        if array_max_tasks is not None:
            self.array_max_tasks = array_max_tasks
        if array_task_string is not None:
            self.array_task_string = array_task_string
        if association_id is not None:
            self.association_id = association_id
        if batch_features is not None:
            self.batch_features = batch_features
        if batch_flag is not None:
            self.batch_flag = batch_flag
        if batch_host is not None:
            self.batch_host = batch_host
        if flags is not None:
            self.flags = flags
        if burst_buffer is not None:
            self.burst_buffer = burst_buffer
        if burst_buffer_state is not None:
            self.burst_buffer_state = burst_buffer_state
        if cluster is not None:
            self.cluster = cluster
        if cluster_features is not None:
            self.cluster_features = cluster_features
        if command is not None:
            self.command = command
        if comment is not None:
            self.comment = comment
        if container is not None:
            self.container = container
        if container_id is not None:
            self.container_id = container_id
        if contiguous is not None:
            self.contiguous = contiguous
        if core_spec is not None:
            self.core_spec = core_spec
        if thread_spec is not None:
            self.thread_spec = thread_spec
        if cores_per_socket is not None:
            self.cores_per_socket = cores_per_socket
        if billable_tres is not None:
            self.billable_tres = billable_tres
        if cpus_per_task is not None:
            self.cpus_per_task = cpus_per_task
        if cpu_frequency_minimum is not None:
            self.cpu_frequency_minimum = cpu_frequency_minimum
        if cpu_frequency_maximum is not None:
            self.cpu_frequency_maximum = cpu_frequency_maximum
        if cpu_frequency_governor is not None:
            self.cpu_frequency_governor = cpu_frequency_governor
        if cpus_per_tres is not None:
            self.cpus_per_tres = cpus_per_tres
        if cron is not None:
            self.cron = cron
        if deadline is not None:
            self.deadline = deadline
        if delay_boot is not None:
            self.delay_boot = delay_boot
        if dependency is not None:
            self.dependency = dependency
        if derived_exit_code is not None:
            self.derived_exit_code = derived_exit_code
        if eligible_time is not None:
            self.eligible_time = eligible_time
        if end_time is not None:
            self.end_time = end_time
        if excluded_nodes is not None:
            self.excluded_nodes = excluded_nodes
        if exit_code is not None:
            self.exit_code = exit_code
        if extra is not None:
            self.extra = extra
        if failed_node is not None:
            self.failed_node = failed_node
        if features is not None:
            self.features = features
        if federation_origin is not None:
            self.federation_origin = federation_origin
        if federation_siblings_active is not None:
            self.federation_siblings_active = federation_siblings_active
        if federation_siblings_viable is not None:
            self.federation_siblings_viable = federation_siblings_viable
        if gres_detail is not None:
            self.gres_detail = gres_detail
        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        if het_job_id is not None:
            self.het_job_id = het_job_id
        if het_job_id_set is not None:
            self.het_job_id_set = het_job_id_set
        if het_job_offset is not None:
            self.het_job_offset = het_job_offset
        if job_id is not None:
            self.job_id = job_id
        if job_resources is not None:
            self.job_resources = job_resources
        if job_size_str is not None:
            self.job_size_str = job_size_str
        if job_state is not None:
            self.job_state = job_state
        if last_sched_evaluation is not None:
            self.last_sched_evaluation = last_sched_evaluation
        if licenses is not None:
            self.licenses = licenses
        if mail_type is not None:
            self.mail_type = mail_type
        if mail_user is not None:
            self.mail_user = mail_user
        if max_cpus is not None:
            self.max_cpus = max_cpus
        if max_nodes is not None:
            self.max_nodes = max_nodes
        if mcs_label is not None:
            self.mcs_label = mcs_label
        if memory_per_tres is not None:
            self.memory_per_tres = memory_per_tres
        if name is not None:
            self.name = name
        if network is not None:
            self.network = network
        if nodes is not None:
            self.nodes = nodes
        if nice is not None:
            self.nice = nice
        if tasks_per_core is not None:
            self.tasks_per_core = tasks_per_core
        if tasks_per_tres is not None:
            self.tasks_per_tres = tasks_per_tres
        if tasks_per_node is not None:
            self.tasks_per_node = tasks_per_node
        if tasks_per_socket is not None:
            self.tasks_per_socket = tasks_per_socket
        if tasks_per_board is not None:
            self.tasks_per_board = tasks_per_board
        if cpus is not None:
            self.cpus = cpus
        if node_count is not None:
            self.node_count = node_count
        if tasks is not None:
            self.tasks = tasks
        if partition is not None:
            self.partition = partition
        if prefer is not None:
            self.prefer = prefer
        if memory_per_cpu is not None:
            self.memory_per_cpu = memory_per_cpu
        if memory_per_node is not None:
            self.memory_per_node = memory_per_node
        if minimum_cpus_per_node is not None:
            self.minimum_cpus_per_node = minimum_cpus_per_node
        if minimum_tmp_disk_per_node is not None:
            self.minimum_tmp_disk_per_node = minimum_tmp_disk_per_node
        if power is not None:
            self.power = power
        if preempt_time is not None:
            self.preempt_time = preempt_time
        if preemptable_time is not None:
            self.preemptable_time = preemptable_time
        if pre_sus_time is not None:
            self.pre_sus_time = pre_sus_time
        if hold is not None:
            self.hold = hold
        if priority is not None:
            self.priority = priority
        if profile is not None:
            self.profile = profile
        if qos is not None:
            self.qos = qos
        if reboot is not None:
            self.reboot = reboot
        if required_nodes is not None:
            self.required_nodes = required_nodes
        if minimum_switches is not None:
            self.minimum_switches = minimum_switches
        if requeue is not None:
            self.requeue = requeue
        if resize_time is not None:
            self.resize_time = resize_time
        if restart_cnt is not None:
            self.restart_cnt = restart_cnt
        if resv_name is not None:
            self.resv_name = resv_name
        if scheduled_nodes is not None:
            self.scheduled_nodes = scheduled_nodes
        if selinux_context is not None:
            self.selinux_context = selinux_context
        if shared is not None:
            self.shared = shared
        if exclusive is not None:
            self.exclusive = exclusive
        if oversubscribe is not None:
            self.oversubscribe = oversubscribe
        if show_flags is not None:
            self.show_flags = show_flags
        if sockets_per_board is not None:
            self.sockets_per_board = sockets_per_board
        if sockets_per_node is not None:
            self.sockets_per_node = sockets_per_node
        if start_time is not None:
            self.start_time = start_time
        if state_description is not None:
            self.state_description = state_description
        if state_reason is not None:
            self.state_reason = state_reason
        if standard_error is not None:
            self.standard_error = standard_error
        if standard_input is not None:
            self.standard_input = standard_input
        if standard_output is not None:
            self.standard_output = standard_output
        if submit_time is not None:
            self.submit_time = submit_time
        if suspend_time is not None:
            self.suspend_time = suspend_time
        if system_comment is not None:
            self.system_comment = system_comment
        if time_limit is not None:
            self.time_limit = time_limit
        if time_minimum is not None:
            self.time_minimum = time_minimum
        if threads_per_core is not None:
            self.threads_per_core = threads_per_core
        if tres_bind is not None:
            self.tres_bind = tres_bind
        if tres_freq is not None:
            self.tres_freq = tres_freq
        if tres_per_job is not None:
            self.tres_per_job = tres_per_job
        if tres_per_node is not None:
            self.tres_per_node = tres_per_node
        if tres_per_socket is not None:
            self.tres_per_socket = tres_per_socket
        if tres_per_task is not None:
            self.tres_per_task = tres_per_task
        if tres_req_str is not None:
            self.tres_req_str = tres_req_str
        if tres_alloc_str is not None:
            self.tres_alloc_str = tres_alloc_str
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if maximum_switch_wait_time is not None:
            self.maximum_switch_wait_time = maximum_switch_wait_time
        if wckey is not None:
            self.wckey = wckey
        if current_working_directory is not None:
            self.current_working_directory = current_working_directory

    @property
    def account(self):
        """Gets the account of this V0040JobInfo.  # noqa: E501

        Account associated with the job  # noqa: E501

        :return: The account of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this V0040JobInfo.

        Account associated with the job  # noqa: E501

        :param account: The account of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def accrue_time(self):
        """Gets the accrue_time of this V0040JobInfo.  # noqa: E501


        :return: The accrue_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._accrue_time

    @accrue_time.setter
    def accrue_time(self, accrue_time):
        """Sets the accrue_time of this V0040JobInfo.


        :param accrue_time: The accrue_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._accrue_time = accrue_time

    @property
    def admin_comment(self):
        """Gets the admin_comment of this V0040JobInfo.  # noqa: E501

        Arbitrary comment made by administrator  # noqa: E501

        :return: The admin_comment of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._admin_comment

    @admin_comment.setter
    def admin_comment(self, admin_comment):
        """Sets the admin_comment of this V0040JobInfo.

        Arbitrary comment made by administrator  # noqa: E501

        :param admin_comment: The admin_comment of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._admin_comment = admin_comment

    @property
    def allocating_node(self):
        """Gets the allocating_node of this V0040JobInfo.  # noqa: E501

        Local node making the resource allocation  # noqa: E501

        :return: The allocating_node of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._allocating_node

    @allocating_node.setter
    def allocating_node(self, allocating_node):
        """Sets the allocating_node of this V0040JobInfo.

        Local node making the resource allocation  # noqa: E501

        :param allocating_node: The allocating_node of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._allocating_node = allocating_node

    @property
    def array_job_id(self):
        """Gets the array_job_id of this V0040JobInfo.  # noqa: E501


        :return: The array_job_id of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._array_job_id

    @array_job_id.setter
    def array_job_id(self, array_job_id):
        """Sets the array_job_id of this V0040JobInfo.


        :param array_job_id: The array_job_id of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._array_job_id = array_job_id

    @property
    def array_task_id(self):
        """Gets the array_task_id of this V0040JobInfo.  # noqa: E501


        :return: The array_task_id of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._array_task_id

    @array_task_id.setter
    def array_task_id(self, array_task_id):
        """Sets the array_task_id of this V0040JobInfo.


        :param array_task_id: The array_task_id of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._array_task_id = array_task_id

    @property
    def array_max_tasks(self):
        """Gets the array_max_tasks of this V0040JobInfo.  # noqa: E501


        :return: The array_max_tasks of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._array_max_tasks

    @array_max_tasks.setter
    def array_max_tasks(self, array_max_tasks):
        """Sets the array_max_tasks of this V0040JobInfo.


        :param array_max_tasks: The array_max_tasks of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._array_max_tasks = array_max_tasks

    @property
    def array_task_string(self):
        """Gets the array_task_string of this V0040JobInfo.  # noqa: E501

        String expression of task IDs in this record  # noqa: E501

        :return: The array_task_string of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._array_task_string

    @array_task_string.setter
    def array_task_string(self, array_task_string):
        """Sets the array_task_string of this V0040JobInfo.

        String expression of task IDs in this record  # noqa: E501

        :param array_task_string: The array_task_string of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._array_task_string = array_task_string

    @property
    def association_id(self):
        """Gets the association_id of this V0040JobInfo.  # noqa: E501

        Unique identifier for the association  # noqa: E501

        :return: The association_id of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id):
        """Sets the association_id of this V0040JobInfo.

        Unique identifier for the association  # noqa: E501

        :param association_id: The association_id of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._association_id = association_id

    @property
    def batch_features(self):
        """Gets the batch_features of this V0040JobInfo.  # noqa: E501

        Features required for batch script's node  # noqa: E501

        :return: The batch_features of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._batch_features

    @batch_features.setter
    def batch_features(self, batch_features):
        """Sets the batch_features of this V0040JobInfo.

        Features required for batch script's node  # noqa: E501

        :param batch_features: The batch_features of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._batch_features = batch_features

    @property
    def batch_flag(self):
        """Gets the batch_flag of this V0040JobInfo.  # noqa: E501

        True if batch job  # noqa: E501

        :return: The batch_flag of this V0040JobInfo.  # noqa: E501
        :rtype: bool
        """
        return self._batch_flag

    @batch_flag.setter
    def batch_flag(self, batch_flag):
        """Sets the batch_flag of this V0040JobInfo.

        True if batch job  # noqa: E501

        :param batch_flag: The batch_flag of this V0040JobInfo.  # noqa: E501
        :type: bool
        """

        self._batch_flag = batch_flag

    @property
    def batch_host(self):
        """Gets the batch_host of this V0040JobInfo.  # noqa: E501

        Name of host running batch script  # noqa: E501

        :return: The batch_host of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._batch_host

    @batch_host.setter
    def batch_host(self, batch_host):
        """Sets the batch_host of this V0040JobInfo.

        Name of host running batch script  # noqa: E501

        :param batch_host: The batch_host of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._batch_host = batch_host

    @property
    def flags(self):
        """Gets the flags of this V0040JobInfo.  # noqa: E501

        Job flags  # noqa: E501

        :return: The flags of this V0040JobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040JobInfo.

        Job flags  # noqa: E501

        :param flags: The flags of this V0040JobInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["KILL_INVALID_DEPENDENCY", "NO_KILL_INVALID_DEPENDENCY", "HAS_STATE_DIRECTORY", "TESTING_BACKFILL", "GRES_BINDING_ENFORCED", "TEST_NOW_ONLY", "SEND_JOB_ENVIRONMENT", "SPREAD_JOB", "PREFER_MINIMUM_NODE_COUNT", "JOB_KILL_HURRY", "SKIP_TRES_STRING_ACCOUNTING", "SIBLING_CLUSTER_UPDATE_ONLY", "HETEROGENEOUS_JOB", "EXACT_TASK_COUNT_REQUESTED", "EXACT_CPU_COUNT_REQUESTED", "TESTING_WHOLE_NODE_BACKFILL", "TOP_PRIORITY_JOB", "ACCRUE_COUNT_CLEARED", "GRES_BINDING_DISABLED", "JOB_WAS_RUNNING", "JOB_ACCRUE_TIME_RESET", "CRON_JOB", "EXACT_MEMORY_REQUESTED", "USING_DEFAULT_ACCOUNT", "USING_DEFAULT_PARTITION", "USING_DEFAULT_QOS", "USING_DEFAULT_WCKEY", "DEPENDENT", "MAGNETIC", "PARTITION_ASSIGNED", "BACKFILL_ATTEMPTED", "SCHEDULING_ATTEMPTED", "SAVE_BATCH_SCRIPT", "GRES_ONE_TASK_PER_SHARING", "GRES_MULTIPLE_TASKS_PER_SHARING", "GRES_ALLOW_TASK_SHARING"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def burst_buffer(self):
        """Gets the burst_buffer of this V0040JobInfo.  # noqa: E501

        Burst buffer specifications  # noqa: E501

        :return: The burst_buffer of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._burst_buffer

    @burst_buffer.setter
    def burst_buffer(self, burst_buffer):
        """Sets the burst_buffer of this V0040JobInfo.

        Burst buffer specifications  # noqa: E501

        :param burst_buffer: The burst_buffer of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._burst_buffer = burst_buffer

    @property
    def burst_buffer_state(self):
        """Gets the burst_buffer_state of this V0040JobInfo.  # noqa: E501

        Burst buffer state details  # noqa: E501

        :return: The burst_buffer_state of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._burst_buffer_state

    @burst_buffer_state.setter
    def burst_buffer_state(self, burst_buffer_state):
        """Sets the burst_buffer_state of this V0040JobInfo.

        Burst buffer state details  # noqa: E501

        :param burst_buffer_state: The burst_buffer_state of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._burst_buffer_state = burst_buffer_state

    @property
    def cluster(self):
        """Gets the cluster of this V0040JobInfo.  # noqa: E501

        Cluster name  # noqa: E501

        :return: The cluster of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this V0040JobInfo.

        Cluster name  # noqa: E501

        :param cluster: The cluster of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def cluster_features(self):
        """Gets the cluster_features of this V0040JobInfo.  # noqa: E501

        List of required cluster features  # noqa: E501

        :return: The cluster_features of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster_features

    @cluster_features.setter
    def cluster_features(self, cluster_features):
        """Sets the cluster_features of this V0040JobInfo.

        List of required cluster features  # noqa: E501

        :param cluster_features: The cluster_features of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._cluster_features = cluster_features

    @property
    def command(self):
        """Gets the command of this V0040JobInfo.  # noqa: E501

        Executed command  # noqa: E501

        :return: The command of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this V0040JobInfo.

        Executed command  # noqa: E501

        :param command: The command of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def comment(self):
        """Gets the comment of this V0040JobInfo.  # noqa: E501

        Arbitrary comment  # noqa: E501

        :return: The comment of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this V0040JobInfo.

        Arbitrary comment  # noqa: E501

        :param comment: The comment of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def container(self):
        """Gets the container of this V0040JobInfo.  # noqa: E501

        Absolute path to OCI container bundle  # noqa: E501

        :return: The container of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this V0040JobInfo.

        Absolute path to OCI container bundle  # noqa: E501

        :param container: The container of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._container = container

    @property
    def container_id(self):
        """Gets the container_id of this V0040JobInfo.  # noqa: E501

        OCI container ID  # noqa: E501

        :return: The container_id of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this V0040JobInfo.

        OCI container ID  # noqa: E501

        :param container_id: The container_id of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def contiguous(self):
        """Gets the contiguous of this V0040JobInfo.  # noqa: E501

        True if job requires contiguous nodes  # noqa: E501

        :return: The contiguous of this V0040JobInfo.  # noqa: E501
        :rtype: bool
        """
        return self._contiguous

    @contiguous.setter
    def contiguous(self, contiguous):
        """Sets the contiguous of this V0040JobInfo.

        True if job requires contiguous nodes  # noqa: E501

        :param contiguous: The contiguous of this V0040JobInfo.  # noqa: E501
        :type: bool
        """

        self._contiguous = contiguous

    @property
    def core_spec(self):
        """Gets the core_spec of this V0040JobInfo.  # noqa: E501

        Specialized core count  # noqa: E501

        :return: The core_spec of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._core_spec

    @core_spec.setter
    def core_spec(self, core_spec):
        """Sets the core_spec of this V0040JobInfo.

        Specialized core count  # noqa: E501

        :param core_spec: The core_spec of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._core_spec = core_spec

    @property
    def thread_spec(self):
        """Gets the thread_spec of this V0040JobInfo.  # noqa: E501

        Specialized thread count  # noqa: E501

        :return: The thread_spec of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._thread_spec

    @thread_spec.setter
    def thread_spec(self, thread_spec):
        """Sets the thread_spec of this V0040JobInfo.

        Specialized thread count  # noqa: E501

        :param thread_spec: The thread_spec of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._thread_spec = thread_spec

    @property
    def cores_per_socket(self):
        """Gets the cores_per_socket of this V0040JobInfo.  # noqa: E501


        :return: The cores_per_socket of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._cores_per_socket

    @cores_per_socket.setter
    def cores_per_socket(self, cores_per_socket):
        """Sets the cores_per_socket of this V0040JobInfo.


        :param cores_per_socket: The cores_per_socket of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._cores_per_socket = cores_per_socket

    @property
    def billable_tres(self):
        """Gets the billable_tres of this V0040JobInfo.  # noqa: E501


        :return: The billable_tres of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Float64NoVal
        """
        return self._billable_tres

    @billable_tres.setter
    def billable_tres(self, billable_tres):
        """Sets the billable_tres of this V0040JobInfo.


        :param billable_tres: The billable_tres of this V0040JobInfo.  # noqa: E501
        :type: V0040Float64NoVal
        """

        self._billable_tres = billable_tres

    @property
    def cpus_per_task(self):
        """Gets the cpus_per_task of this V0040JobInfo.  # noqa: E501


        :return: The cpus_per_task of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._cpus_per_task

    @cpus_per_task.setter
    def cpus_per_task(self, cpus_per_task):
        """Sets the cpus_per_task of this V0040JobInfo.


        :param cpus_per_task: The cpus_per_task of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._cpus_per_task = cpus_per_task

    @property
    def cpu_frequency_minimum(self):
        """Gets the cpu_frequency_minimum of this V0040JobInfo.  # noqa: E501


        :return: The cpu_frequency_minimum of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._cpu_frequency_minimum

    @cpu_frequency_minimum.setter
    def cpu_frequency_minimum(self, cpu_frequency_minimum):
        """Sets the cpu_frequency_minimum of this V0040JobInfo.


        :param cpu_frequency_minimum: The cpu_frequency_minimum of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._cpu_frequency_minimum = cpu_frequency_minimum

    @property
    def cpu_frequency_maximum(self):
        """Gets the cpu_frequency_maximum of this V0040JobInfo.  # noqa: E501


        :return: The cpu_frequency_maximum of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._cpu_frequency_maximum

    @cpu_frequency_maximum.setter
    def cpu_frequency_maximum(self, cpu_frequency_maximum):
        """Sets the cpu_frequency_maximum of this V0040JobInfo.


        :param cpu_frequency_maximum: The cpu_frequency_maximum of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._cpu_frequency_maximum = cpu_frequency_maximum

    @property
    def cpu_frequency_governor(self):
        """Gets the cpu_frequency_governor of this V0040JobInfo.  # noqa: E501


        :return: The cpu_frequency_governor of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._cpu_frequency_governor

    @cpu_frequency_governor.setter
    def cpu_frequency_governor(self, cpu_frequency_governor):
        """Sets the cpu_frequency_governor of this V0040JobInfo.


        :param cpu_frequency_governor: The cpu_frequency_governor of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._cpu_frequency_governor = cpu_frequency_governor

    @property
    def cpus_per_tres(self):
        """Gets the cpus_per_tres of this V0040JobInfo.  # noqa: E501

        Semicolon delimited list of TRES=# values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)  # noqa: E501

        :return: The cpus_per_tres of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpus_per_tres

    @cpus_per_tres.setter
    def cpus_per_tres(self, cpus_per_tres):
        """Sets the cpus_per_tres of this V0040JobInfo.

        Semicolon delimited list of TRES=# values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)  # noqa: E501

        :param cpus_per_tres: The cpus_per_tres of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._cpus_per_tres = cpus_per_tres

    @property
    def cron(self):
        """Gets the cron of this V0040JobInfo.  # noqa: E501

        Time specification for scrontab job  # noqa: E501

        :return: The cron of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this V0040JobInfo.

        Time specification for scrontab job  # noqa: E501

        :param cron: The cron of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._cron = cron

    @property
    def deadline(self):
        """Gets the deadline of this V0040JobInfo.  # noqa: E501


        :return: The deadline of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this V0040JobInfo.


        :param deadline: The deadline of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._deadline = deadline

    @property
    def delay_boot(self):
        """Gets the delay_boot of this V0040JobInfo.  # noqa: E501


        :return: The delay_boot of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._delay_boot

    @delay_boot.setter
    def delay_boot(self, delay_boot):
        """Sets the delay_boot of this V0040JobInfo.


        :param delay_boot: The delay_boot of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._delay_boot = delay_boot

    @property
    def dependency(self):
        """Gets the dependency of this V0040JobInfo.  # noqa: E501

        Other jobs that must meet certain criteria before this job can start  # noqa: E501

        :return: The dependency of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency):
        """Sets the dependency of this V0040JobInfo.

        Other jobs that must meet certain criteria before this job can start  # noqa: E501

        :param dependency: The dependency of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._dependency = dependency

    @property
    def derived_exit_code(self):
        """Gets the derived_exit_code of this V0040JobInfo.  # noqa: E501


        :return: The derived_exit_code of this V0040JobInfo.  # noqa: E501
        :rtype: V0040ProcessExitCodeVerbose
        """
        return self._derived_exit_code

    @derived_exit_code.setter
    def derived_exit_code(self, derived_exit_code):
        """Sets the derived_exit_code of this V0040JobInfo.


        :param derived_exit_code: The derived_exit_code of this V0040JobInfo.  # noqa: E501
        :type: V0040ProcessExitCodeVerbose
        """

        self._derived_exit_code = derived_exit_code

    @property
    def eligible_time(self):
        """Gets the eligible_time of this V0040JobInfo.  # noqa: E501


        :return: The eligible_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._eligible_time

    @eligible_time.setter
    def eligible_time(self, eligible_time):
        """Sets the eligible_time of this V0040JobInfo.


        :param eligible_time: The eligible_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._eligible_time = eligible_time

    @property
    def end_time(self):
        """Gets the end_time of this V0040JobInfo.  # noqa: E501


        :return: The end_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V0040JobInfo.


        :param end_time: The end_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._end_time = end_time

    @property
    def excluded_nodes(self):
        """Gets the excluded_nodes of this V0040JobInfo.  # noqa: E501

        Comma separated list of nodes that may not be used  # noqa: E501

        :return: The excluded_nodes of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._excluded_nodes

    @excluded_nodes.setter
    def excluded_nodes(self, excluded_nodes):
        """Sets the excluded_nodes of this V0040JobInfo.

        Comma separated list of nodes that may not be used  # noqa: E501

        :param excluded_nodes: The excluded_nodes of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._excluded_nodes = excluded_nodes

    @property
    def exit_code(self):
        """Gets the exit_code of this V0040JobInfo.  # noqa: E501


        :return: The exit_code of this V0040JobInfo.  # noqa: E501
        :rtype: V0040ProcessExitCodeVerbose
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this V0040JobInfo.


        :param exit_code: The exit_code of this V0040JobInfo.  # noqa: E501
        :type: V0040ProcessExitCodeVerbose
        """

        self._exit_code = exit_code

    @property
    def extra(self):
        """Gets the extra of this V0040JobInfo.  # noqa: E501

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :return: The extra of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this V0040JobInfo.

        Arbitrary string used for node filtering if extra constraints are enabled  # noqa: E501

        :param extra: The extra of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._extra = extra

    @property
    def failed_node(self):
        """Gets the failed_node of this V0040JobInfo.  # noqa: E501

        Name of node that caused job failure  # noqa: E501

        :return: The failed_node of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._failed_node

    @failed_node.setter
    def failed_node(self, failed_node):
        """Sets the failed_node of this V0040JobInfo.

        Name of node that caused job failure  # noqa: E501

        :param failed_node: The failed_node of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._failed_node = failed_node

    @property
    def features(self):
        """Gets the features of this V0040JobInfo.  # noqa: E501

        Comma separated list of features that are required  # noqa: E501

        :return: The features of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this V0040JobInfo.

        Comma separated list of features that are required  # noqa: E501

        :param features: The features of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._features = features

    @property
    def federation_origin(self):
        """Gets the federation_origin of this V0040JobInfo.  # noqa: E501

        Origin cluster's name (when using federation)  # noqa: E501

        :return: The federation_origin of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._federation_origin

    @federation_origin.setter
    def federation_origin(self, federation_origin):
        """Sets the federation_origin of this V0040JobInfo.

        Origin cluster's name (when using federation)  # noqa: E501

        :param federation_origin: The federation_origin of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._federation_origin = federation_origin

    @property
    def federation_siblings_active(self):
        """Gets the federation_siblings_active of this V0040JobInfo.  # noqa: E501

        Active sibling job names  # noqa: E501

        :return: The federation_siblings_active of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._federation_siblings_active

    @federation_siblings_active.setter
    def federation_siblings_active(self, federation_siblings_active):
        """Sets the federation_siblings_active of this V0040JobInfo.

        Active sibling job names  # noqa: E501

        :param federation_siblings_active: The federation_siblings_active of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._federation_siblings_active = federation_siblings_active

    @property
    def federation_siblings_viable(self):
        """Gets the federation_siblings_viable of this V0040JobInfo.  # noqa: E501

        Viable sibling job names  # noqa: E501

        :return: The federation_siblings_viable of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._federation_siblings_viable

    @federation_siblings_viable.setter
    def federation_siblings_viable(self, federation_siblings_viable):
        """Sets the federation_siblings_viable of this V0040JobInfo.

        Viable sibling job names  # noqa: E501

        :param federation_siblings_viable: The federation_siblings_viable of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._federation_siblings_viable = federation_siblings_viable

    @property
    def gres_detail(self):
        """Gets the gres_detail of this V0040JobInfo.  # noqa: E501


        :return: The gres_detail of this V0040JobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._gres_detail

    @gres_detail.setter
    def gres_detail(self, gres_detail):
        """Sets the gres_detail of this V0040JobInfo.


        :param gres_detail: The gres_detail of this V0040JobInfo.  # noqa: E501
        :type: list[str]
        """

        self._gres_detail = gres_detail

    @property
    def group_id(self):
        """Gets the group_id of this V0040JobInfo.  # noqa: E501

        Group ID of the user that owns the job  # noqa: E501

        :return: The group_id of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this V0040JobInfo.

        Group ID of the user that owns the job  # noqa: E501

        :param group_id: The group_id of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this V0040JobInfo.  # noqa: E501

        Group name of the user that owns the job  # noqa: E501

        :return: The group_name of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this V0040JobInfo.

        Group name of the user that owns the job  # noqa: E501

        :param group_name: The group_name of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def het_job_id(self):
        """Gets the het_job_id of this V0040JobInfo.  # noqa: E501


        :return: The het_job_id of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._het_job_id

    @het_job_id.setter
    def het_job_id(self, het_job_id):
        """Sets the het_job_id of this V0040JobInfo.


        :param het_job_id: The het_job_id of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._het_job_id = het_job_id

    @property
    def het_job_id_set(self):
        """Gets the het_job_id_set of this V0040JobInfo.  # noqa: E501

        Job ID range for all heterogeneous job components  # noqa: E501

        :return: The het_job_id_set of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._het_job_id_set

    @het_job_id_set.setter
    def het_job_id_set(self, het_job_id_set):
        """Sets the het_job_id_set of this V0040JobInfo.

        Job ID range for all heterogeneous job components  # noqa: E501

        :param het_job_id_set: The het_job_id_set of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._het_job_id_set = het_job_id_set

    @property
    def het_job_offset(self):
        """Gets the het_job_offset of this V0040JobInfo.  # noqa: E501


        :return: The het_job_offset of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._het_job_offset

    @het_job_offset.setter
    def het_job_offset(self, het_job_offset):
        """Sets the het_job_offset of this V0040JobInfo.


        :param het_job_offset: The het_job_offset of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._het_job_offset = het_job_offset

    @property
    def job_id(self):
        """Gets the job_id of this V0040JobInfo.  # noqa: E501

        Job ID  # noqa: E501

        :return: The job_id of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this V0040JobInfo.

        Job ID  # noqa: E501

        :param job_id: The job_id of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def job_resources(self):
        """Gets the job_resources of this V0040JobInfo.  # noqa: E501


        :return: The job_resources of this V0040JobInfo.  # noqa: E501
        :rtype: V0040JobRes
        """
        return self._job_resources

    @job_resources.setter
    def job_resources(self, job_resources):
        """Sets the job_resources of this V0040JobInfo.


        :param job_resources: The job_resources of this V0040JobInfo.  # noqa: E501
        :type: V0040JobRes
        """

        self._job_resources = job_resources

    @property
    def job_size_str(self):
        """Gets the job_size_str of this V0040JobInfo.  # noqa: E501


        :return: The job_size_str of this V0040JobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._job_size_str

    @job_size_str.setter
    def job_size_str(self, job_size_str):
        """Sets the job_size_str of this V0040JobInfo.


        :param job_size_str: The job_size_str of this V0040JobInfo.  # noqa: E501
        :type: list[str]
        """

        self._job_size_str = job_size_str

    @property
    def job_state(self):
        """Gets the job_state of this V0040JobInfo.  # noqa: E501

        Current state  # noqa: E501

        :return: The job_state of this V0040JobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state):
        """Sets the job_state of this V0040JobInfo.

        Current state  # noqa: E501

        :param job_state: The job_state of this V0040JobInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["PENDING", "RUNNING", "SUSPENDED", "COMPLETED", "CANCELLED", "FAILED", "TIMEOUT", "NODE_FAIL", "PREEMPTED", "BOOT_FAIL", "DEADLINE", "OUT_OF_MEMORY", "LAUNCH_FAILED", "UPDATE_DB", "REQUEUED", "REQUEUE_HOLD", "SPECIAL_EXIT", "RESIZING", "CONFIGURING", "COMPLETING", "STOPPED", "RECONFIG_FAIL", "POWER_UP_NODE", "REVOKED", "REQUEUE_FED", "RESV_DEL_HOLD", "SIGNALING", "STAGE_OUT"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(job_state).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `job_state` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(job_state) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._job_state = job_state

    @property
    def last_sched_evaluation(self):
        """Gets the last_sched_evaluation of this V0040JobInfo.  # noqa: E501


        :return: The last_sched_evaluation of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._last_sched_evaluation

    @last_sched_evaluation.setter
    def last_sched_evaluation(self, last_sched_evaluation):
        """Sets the last_sched_evaluation of this V0040JobInfo.


        :param last_sched_evaluation: The last_sched_evaluation of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._last_sched_evaluation = last_sched_evaluation

    @property
    def licenses(self):
        """Gets the licenses of this V0040JobInfo.  # noqa: E501

        License(s) required by the job  # noqa: E501

        :return: The licenses of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this V0040JobInfo.

        License(s) required by the job  # noqa: E501

        :param licenses: The licenses of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._licenses = licenses

    @property
    def mail_type(self):
        """Gets the mail_type of this V0040JobInfo.  # noqa: E501

        Mail event type(s)  # noqa: E501

        :return: The mail_type of this V0040JobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._mail_type

    @mail_type.setter
    def mail_type(self, mail_type):
        """Sets the mail_type of this V0040JobInfo.

        Mail event type(s)  # noqa: E501

        :param mail_type: The mail_type of this V0040JobInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["BEGIN", "END", "FAIL", "REQUEUE", "TIME=100%", "TIME=90%", "TIME=80%", "TIME=50%", "STAGE_OUT", "ARRAY_TASKS", "INVALID_DEPENDENCY"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(mail_type).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `mail_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(mail_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._mail_type = mail_type

    @property
    def mail_user(self):
        """Gets the mail_user of this V0040JobInfo.  # noqa: E501

        User to receive email notifications  # noqa: E501

        :return: The mail_user of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._mail_user

    @mail_user.setter
    def mail_user(self, mail_user):
        """Sets the mail_user of this V0040JobInfo.

        User to receive email notifications  # noqa: E501

        :param mail_user: The mail_user of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._mail_user = mail_user

    @property
    def max_cpus(self):
        """Gets the max_cpus of this V0040JobInfo.  # noqa: E501


        :return: The max_cpus of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._max_cpus

    @max_cpus.setter
    def max_cpus(self, max_cpus):
        """Sets the max_cpus of this V0040JobInfo.


        :param max_cpus: The max_cpus of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._max_cpus = max_cpus

    @property
    def max_nodes(self):
        """Gets the max_nodes of this V0040JobInfo.  # noqa: E501


        :return: The max_nodes of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes):
        """Sets the max_nodes of this V0040JobInfo.


        :param max_nodes: The max_nodes of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._max_nodes = max_nodes

    @property
    def mcs_label(self):
        """Gets the mcs_label of this V0040JobInfo.  # noqa: E501

        Multi-Category Security label on the job  # noqa: E501

        :return: The mcs_label of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._mcs_label

    @mcs_label.setter
    def mcs_label(self, mcs_label):
        """Sets the mcs_label of this V0040JobInfo.

        Multi-Category Security label on the job  # noqa: E501

        :param mcs_label: The mcs_label of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._mcs_label = mcs_label

    @property
    def memory_per_tres(self):
        """Gets the memory_per_tres of this V0040JobInfo.  # noqa: E501

        Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)  # noqa: E501

        :return: The memory_per_tres of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._memory_per_tres

    @memory_per_tres.setter
    def memory_per_tres(self, memory_per_tres):
        """Sets the memory_per_tres of this V0040JobInfo.

        Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)  # noqa: E501

        :param memory_per_tres: The memory_per_tres of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._memory_per_tres = memory_per_tres

    @property
    def name(self):
        """Gets the name of this V0040JobInfo.  # noqa: E501

        Job name  # noqa: E501

        :return: The name of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040JobInfo.

        Job name  # noqa: E501

        :param name: The name of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this V0040JobInfo.  # noqa: E501

        Network specs for the job  # noqa: E501

        :return: The network of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this V0040JobInfo.

        Network specs for the job  # noqa: E501

        :param network: The network of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def nodes(self):
        """Gets the nodes of this V0040JobInfo.  # noqa: E501

        Node(s) allocated to the job  # noqa: E501

        :return: The nodes of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this V0040JobInfo.

        Node(s) allocated to the job  # noqa: E501

        :param nodes: The nodes of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._nodes = nodes

    @property
    def nice(self):
        """Gets the nice of this V0040JobInfo.  # noqa: E501

        Requested job priority change  # noqa: E501

        :return: The nice of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._nice

    @nice.setter
    def nice(self, nice):
        """Sets the nice of this V0040JobInfo.

        Requested job priority change  # noqa: E501

        :param nice: The nice of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._nice = nice

    @property
    def tasks_per_core(self):
        """Gets the tasks_per_core of this V0040JobInfo.  # noqa: E501


        :return: The tasks_per_core of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._tasks_per_core

    @tasks_per_core.setter
    def tasks_per_core(self, tasks_per_core):
        """Sets the tasks_per_core of this V0040JobInfo.


        :param tasks_per_core: The tasks_per_core of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._tasks_per_core = tasks_per_core

    @property
    def tasks_per_tres(self):
        """Gets the tasks_per_tres of this V0040JobInfo.  # noqa: E501


        :return: The tasks_per_tres of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._tasks_per_tres

    @tasks_per_tres.setter
    def tasks_per_tres(self, tasks_per_tres):
        """Sets the tasks_per_tres of this V0040JobInfo.


        :param tasks_per_tres: The tasks_per_tres of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._tasks_per_tres = tasks_per_tres

    @property
    def tasks_per_node(self):
        """Gets the tasks_per_node of this V0040JobInfo.  # noqa: E501


        :return: The tasks_per_node of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._tasks_per_node

    @tasks_per_node.setter
    def tasks_per_node(self, tasks_per_node):
        """Sets the tasks_per_node of this V0040JobInfo.


        :param tasks_per_node: The tasks_per_node of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._tasks_per_node = tasks_per_node

    @property
    def tasks_per_socket(self):
        """Gets the tasks_per_socket of this V0040JobInfo.  # noqa: E501


        :return: The tasks_per_socket of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._tasks_per_socket

    @tasks_per_socket.setter
    def tasks_per_socket(self, tasks_per_socket):
        """Sets the tasks_per_socket of this V0040JobInfo.


        :param tasks_per_socket: The tasks_per_socket of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._tasks_per_socket = tasks_per_socket

    @property
    def tasks_per_board(self):
        """Gets the tasks_per_board of this V0040JobInfo.  # noqa: E501


        :return: The tasks_per_board of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._tasks_per_board

    @tasks_per_board.setter
    def tasks_per_board(self, tasks_per_board):
        """Sets the tasks_per_board of this V0040JobInfo.


        :param tasks_per_board: The tasks_per_board of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._tasks_per_board = tasks_per_board

    @property
    def cpus(self):
        """Gets the cpus of this V0040JobInfo.  # noqa: E501


        :return: The cpus of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this V0040JobInfo.


        :param cpus: The cpus of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._cpus = cpus

    @property
    def node_count(self):
        """Gets the node_count of this V0040JobInfo.  # noqa: E501


        :return: The node_count of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this V0040JobInfo.


        :param node_count: The node_count of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._node_count = node_count

    @property
    def tasks(self):
        """Gets the tasks of this V0040JobInfo.  # noqa: E501


        :return: The tasks of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this V0040JobInfo.


        :param tasks: The tasks of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._tasks = tasks

    @property
    def partition(self):
        """Gets the partition of this V0040JobInfo.  # noqa: E501

        Partition assigned to the job  # noqa: E501

        :return: The partition of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this V0040JobInfo.

        Partition assigned to the job  # noqa: E501

        :param partition: The partition of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def prefer(self):
        """Gets the prefer of this V0040JobInfo.  # noqa: E501

        Feature(s) the job requested but that are not required  # noqa: E501

        :return: The prefer of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._prefer

    @prefer.setter
    def prefer(self, prefer):
        """Sets the prefer of this V0040JobInfo.

        Feature(s) the job requested but that are not required  # noqa: E501

        :param prefer: The prefer of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._prefer = prefer

    @property
    def memory_per_cpu(self):
        """Gets the memory_per_cpu of this V0040JobInfo.  # noqa: E501


        :return: The memory_per_cpu of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._memory_per_cpu

    @memory_per_cpu.setter
    def memory_per_cpu(self, memory_per_cpu):
        """Sets the memory_per_cpu of this V0040JobInfo.


        :param memory_per_cpu: The memory_per_cpu of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._memory_per_cpu = memory_per_cpu

    @property
    def memory_per_node(self):
        """Gets the memory_per_node of this V0040JobInfo.  # noqa: E501


        :return: The memory_per_node of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._memory_per_node

    @memory_per_node.setter
    def memory_per_node(self, memory_per_node):
        """Sets the memory_per_node of this V0040JobInfo.


        :param memory_per_node: The memory_per_node of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._memory_per_node = memory_per_node

    @property
    def minimum_cpus_per_node(self):
        """Gets the minimum_cpus_per_node of this V0040JobInfo.  # noqa: E501


        :return: The minimum_cpus_per_node of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._minimum_cpus_per_node

    @minimum_cpus_per_node.setter
    def minimum_cpus_per_node(self, minimum_cpus_per_node):
        """Sets the minimum_cpus_per_node of this V0040JobInfo.


        :param minimum_cpus_per_node: The minimum_cpus_per_node of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._minimum_cpus_per_node = minimum_cpus_per_node

    @property
    def minimum_tmp_disk_per_node(self):
        """Gets the minimum_tmp_disk_per_node of this V0040JobInfo.  # noqa: E501


        :return: The minimum_tmp_disk_per_node of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._minimum_tmp_disk_per_node

    @minimum_tmp_disk_per_node.setter
    def minimum_tmp_disk_per_node(self, minimum_tmp_disk_per_node):
        """Sets the minimum_tmp_disk_per_node of this V0040JobInfo.


        :param minimum_tmp_disk_per_node: The minimum_tmp_disk_per_node of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._minimum_tmp_disk_per_node = minimum_tmp_disk_per_node

    @property
    def power(self):
        """Gets the power of this V0040JobInfo.  # noqa: E501


        :return: The power of this V0040JobInfo.  # noqa: E501
        :rtype: V0040JobInfoPower
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this V0040JobInfo.


        :param power: The power of this V0040JobInfo.  # noqa: E501
        :type: V0040JobInfoPower
        """

        self._power = power

    @property
    def preempt_time(self):
        """Gets the preempt_time of this V0040JobInfo.  # noqa: E501


        :return: The preempt_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._preempt_time

    @preempt_time.setter
    def preempt_time(self, preempt_time):
        """Sets the preempt_time of this V0040JobInfo.


        :param preempt_time: The preempt_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._preempt_time = preempt_time

    @property
    def preemptable_time(self):
        """Gets the preemptable_time of this V0040JobInfo.  # noqa: E501


        :return: The preemptable_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._preemptable_time

    @preemptable_time.setter
    def preemptable_time(self, preemptable_time):
        """Sets the preemptable_time of this V0040JobInfo.


        :param preemptable_time: The preemptable_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._preemptable_time = preemptable_time

    @property
    def pre_sus_time(self):
        """Gets the pre_sus_time of this V0040JobInfo.  # noqa: E501


        :return: The pre_sus_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._pre_sus_time

    @pre_sus_time.setter
    def pre_sus_time(self, pre_sus_time):
        """Sets the pre_sus_time of this V0040JobInfo.


        :param pre_sus_time: The pre_sus_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._pre_sus_time = pre_sus_time

    @property
    def hold(self):
        """Gets the hold of this V0040JobInfo.  # noqa: E501

        Job held  # noqa: E501

        :return: The hold of this V0040JobInfo.  # noqa: E501
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this V0040JobInfo.

        Job held  # noqa: E501

        :param hold: The hold of this V0040JobInfo.  # noqa: E501
        :type: bool
        """

        self._hold = hold

    @property
    def priority(self):
        """Gets the priority of this V0040JobInfo.  # noqa: E501


        :return: The priority of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this V0040JobInfo.


        :param priority: The priority of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._priority = priority

    @property
    def profile(self):
        """Gets the profile of this V0040JobInfo.  # noqa: E501

        Profile used by the acct_gather_profile plugin  # noqa: E501

        :return: The profile of this V0040JobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this V0040JobInfo.

        Profile used by the acct_gather_profile plugin  # noqa: E501

        :param profile: The profile of this V0040JobInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NOT_SET", "NONE", "ENERGY", "LUSTRE", "NETWORK", "TASK"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(profile).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `profile` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(profile) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._profile = profile

    @property
    def qos(self):
        """Gets the qos of this V0040JobInfo.  # noqa: E501

        Quality of Service assigned to the job  # noqa: E501

        :return: The qos of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this V0040JobInfo.

        Quality of Service assigned to the job  # noqa: E501

        :param qos: The qos of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._qos = qos

    @property
    def reboot(self):
        """Gets the reboot of this V0040JobInfo.  # noqa: E501

        Node reboot requested before start  # noqa: E501

        :return: The reboot of this V0040JobInfo.  # noqa: E501
        :rtype: bool
        """
        return self._reboot

    @reboot.setter
    def reboot(self, reboot):
        """Sets the reboot of this V0040JobInfo.

        Node reboot requested before start  # noqa: E501

        :param reboot: The reboot of this V0040JobInfo.  # noqa: E501
        :type: bool
        """

        self._reboot = reboot

    @property
    def required_nodes(self):
        """Gets the required_nodes of this V0040JobInfo.  # noqa: E501

        Comma separated list of required nodes  # noqa: E501

        :return: The required_nodes of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._required_nodes

    @required_nodes.setter
    def required_nodes(self, required_nodes):
        """Sets the required_nodes of this V0040JobInfo.

        Comma separated list of required nodes  # noqa: E501

        :param required_nodes: The required_nodes of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._required_nodes = required_nodes

    @property
    def minimum_switches(self):
        """Gets the minimum_switches of this V0040JobInfo.  # noqa: E501

        Maximum number of switches (the 'minimum' in the key is incorrect)  # noqa: E501

        :return: The minimum_switches of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._minimum_switches

    @minimum_switches.setter
    def minimum_switches(self, minimum_switches):
        """Sets the minimum_switches of this V0040JobInfo.

        Maximum number of switches (the 'minimum' in the key is incorrect)  # noqa: E501

        :param minimum_switches: The minimum_switches of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._minimum_switches = minimum_switches

    @property
    def requeue(self):
        """Gets the requeue of this V0040JobInfo.  # noqa: E501

        Determines whether the job may be requeued  # noqa: E501

        :return: The requeue of this V0040JobInfo.  # noqa: E501
        :rtype: bool
        """
        return self._requeue

    @requeue.setter
    def requeue(self, requeue):
        """Sets the requeue of this V0040JobInfo.

        Determines whether the job may be requeued  # noqa: E501

        :param requeue: The requeue of this V0040JobInfo.  # noqa: E501
        :type: bool
        """

        self._requeue = requeue

    @property
    def resize_time(self):
        """Gets the resize_time of this V0040JobInfo.  # noqa: E501


        :return: The resize_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._resize_time

    @resize_time.setter
    def resize_time(self, resize_time):
        """Sets the resize_time of this V0040JobInfo.


        :param resize_time: The resize_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._resize_time = resize_time

    @property
    def restart_cnt(self):
        """Gets the restart_cnt of this V0040JobInfo.  # noqa: E501

        Number of job restarts  # noqa: E501

        :return: The restart_cnt of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._restart_cnt

    @restart_cnt.setter
    def restart_cnt(self, restart_cnt):
        """Sets the restart_cnt of this V0040JobInfo.

        Number of job restarts  # noqa: E501

        :param restart_cnt: The restart_cnt of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._restart_cnt = restart_cnt

    @property
    def resv_name(self):
        """Gets the resv_name of this V0040JobInfo.  # noqa: E501

        Name of reservation to use  # noqa: E501

        :return: The resv_name of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._resv_name

    @resv_name.setter
    def resv_name(self, resv_name):
        """Sets the resv_name of this V0040JobInfo.

        Name of reservation to use  # noqa: E501

        :param resv_name: The resv_name of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._resv_name = resv_name

    @property
    def scheduled_nodes(self):
        """Gets the scheduled_nodes of this V0040JobInfo.  # noqa: E501

        List of nodes scheduled to be used for the job  # noqa: E501

        :return: The scheduled_nodes of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_nodes

    @scheduled_nodes.setter
    def scheduled_nodes(self, scheduled_nodes):
        """Sets the scheduled_nodes of this V0040JobInfo.

        List of nodes scheduled to be used for the job  # noqa: E501

        :param scheduled_nodes: The scheduled_nodes of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._scheduled_nodes = scheduled_nodes

    @property
    def selinux_context(self):
        """Gets the selinux_context of this V0040JobInfo.  # noqa: E501

        SELinux context  # noqa: E501

        :return: The selinux_context of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._selinux_context

    @selinux_context.setter
    def selinux_context(self, selinux_context):
        """Sets the selinux_context of this V0040JobInfo.

        SELinux context  # noqa: E501

        :param selinux_context: The selinux_context of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._selinux_context = selinux_context

    @property
    def shared(self):
        """Gets the shared of this V0040JobInfo.  # noqa: E501

        How the job can share resources with other jobs, if at all  # noqa: E501

        :return: The shared of this V0040JobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this V0040JobInfo.

        How the job can share resources with other jobs, if at all  # noqa: E501

        :param shared: The shared of this V0040JobInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["none", "oversubscribe", "user", "mcs"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(shared).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `shared` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(shared) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._shared = shared

    @property
    def exclusive(self):
        """Gets the exclusive of this V0040JobInfo.  # noqa: E501


        :return: The exclusive of this V0040JobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this V0040JobInfo.


        :param exclusive: The exclusive of this V0040JobInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["true", "false", "user", "mcs"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(exclusive).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `exclusive` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(exclusive) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._exclusive = exclusive

    @property
    def oversubscribe(self):
        """Gets the oversubscribe of this V0040JobInfo.  # noqa: E501


        :return: The oversubscribe of this V0040JobInfo.  # noqa: E501
        :rtype: bool
        """
        return self._oversubscribe

    @oversubscribe.setter
    def oversubscribe(self, oversubscribe):
        """Sets the oversubscribe of this V0040JobInfo.


        :param oversubscribe: The oversubscribe of this V0040JobInfo.  # noqa: E501
        :type: bool
        """

        self._oversubscribe = oversubscribe

    @property
    def show_flags(self):
        """Gets the show_flags of this V0040JobInfo.  # noqa: E501

        Job details shown in this response  # noqa: E501

        :return: The show_flags of this V0040JobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._show_flags

    @show_flags.setter
    def show_flags(self, show_flags):
        """Sets the show_flags of this V0040JobInfo.

        Job details shown in this response  # noqa: E501

        :param show_flags: The show_flags of this V0040JobInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ALL", "DETAIL", "MIXED", "LOCAL", "SIBLING", "FEDERATION", "FUTURE"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(show_flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `show_flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(show_flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._show_flags = show_flags

    @property
    def sockets_per_board(self):
        """Gets the sockets_per_board of this V0040JobInfo.  # noqa: E501

        Number of sockets per board required  # noqa: E501

        :return: The sockets_per_board of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._sockets_per_board

    @sockets_per_board.setter
    def sockets_per_board(self, sockets_per_board):
        """Sets the sockets_per_board of this V0040JobInfo.

        Number of sockets per board required  # noqa: E501

        :param sockets_per_board: The sockets_per_board of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._sockets_per_board = sockets_per_board

    @property
    def sockets_per_node(self):
        """Gets the sockets_per_node of this V0040JobInfo.  # noqa: E501


        :return: The sockets_per_node of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._sockets_per_node

    @sockets_per_node.setter
    def sockets_per_node(self, sockets_per_node):
        """Sets the sockets_per_node of this V0040JobInfo.


        :param sockets_per_node: The sockets_per_node of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._sockets_per_node = sockets_per_node

    @property
    def start_time(self):
        """Gets the start_time of this V0040JobInfo.  # noqa: E501


        :return: The start_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V0040JobInfo.


        :param start_time: The start_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._start_time = start_time

    @property
    def state_description(self):
        """Gets the state_description of this V0040JobInfo.  # noqa: E501

        Optional details for state_reason  # noqa: E501

        :return: The state_description of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._state_description

    @state_description.setter
    def state_description(self, state_description):
        """Sets the state_description of this V0040JobInfo.

        Optional details for state_reason  # noqa: E501

        :param state_description: The state_description of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._state_description = state_description

    @property
    def state_reason(self):
        """Gets the state_reason of this V0040JobInfo.  # noqa: E501

        Reason for current Pending or Failed state  # noqa: E501

        :return: The state_reason of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason):
        """Sets the state_reason of this V0040JobInfo.

        Reason for current Pending or Failed state  # noqa: E501

        :param state_reason: The state_reason of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._state_reason = state_reason

    @property
    def standard_error(self):
        """Gets the standard_error of this V0040JobInfo.  # noqa: E501

        Path to stderr file  # noqa: E501

        :return: The standard_error of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._standard_error

    @standard_error.setter
    def standard_error(self, standard_error):
        """Sets the standard_error of this V0040JobInfo.

        Path to stderr file  # noqa: E501

        :param standard_error: The standard_error of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._standard_error = standard_error

    @property
    def standard_input(self):
        """Gets the standard_input of this V0040JobInfo.  # noqa: E501

        Path to stdin file  # noqa: E501

        :return: The standard_input of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._standard_input

    @standard_input.setter
    def standard_input(self, standard_input):
        """Sets the standard_input of this V0040JobInfo.

        Path to stdin file  # noqa: E501

        :param standard_input: The standard_input of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._standard_input = standard_input

    @property
    def standard_output(self):
        """Gets the standard_output of this V0040JobInfo.  # noqa: E501

        Path to stdout file  # noqa: E501

        :return: The standard_output of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._standard_output

    @standard_output.setter
    def standard_output(self, standard_output):
        """Sets the standard_output of this V0040JobInfo.

        Path to stdout file  # noqa: E501

        :param standard_output: The standard_output of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._standard_output = standard_output

    @property
    def submit_time(self):
        """Gets the submit_time of this V0040JobInfo.  # noqa: E501


        :return: The submit_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time):
        """Sets the submit_time of this V0040JobInfo.


        :param submit_time: The submit_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._submit_time = submit_time

    @property
    def suspend_time(self):
        """Gets the suspend_time of this V0040JobInfo.  # noqa: E501


        :return: The suspend_time of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._suspend_time

    @suspend_time.setter
    def suspend_time(self, suspend_time):
        """Sets the suspend_time of this V0040JobInfo.


        :param suspend_time: The suspend_time of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._suspend_time = suspend_time

    @property
    def system_comment(self):
        """Gets the system_comment of this V0040JobInfo.  # noqa: E501

        Arbitrary comment from slurmctld  # noqa: E501

        :return: The system_comment of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._system_comment

    @system_comment.setter
    def system_comment(self, system_comment):
        """Sets the system_comment of this V0040JobInfo.

        Arbitrary comment from slurmctld  # noqa: E501

        :param system_comment: The system_comment of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._system_comment = system_comment

    @property
    def time_limit(self):
        """Gets the time_limit of this V0040JobInfo.  # noqa: E501


        :return: The time_limit of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._time_limit

    @time_limit.setter
    def time_limit(self, time_limit):
        """Sets the time_limit of this V0040JobInfo.


        :param time_limit: The time_limit of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._time_limit = time_limit

    @property
    def time_minimum(self):
        """Gets the time_minimum of this V0040JobInfo.  # noqa: E501


        :return: The time_minimum of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._time_minimum

    @time_minimum.setter
    def time_minimum(self, time_minimum):
        """Sets the time_minimum of this V0040JobInfo.


        :param time_minimum: The time_minimum of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._time_minimum = time_minimum

    @property
    def threads_per_core(self):
        """Gets the threads_per_core of this V0040JobInfo.  # noqa: E501


        :return: The threads_per_core of this V0040JobInfo.  # noqa: E501
        :rtype: V0040Uint16NoVal
        """
        return self._threads_per_core

    @threads_per_core.setter
    def threads_per_core(self, threads_per_core):
        """Sets the threads_per_core of this V0040JobInfo.


        :param threads_per_core: The threads_per_core of this V0040JobInfo.  # noqa: E501
        :type: V0040Uint16NoVal
        """

        self._threads_per_core = threads_per_core

    @property
    def tres_bind(self):
        """Gets the tres_bind of this V0040JobInfo.  # noqa: E501

        Task to TRES binding directives  # noqa: E501

        :return: The tres_bind of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._tres_bind

    @tres_bind.setter
    def tres_bind(self, tres_bind):
        """Sets the tres_bind of this V0040JobInfo.

        Task to TRES binding directives  # noqa: E501

        :param tres_bind: The tres_bind of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._tres_bind = tres_bind

    @property
    def tres_freq(self):
        """Gets the tres_freq of this V0040JobInfo.  # noqa: E501

        TRES frequency directives  # noqa: E501

        :return: The tres_freq of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._tres_freq

    @tres_freq.setter
    def tres_freq(self, tres_freq):
        """Sets the tres_freq of this V0040JobInfo.

        TRES frequency directives  # noqa: E501

        :param tres_freq: The tres_freq of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._tres_freq = tres_freq

    @property
    def tres_per_job(self):
        """Gets the tres_per_job of this V0040JobInfo.  # noqa: E501

        Comma separated list of TRES=# values to be allocated per job  # noqa: E501

        :return: The tres_per_job of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._tres_per_job

    @tres_per_job.setter
    def tres_per_job(self, tres_per_job):
        """Sets the tres_per_job of this V0040JobInfo.

        Comma separated list of TRES=# values to be allocated per job  # noqa: E501

        :param tres_per_job: The tres_per_job of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._tres_per_job = tres_per_job

    @property
    def tres_per_node(self):
        """Gets the tres_per_node of this V0040JobInfo.  # noqa: E501

        Comma separated list of TRES=# values to be allocated per node  # noqa: E501

        :return: The tres_per_node of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._tres_per_node

    @tres_per_node.setter
    def tres_per_node(self, tres_per_node):
        """Sets the tres_per_node of this V0040JobInfo.

        Comma separated list of TRES=# values to be allocated per node  # noqa: E501

        :param tres_per_node: The tres_per_node of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._tres_per_node = tres_per_node

    @property
    def tres_per_socket(self):
        """Gets the tres_per_socket of this V0040JobInfo.  # noqa: E501

        Comma separated list of TRES=# values to be allocated per socket  # noqa: E501

        :return: The tres_per_socket of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._tres_per_socket

    @tres_per_socket.setter
    def tres_per_socket(self, tres_per_socket):
        """Sets the tres_per_socket of this V0040JobInfo.

        Comma separated list of TRES=# values to be allocated per socket  # noqa: E501

        :param tres_per_socket: The tres_per_socket of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._tres_per_socket = tres_per_socket

    @property
    def tres_per_task(self):
        """Gets the tres_per_task of this V0040JobInfo.  # noqa: E501

        Comma separated list of TRES=# values to be allocated per task  # noqa: E501

        :return: The tres_per_task of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._tres_per_task

    @tres_per_task.setter
    def tres_per_task(self, tres_per_task):
        """Sets the tres_per_task of this V0040JobInfo.

        Comma separated list of TRES=# values to be allocated per task  # noqa: E501

        :param tres_per_task: The tres_per_task of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._tres_per_task = tres_per_task

    @property
    def tres_req_str(self):
        """Gets the tres_req_str of this V0040JobInfo.  # noqa: E501

        TRES requested by the job  # noqa: E501

        :return: The tres_req_str of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._tres_req_str

    @tres_req_str.setter
    def tres_req_str(self, tres_req_str):
        """Sets the tres_req_str of this V0040JobInfo.

        TRES requested by the job  # noqa: E501

        :param tres_req_str: The tres_req_str of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._tres_req_str = tres_req_str

    @property
    def tres_alloc_str(self):
        """Gets the tres_alloc_str of this V0040JobInfo.  # noqa: E501

        TRES used by the job  # noqa: E501

        :return: The tres_alloc_str of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._tres_alloc_str

    @tres_alloc_str.setter
    def tres_alloc_str(self, tres_alloc_str):
        """Sets the tres_alloc_str of this V0040JobInfo.

        TRES used by the job  # noqa: E501

        :param tres_alloc_str: The tres_alloc_str of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._tres_alloc_str = tres_alloc_str

    @property
    def user_id(self):
        """Gets the user_id of this V0040JobInfo.  # noqa: E501

        User ID that owns the job  # noqa: E501

        :return: The user_id of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V0040JobInfo.

        User ID that owns the job  # noqa: E501

        :param user_id: The user_id of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this V0040JobInfo.  # noqa: E501

        User name that owns the job  # noqa: E501

        :return: The user_name of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this V0040JobInfo.

        User name that owns the job  # noqa: E501

        :param user_name: The user_name of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def maximum_switch_wait_time(self):
        """Gets the maximum_switch_wait_time of this V0040JobInfo.  # noqa: E501

        Maximum time to wait for switches in seconds  # noqa: E501

        :return: The maximum_switch_wait_time of this V0040JobInfo.  # noqa: E501
        :rtype: int
        """
        return self._maximum_switch_wait_time

    @maximum_switch_wait_time.setter
    def maximum_switch_wait_time(self, maximum_switch_wait_time):
        """Sets the maximum_switch_wait_time of this V0040JobInfo.

        Maximum time to wait for switches in seconds  # noqa: E501

        :param maximum_switch_wait_time: The maximum_switch_wait_time of this V0040JobInfo.  # noqa: E501
        :type: int
        """

        self._maximum_switch_wait_time = maximum_switch_wait_time

    @property
    def wckey(self):
        """Gets the wckey of this V0040JobInfo.  # noqa: E501

        Workload characterization key  # noqa: E501

        :return: The wckey of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._wckey

    @wckey.setter
    def wckey(self, wckey):
        """Sets the wckey of this V0040JobInfo.

        Workload characterization key  # noqa: E501

        :param wckey: The wckey of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._wckey = wckey

    @property
    def current_working_directory(self):
        """Gets the current_working_directory of this V0040JobInfo.  # noqa: E501

        Working directory to use for the job  # noqa: E501

        :return: The current_working_directory of this V0040JobInfo.  # noqa: E501
        :rtype: str
        """
        return self._current_working_directory

    @current_working_directory.setter
    def current_working_directory(self, current_working_directory):
        """Sets the current_working_directory of this V0040JobInfo.

        Working directory to use for the job  # noqa: E501

        :param current_working_directory: The current_working_directory of this V0040JobInfo.  # noqa: E501
        :type: str
        """

        self._current_working_directory = current_working_directory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040JobInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040JobInfo):
            return True

        return self.to_dict() != other.to_dict()
