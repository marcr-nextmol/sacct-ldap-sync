# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040OpenapiError(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'error_number': 'int',
        'error': 'str',
        'source': 'str'
    }

    attribute_map = {
        'description': 'description',
        'error_number': 'error_number',
        'error': 'error',
        'source': 'source'
    }

    def __init__(self, description=None, error_number=None, error=None, source=None, local_vars_configuration=None):  # noqa: E501
        """V0040OpenapiError - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._error_number = None
        self._error = None
        self._source = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if error_number is not None:
            self.error_number = error_number
        if error is not None:
            self.error = error
        if source is not None:
            self.source = source

    @property
    def description(self):
        """Gets the description of this V0040OpenapiError.  # noqa: E501

        Long form error description  # noqa: E501

        :return: The description of this V0040OpenapiError.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V0040OpenapiError.

        Long form error description  # noqa: E501

        :param description: The description of this V0040OpenapiError.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def error_number(self):
        """Gets the error_number of this V0040OpenapiError.  # noqa: E501

        Slurm numeric error identifier  # noqa: E501

        :return: The error_number of this V0040OpenapiError.  # noqa: E501
        :rtype: int
        """
        return self._error_number

    @error_number.setter
    def error_number(self, error_number):
        """Sets the error_number of this V0040OpenapiError.

        Slurm numeric error identifier  # noqa: E501

        :param error_number: The error_number of this V0040OpenapiError.  # noqa: E501
        :type: int
        """

        self._error_number = error_number

    @property
    def error(self):
        """Gets the error of this V0040OpenapiError.  # noqa: E501

        Short form error description  # noqa: E501

        :return: The error of this V0040OpenapiError.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this V0040OpenapiError.

        Short form error description  # noqa: E501

        :param error: The error of this V0040OpenapiError.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def source(self):
        """Gets the source of this V0040OpenapiError.  # noqa: E501

        Source of error or where error was first detected  # noqa: E501

        :return: The source of this V0040OpenapiError.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this V0040OpenapiError.

        Source of error or where error was first detected  # noqa: E501

        :param source: The source of this V0040OpenapiError.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040OpenapiError):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040OpenapiError):
            return True

        return self.to_dict() != other.to_dict()
