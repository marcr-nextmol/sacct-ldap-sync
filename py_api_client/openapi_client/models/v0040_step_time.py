# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040StepTime(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'elapsed': 'int',
        'end': 'V0040Uint64NoVal',
        'start': 'V0040Uint64NoVal',
        'suspended': 'int',
        'system': 'V0040StepTimeSystem',
        'total': 'V0040StepTimeTotal',
        'user': 'V0040StepTimeUser'
    }

    attribute_map = {
        'elapsed': 'elapsed',
        'end': 'end',
        'start': 'start',
        'suspended': 'suspended',
        'system': 'system',
        'total': 'total',
        'user': 'user'
    }

    def __init__(self, elapsed=None, end=None, start=None, suspended=None, system=None, total=None, user=None, local_vars_configuration=None):  # noqa: E501
        """V0040StepTime - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._elapsed = None
        self._end = None
        self._start = None
        self._suspended = None
        self._system = None
        self._total = None
        self._user = None
        self.discriminator = None

        if elapsed is not None:
            self.elapsed = elapsed
        if end is not None:
            self.end = end
        if start is not None:
            self.start = start
        if suspended is not None:
            self.suspended = suspended
        if system is not None:
            self.system = system
        if total is not None:
            self.total = total
        if user is not None:
            self.user = user

    @property
    def elapsed(self):
        """Gets the elapsed of this V0040StepTime.  # noqa: E501

        Elapsed time in seconds  # noqa: E501

        :return: The elapsed of this V0040StepTime.  # noqa: E501
        :rtype: int
        """
        return self._elapsed

    @elapsed.setter
    def elapsed(self, elapsed):
        """Sets the elapsed of this V0040StepTime.

        Elapsed time in seconds  # noqa: E501

        :param elapsed: The elapsed of this V0040StepTime.  # noqa: E501
        :type: int
        """

        self._elapsed = elapsed

    @property
    def end(self):
        """Gets the end of this V0040StepTime.  # noqa: E501


        :return: The end of this V0040StepTime.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this V0040StepTime.


        :param end: The end of this V0040StepTime.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._end = end

    @property
    def start(self):
        """Gets the start of this V0040StepTime.  # noqa: E501


        :return: The start of this V0040StepTime.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this V0040StepTime.


        :param start: The start of this V0040StepTime.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._start = start

    @property
    def suspended(self):
        """Gets the suspended of this V0040StepTime.  # noqa: E501

        Time in suspended state in seconds  # noqa: E501

        :return: The suspended of this V0040StepTime.  # noqa: E501
        :rtype: int
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this V0040StepTime.

        Time in suspended state in seconds  # noqa: E501

        :param suspended: The suspended of this V0040StepTime.  # noqa: E501
        :type: int
        """

        self._suspended = suspended

    @property
    def system(self):
        """Gets the system of this V0040StepTime.  # noqa: E501


        :return: The system of this V0040StepTime.  # noqa: E501
        :rtype: V0040StepTimeSystem
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this V0040StepTime.


        :param system: The system of this V0040StepTime.  # noqa: E501
        :type: V0040StepTimeSystem
        """

        self._system = system

    @property
    def total(self):
        """Gets the total of this V0040StepTime.  # noqa: E501


        :return: The total of this V0040StepTime.  # noqa: E501
        :rtype: V0040StepTimeTotal
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this V0040StepTime.


        :param total: The total of this V0040StepTime.  # noqa: E501
        :type: V0040StepTimeTotal
        """

        self._total = total

    @property
    def user(self):
        """Gets the user of this V0040StepTime.  # noqa: E501


        :return: The user of this V0040StepTime.  # noqa: E501
        :rtype: V0040StepTimeUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V0040StepTime.


        :param user: The user of this V0040StepTime.  # noqa: E501
        :type: V0040StepTimeUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040StepTime):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040StepTime):
            return True

        return self.to_dict() != other.to_dict()
