# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040CronEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'flags': 'list[str]',
        'minute': 'str',
        'hour': 'str',
        'day_of_month': 'str',
        'month': 'str',
        'day_of_week': 'str',
        'specification': 'str',
        'command': 'str',
        'line': 'V0040CronEntryLine'
    }

    attribute_map = {
        'flags': 'flags',
        'minute': 'minute',
        'hour': 'hour',
        'day_of_month': 'day_of_month',
        'month': 'month',
        'day_of_week': 'day_of_week',
        'specification': 'specification',
        'command': 'command',
        'line': 'line'
    }

    def __init__(self, flags=None, minute=None, hour=None, day_of_month=None, month=None, day_of_week=None, specification=None, command=None, line=None, local_vars_configuration=None):  # noqa: E501
        """V0040CronEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._flags = None
        self._minute = None
        self._hour = None
        self._day_of_month = None
        self._month = None
        self._day_of_week = None
        self._specification = None
        self._command = None
        self._line = None
        self.discriminator = None

        if flags is not None:
            self.flags = flags
        if minute is not None:
            self.minute = minute
        if hour is not None:
            self.hour = hour
        if day_of_month is not None:
            self.day_of_month = day_of_month
        if month is not None:
            self.month = month
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if specification is not None:
            self.specification = specification
        if command is not None:
            self.command = command
        if line is not None:
            self.line = line

    @property
    def flags(self):
        """Gets the flags of this V0040CronEntry.  # noqa: E501

        Flags  # noqa: E501

        :return: The flags of this V0040CronEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040CronEntry.

        Flags  # noqa: E501

        :param flags: The flags of this V0040CronEntry.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["WILD_MINUTE", "WILD_HOUR", "WILD_DAY_OF_MONTH", "WILD_MONTH", "WILD_DAY_OF_WEEK"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def minute(self):
        """Gets the minute of this V0040CronEntry.  # noqa: E501

        Ranged string specifying eligible minute values (e.g. 0-10,50)  # noqa: E501

        :return: The minute of this V0040CronEntry.  # noqa: E501
        :rtype: str
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this V0040CronEntry.

        Ranged string specifying eligible minute values (e.g. 0-10,50)  # noqa: E501

        :param minute: The minute of this V0040CronEntry.  # noqa: E501
        :type: str
        """

        self._minute = minute

    @property
    def hour(self):
        """Gets the hour of this V0040CronEntry.  # noqa: E501

        Ranged string specifying eligible hour values (e.g. 0-5,23)  # noqa: E501

        :return: The hour of this V0040CronEntry.  # noqa: E501
        :rtype: str
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this V0040CronEntry.

        Ranged string specifying eligible hour values (e.g. 0-5,23)  # noqa: E501

        :param hour: The hour of this V0040CronEntry.  # noqa: E501
        :type: str
        """

        self._hour = hour

    @property
    def day_of_month(self):
        """Gets the day_of_month of this V0040CronEntry.  # noqa: E501

        Ranged string specifying eligible day of month values (e.g. 0-10,29)  # noqa: E501

        :return: The day_of_month of this V0040CronEntry.  # noqa: E501
        :rtype: str
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this V0040CronEntry.

        Ranged string specifying eligible day of month values (e.g. 0-10,29)  # noqa: E501

        :param day_of_month: The day_of_month of this V0040CronEntry.  # noqa: E501
        :type: str
        """

        self._day_of_month = day_of_month

    @property
    def month(self):
        """Gets the month of this V0040CronEntry.  # noqa: E501

        Ranged string specifying eligible month values (e.g. 0-5,12)  # noqa: E501

        :return: The month of this V0040CronEntry.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this V0040CronEntry.

        Ranged string specifying eligible month values (e.g. 0-5,12)  # noqa: E501

        :param month: The month of this V0040CronEntry.  # noqa: E501
        :type: str
        """

        self._month = month

    @property
    def day_of_week(self):
        """Gets the day_of_week of this V0040CronEntry.  # noqa: E501

        Ranged string specifying eligible day of week values (e.g.0-3,7)  # noqa: E501

        :return: The day_of_week of this V0040CronEntry.  # noqa: E501
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this V0040CronEntry.

        Ranged string specifying eligible day of week values (e.g.0-3,7)  # noqa: E501

        :param day_of_week: The day_of_week of this V0040CronEntry.  # noqa: E501
        :type: str
        """

        self._day_of_week = day_of_week

    @property
    def specification(self):
        """Gets the specification of this V0040CronEntry.  # noqa: E501

        Time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week  # noqa: E501

        :return: The specification of this V0040CronEntry.  # noqa: E501
        :rtype: str
        """
        return self._specification

    @specification.setter
    def specification(self, specification):
        """Sets the specification of this V0040CronEntry.

        Time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week  # noqa: E501

        :param specification: The specification of this V0040CronEntry.  # noqa: E501
        :type: str
        """

        self._specification = specification

    @property
    def command(self):
        """Gets the command of this V0040CronEntry.  # noqa: E501

        Command to run  # noqa: E501

        :return: The command of this V0040CronEntry.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this V0040CronEntry.

        Command to run  # noqa: E501

        :param command: The command of this V0040CronEntry.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def line(self):
        """Gets the line of this V0040CronEntry.  # noqa: E501


        :return: The line of this V0040CronEntry.  # noqa: E501
        :rtype: V0040CronEntryLine
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this V0040CronEntry.


        :param line: The line of this V0040CronEntry.  # noqa: E501
        :type: V0040CronEntryLine
        """

        self._line = line

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040CronEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040CronEntry):
            return True

        return self.to_dict() != other.to_dict()
