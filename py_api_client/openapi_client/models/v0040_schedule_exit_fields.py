# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040ScheduleExitFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'end_job_queue': 'int',
        'default_queue_depth': 'int',
        'max_job_start': 'int',
        'max_rpc_cnt': 'int',
        'max_sched_time': 'int',
        'licenses': 'int'
    }

    attribute_map = {
        'end_job_queue': 'end_job_queue',
        'default_queue_depth': 'default_queue_depth',
        'max_job_start': 'max_job_start',
        'max_rpc_cnt': 'max_rpc_cnt',
        'max_sched_time': 'max_sched_time',
        'licenses': 'licenses'
    }

    def __init__(self, end_job_queue=None, default_queue_depth=None, max_job_start=None, max_rpc_cnt=None, max_sched_time=None, licenses=None, local_vars_configuration=None):  # noqa: E501
        """V0040ScheduleExitFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._end_job_queue = None
        self._default_queue_depth = None
        self._max_job_start = None
        self._max_rpc_cnt = None
        self._max_sched_time = None
        self._licenses = None
        self.discriminator = None

        if end_job_queue is not None:
            self.end_job_queue = end_job_queue
        if default_queue_depth is not None:
            self.default_queue_depth = default_queue_depth
        if max_job_start is not None:
            self.max_job_start = max_job_start
        if max_rpc_cnt is not None:
            self.max_rpc_cnt = max_rpc_cnt
        if max_sched_time is not None:
            self.max_sched_time = max_sched_time
        if licenses is not None:
            self.licenses = licenses

    @property
    def end_job_queue(self):
        """Gets the end_job_queue of this V0040ScheduleExitFields.  # noqa: E501

        Reached end of queue  # noqa: E501

        :return: The end_job_queue of this V0040ScheduleExitFields.  # noqa: E501
        :rtype: int
        """
        return self._end_job_queue

    @end_job_queue.setter
    def end_job_queue(self, end_job_queue):
        """Sets the end_job_queue of this V0040ScheduleExitFields.

        Reached end of queue  # noqa: E501

        :param end_job_queue: The end_job_queue of this V0040ScheduleExitFields.  # noqa: E501
        :type: int
        """

        self._end_job_queue = end_job_queue

    @property
    def default_queue_depth(self):
        """Gets the default_queue_depth of this V0040ScheduleExitFields.  # noqa: E501

        Reached number of jobs allowed to be tested  # noqa: E501

        :return: The default_queue_depth of this V0040ScheduleExitFields.  # noqa: E501
        :rtype: int
        """
        return self._default_queue_depth

    @default_queue_depth.setter
    def default_queue_depth(self, default_queue_depth):
        """Sets the default_queue_depth of this V0040ScheduleExitFields.

        Reached number of jobs allowed to be tested  # noqa: E501

        :param default_queue_depth: The default_queue_depth of this V0040ScheduleExitFields.  # noqa: E501
        :type: int
        """

        self._default_queue_depth = default_queue_depth

    @property
    def max_job_start(self):
        """Gets the max_job_start of this V0040ScheduleExitFields.  # noqa: E501

        Reached number of jobs allowed to start  # noqa: E501

        :return: The max_job_start of this V0040ScheduleExitFields.  # noqa: E501
        :rtype: int
        """
        return self._max_job_start

    @max_job_start.setter
    def max_job_start(self, max_job_start):
        """Sets the max_job_start of this V0040ScheduleExitFields.

        Reached number of jobs allowed to start  # noqa: E501

        :param max_job_start: The max_job_start of this V0040ScheduleExitFields.  # noqa: E501
        :type: int
        """

        self._max_job_start = max_job_start

    @property
    def max_rpc_cnt(self):
        """Gets the max_rpc_cnt of this V0040ScheduleExitFields.  # noqa: E501

        Reached RPC limit  # noqa: E501

        :return: The max_rpc_cnt of this V0040ScheduleExitFields.  # noqa: E501
        :rtype: int
        """
        return self._max_rpc_cnt

    @max_rpc_cnt.setter
    def max_rpc_cnt(self, max_rpc_cnt):
        """Sets the max_rpc_cnt of this V0040ScheduleExitFields.

        Reached RPC limit  # noqa: E501

        :param max_rpc_cnt: The max_rpc_cnt of this V0040ScheduleExitFields.  # noqa: E501
        :type: int
        """

        self._max_rpc_cnt = max_rpc_cnt

    @property
    def max_sched_time(self):
        """Gets the max_sched_time of this V0040ScheduleExitFields.  # noqa: E501

        Reached maximum allowed scheduler time  # noqa: E501

        :return: The max_sched_time of this V0040ScheduleExitFields.  # noqa: E501
        :rtype: int
        """
        return self._max_sched_time

    @max_sched_time.setter
    def max_sched_time(self, max_sched_time):
        """Sets the max_sched_time of this V0040ScheduleExitFields.

        Reached maximum allowed scheduler time  # noqa: E501

        :param max_sched_time: The max_sched_time of this V0040ScheduleExitFields.  # noqa: E501
        :type: int
        """

        self._max_sched_time = max_sched_time

    @property
    def licenses(self):
        """Gets the licenses of this V0040ScheduleExitFields.  # noqa: E501

        Blocked on licenses  # noqa: E501

        :return: The licenses of this V0040ScheduleExitFields.  # noqa: E501
        :rtype: int
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this V0040ScheduleExitFields.

        Blocked on licenses  # noqa: E501

        :param licenses: The licenses of this V0040ScheduleExitFields.  # noqa: E501
        :type: int
        """

        self._licenses = licenses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040ScheduleExitFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040ScheduleExitFields):
            return True

        return self.to_dict() != other.to_dict()
