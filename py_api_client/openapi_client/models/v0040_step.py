# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040Step(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time': 'V0040StepTime',
        'exit_code': 'V0040ProcessExitCodeVerbose',
        'nodes': 'V0040StepNodes',
        'tasks': 'V0040StepTasks',
        'pid': 'str',
        'cpu': 'V0040StepCPU',
        'kill_request_user': 'str',
        'state': 'list[str]',
        'statistics': 'V0040StepStatistics',
        'step': 'V0040StepStep',
        'task': 'V0040StepTask',
        'tres': 'V0040StepTres'
    }

    attribute_map = {
        'time': 'time',
        'exit_code': 'exit_code',
        'nodes': 'nodes',
        'tasks': 'tasks',
        'pid': 'pid',
        'cpu': 'CPU',
        'kill_request_user': 'kill_request_user',
        'state': 'state',
        'statistics': 'statistics',
        'step': 'step',
        'task': 'task',
        'tres': 'tres'
    }

    def __init__(self, time=None, exit_code=None, nodes=None, tasks=None, pid=None, cpu=None, kill_request_user=None, state=None, statistics=None, step=None, task=None, tres=None, local_vars_configuration=None):  # noqa: E501
        """V0040Step - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time = None
        self._exit_code = None
        self._nodes = None
        self._tasks = None
        self._pid = None
        self._cpu = None
        self._kill_request_user = None
        self._state = None
        self._statistics = None
        self._step = None
        self._task = None
        self._tres = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if exit_code is not None:
            self.exit_code = exit_code
        if nodes is not None:
            self.nodes = nodes
        if tasks is not None:
            self.tasks = tasks
        if pid is not None:
            self.pid = pid
        if cpu is not None:
            self.cpu = cpu
        if kill_request_user is not None:
            self.kill_request_user = kill_request_user
        if state is not None:
            self.state = state
        if statistics is not None:
            self.statistics = statistics
        if step is not None:
            self.step = step
        if task is not None:
            self.task = task
        if tres is not None:
            self.tres = tres

    @property
    def time(self):
        """Gets the time of this V0040Step.  # noqa: E501


        :return: The time of this V0040Step.  # noqa: E501
        :rtype: V0040StepTime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this V0040Step.


        :param time: The time of this V0040Step.  # noqa: E501
        :type: V0040StepTime
        """

        self._time = time

    @property
    def exit_code(self):
        """Gets the exit_code of this V0040Step.  # noqa: E501


        :return: The exit_code of this V0040Step.  # noqa: E501
        :rtype: V0040ProcessExitCodeVerbose
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this V0040Step.


        :param exit_code: The exit_code of this V0040Step.  # noqa: E501
        :type: V0040ProcessExitCodeVerbose
        """

        self._exit_code = exit_code

    @property
    def nodes(self):
        """Gets the nodes of this V0040Step.  # noqa: E501


        :return: The nodes of this V0040Step.  # noqa: E501
        :rtype: V0040StepNodes
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this V0040Step.


        :param nodes: The nodes of this V0040Step.  # noqa: E501
        :type: V0040StepNodes
        """

        self._nodes = nodes

    @property
    def tasks(self):
        """Gets the tasks of this V0040Step.  # noqa: E501


        :return: The tasks of this V0040Step.  # noqa: E501
        :rtype: V0040StepTasks
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this V0040Step.


        :param tasks: The tasks of this V0040Step.  # noqa: E501
        :type: V0040StepTasks
        """

        self._tasks = tasks

    @property
    def pid(self):
        """Gets the pid of this V0040Step.  # noqa: E501

        Process ID  # noqa: E501

        :return: The pid of this V0040Step.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this V0040Step.

        Process ID  # noqa: E501

        :param pid: The pid of this V0040Step.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def cpu(self):
        """Gets the cpu of this V0040Step.  # noqa: E501


        :return: The cpu of this V0040Step.  # noqa: E501
        :rtype: V0040StepCPU
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this V0040Step.


        :param cpu: The cpu of this V0040Step.  # noqa: E501
        :type: V0040StepCPU
        """

        self._cpu = cpu

    @property
    def kill_request_user(self):
        """Gets the kill_request_user of this V0040Step.  # noqa: E501

        User ID that requested termination of the step  # noqa: E501

        :return: The kill_request_user of this V0040Step.  # noqa: E501
        :rtype: str
        """
        return self._kill_request_user

    @kill_request_user.setter
    def kill_request_user(self, kill_request_user):
        """Sets the kill_request_user of this V0040Step.

        User ID that requested termination of the step  # noqa: E501

        :param kill_request_user: The kill_request_user of this V0040Step.  # noqa: E501
        :type: str
        """

        self._kill_request_user = kill_request_user

    @property
    def state(self):
        """Gets the state of this V0040Step.  # noqa: E501

        Current state  # noqa: E501

        :return: The state of this V0040Step.  # noqa: E501
        :rtype: list[str]
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V0040Step.

        Current state  # noqa: E501

        :param state: The state of this V0040Step.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["PENDING", "RUNNING", "SUSPENDED", "COMPLETED", "CANCELLED", "FAILED", "TIMEOUT", "NODE_FAIL", "PREEMPTED", "BOOT_FAIL", "DEADLINE", "OUT_OF_MEMORY", "LAUNCH_FAILED", "UPDATE_DB", "REQUEUED", "REQUEUE_HOLD", "SPECIAL_EXIT", "RESIZING", "CONFIGURING", "COMPLETING", "STOPPED", "RECONFIG_FAIL", "POWER_UP_NODE", "REVOKED", "REQUEUE_FED", "RESV_DEL_HOLD", "SIGNALING", "STAGE_OUT"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(state).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `state` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(state) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._state = state

    @property
    def statistics(self):
        """Gets the statistics of this V0040Step.  # noqa: E501


        :return: The statistics of this V0040Step.  # noqa: E501
        :rtype: V0040StepStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this V0040Step.


        :param statistics: The statistics of this V0040Step.  # noqa: E501
        :type: V0040StepStatistics
        """

        self._statistics = statistics

    @property
    def step(self):
        """Gets the step of this V0040Step.  # noqa: E501


        :return: The step of this V0040Step.  # noqa: E501
        :rtype: V0040StepStep
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this V0040Step.


        :param step: The step of this V0040Step.  # noqa: E501
        :type: V0040StepStep
        """

        self._step = step

    @property
    def task(self):
        """Gets the task of this V0040Step.  # noqa: E501


        :return: The task of this V0040Step.  # noqa: E501
        :rtype: V0040StepTask
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this V0040Step.


        :param task: The task of this V0040Step.  # noqa: E501
        :type: V0040StepTask
        """

        self._task = task

    @property
    def tres(self):
        """Gets the tres of this V0040Step.  # noqa: E501


        :return: The tres of this V0040Step.  # noqa: E501
        :rtype: V0040StepTres
        """
        return self._tres

    @tres.setter
    def tres(self, tres):
        """Sets the tres of this V0040Step.


        :param tres: The tres of this V0040Step.  # noqa: E501
        :type: V0040StepTres
        """

        self._tres = tres

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040Step):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040Step):
            return True

        return self.to_dict() != other.to_dict()
