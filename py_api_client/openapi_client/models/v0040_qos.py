# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040Qos(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'flags': 'list[str]',
        'id': 'int',
        'limits': 'V0040QosLimits',
        'name': 'str',
        'preempt': 'V0040QosPreempt',
        'priority': 'V0040Uint32NoVal',
        'usage_factor': 'V0040Float64NoVal',
        'usage_threshold': 'V0040Float64NoVal'
    }

    attribute_map = {
        'description': 'description',
        'flags': 'flags',
        'id': 'id',
        'limits': 'limits',
        'name': 'name',
        'preempt': 'preempt',
        'priority': 'priority',
        'usage_factor': 'usage_factor',
        'usage_threshold': 'usage_threshold'
    }

    def __init__(self, description=None, flags=None, id=None, limits=None, name=None, preempt=None, priority=None, usage_factor=None, usage_threshold=None, local_vars_configuration=None):  # noqa: E501
        """V0040Qos - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._flags = None
        self._id = None
        self._limits = None
        self._name = None
        self._preempt = None
        self._priority = None
        self._usage_factor = None
        self._usage_threshold = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if flags is not None:
            self.flags = flags
        if id is not None:
            self.id = id
        if limits is not None:
            self.limits = limits
        if name is not None:
            self.name = name
        if preempt is not None:
            self.preempt = preempt
        if priority is not None:
            self.priority = priority
        if usage_factor is not None:
            self.usage_factor = usage_factor
        if usage_threshold is not None:
            self.usage_threshold = usage_threshold

    @property
    def description(self):
        """Gets the description of this V0040Qos.  # noqa: E501

        Arbitrary description  # noqa: E501

        :return: The description of this V0040Qos.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V0040Qos.

        Arbitrary description  # noqa: E501

        :param description: The description of this V0040Qos.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def flags(self):
        """Gets the flags of this V0040Qos.  # noqa: E501

        Flags, to avoid modifying current values specify NOT_SET.  # noqa: E501

        :return: The flags of this V0040Qos.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040Qos.

        Flags, to avoid modifying current values specify NOT_SET.  # noqa: E501

        :param flags: The flags of this V0040Qos.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NOT_SET", "ADD", "REMOVE", "PARTITION_MINIMUM_NODE", "PARTITION_MAXIMUM_NODE", "PARTITION_TIME_LIMIT", "ENFORCE_USAGE_THRESHOLD", "NO_RESERVE", "REQUIRED_RESERVATION", "DENY_LIMIT", "OVERRIDE_PARTITION_QOS", "NO_DECAY", "USAGE_FACTOR_SAFE", "RELATIVE"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def id(self):
        """Gets the id of this V0040Qos.  # noqa: E501

        Unique ID  # noqa: E501

        :return: The id of this V0040Qos.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V0040Qos.

        Unique ID  # noqa: E501

        :param id: The id of this V0040Qos.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def limits(self):
        """Gets the limits of this V0040Qos.  # noqa: E501


        :return: The limits of this V0040Qos.  # noqa: E501
        :rtype: V0040QosLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this V0040Qos.


        :param limits: The limits of this V0040Qos.  # noqa: E501
        :type: V0040QosLimits
        """

        self._limits = limits

    @property
    def name(self):
        """Gets the name of this V0040Qos.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this V0040Qos.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040Qos.

        Name  # noqa: E501

        :param name: The name of this V0040Qos.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def preempt(self):
        """Gets the preempt of this V0040Qos.  # noqa: E501


        :return: The preempt of this V0040Qos.  # noqa: E501
        :rtype: V0040QosPreempt
        """
        return self._preempt

    @preempt.setter
    def preempt(self, preempt):
        """Sets the preempt of this V0040Qos.


        :param preempt: The preempt of this V0040Qos.  # noqa: E501
        :type: V0040QosPreempt
        """

        self._preempt = preempt

    @property
    def priority(self):
        """Gets the priority of this V0040Qos.  # noqa: E501


        :return: The priority of this V0040Qos.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this V0040Qos.


        :param priority: The priority of this V0040Qos.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._priority = priority

    @property
    def usage_factor(self):
        """Gets the usage_factor of this V0040Qos.  # noqa: E501


        :return: The usage_factor of this V0040Qos.  # noqa: E501
        :rtype: V0040Float64NoVal
        """
        return self._usage_factor

    @usage_factor.setter
    def usage_factor(self, usage_factor):
        """Sets the usage_factor of this V0040Qos.


        :param usage_factor: The usage_factor of this V0040Qos.  # noqa: E501
        :type: V0040Float64NoVal
        """

        self._usage_factor = usage_factor

    @property
    def usage_threshold(self):
        """Gets the usage_threshold of this V0040Qos.  # noqa: E501


        :return: The usage_threshold of this V0040Qos.  # noqa: E501
        :rtype: V0040Float64NoVal
        """
        return self._usage_threshold

    @usage_threshold.setter
    def usage_threshold(self, usage_threshold):
        """Sets the usage_threshold of this V0040Qos.


        :param usage_threshold: The usage_threshold of this V0040Qos.  # noqa: E501
        :type: V0040Float64NoVal
        """

        self._usage_threshold = usage_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040Qos):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040Qos):
            return True

        return self.to_dict() != other.to_dict()
