# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040OpenapiAccountsAddCondResp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'association_condition': 'V0040AccountsAddCond',
        'account': 'V0040AccountShort',
        'meta': 'V0040OpenapiMeta',
        'errors': 'list[V0040OpenapiError]',
        'warnings': 'list[V0040OpenapiWarning]'
    }

    attribute_map = {
        'association_condition': 'association_condition',
        'account': 'account',
        'meta': 'meta',
        'errors': 'errors',
        'warnings': 'warnings'
    }

    def __init__(self, association_condition=None, account=None, meta=None, errors=None, warnings=None, local_vars_configuration=None):  # noqa: E501
        """V0040OpenapiAccountsAddCondResp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._association_condition = None
        self._account = None
        self._meta = None
        self._errors = None
        self._warnings = None
        self.discriminator = None

        if association_condition is not None:
            self.association_condition = association_condition
        if account is not None:
            self.account = account
        if meta is not None:
            self.meta = meta
        if errors is not None:
            self.errors = errors
        if warnings is not None:
            self.warnings = warnings

    @property
    def association_condition(self):
        """Gets the association_condition of this V0040OpenapiAccountsAddCondResp.  # noqa: E501


        :return: The association_condition of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :rtype: V0040AccountsAddCond
        """
        return self._association_condition

    @association_condition.setter
    def association_condition(self, association_condition):
        """Sets the association_condition of this V0040OpenapiAccountsAddCondResp.


        :param association_condition: The association_condition of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :type: V0040AccountsAddCond
        """

        self._association_condition = association_condition

    @property
    def account(self):
        """Gets the account of this V0040OpenapiAccountsAddCondResp.  # noqa: E501


        :return: The account of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :rtype: V0040AccountShort
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this V0040OpenapiAccountsAddCondResp.


        :param account: The account of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :type: V0040AccountShort
        """

        self._account = account

    @property
    def meta(self):
        """Gets the meta of this V0040OpenapiAccountsAddCondResp.  # noqa: E501


        :return: The meta of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :rtype: V0040OpenapiMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this V0040OpenapiAccountsAddCondResp.


        :param meta: The meta of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :type: V0040OpenapiMeta
        """

        self._meta = meta

    @property
    def errors(self):
        """Gets the errors of this V0040OpenapiAccountsAddCondResp.  # noqa: E501


        :return: The errors of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :rtype: list[V0040OpenapiError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this V0040OpenapiAccountsAddCondResp.


        :param errors: The errors of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :type: list[V0040OpenapiError]
        """

        self._errors = errors

    @property
    def warnings(self):
        """Gets the warnings of this V0040OpenapiAccountsAddCondResp.  # noqa: E501


        :return: The warnings of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :rtype: list[V0040OpenapiWarning]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this V0040OpenapiAccountsAddCondResp.


        :param warnings: The warnings of this V0040OpenapiAccountsAddCondResp.  # noqa: E501
        :type: list[V0040OpenapiWarning]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040OpenapiAccountsAddCondResp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040OpenapiAccountsAddCondResp):
            return True

        return self.to_dict() != other.to_dict()
