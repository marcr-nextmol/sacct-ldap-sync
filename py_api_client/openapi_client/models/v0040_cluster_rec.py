# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040ClusterRec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'controller': 'V0040ClusterRecController',
        'flags': 'list[str]',
        'name': 'str',
        'nodes': 'str',
        'select_plugin': 'str',
        'associations': 'V0040ClusterRecAssociations',
        'rpc_version': 'int',
        'tres': 'list[V0040Tres]'
    }

    attribute_map = {
        'controller': 'controller',
        'flags': 'flags',
        'name': 'name',
        'nodes': 'nodes',
        'select_plugin': 'select_plugin',
        'associations': 'associations',
        'rpc_version': 'rpc_version',
        'tres': 'tres'
    }

    def __init__(self, controller=None, flags=None, name=None, nodes=None, select_plugin=None, associations=None, rpc_version=None, tres=None, local_vars_configuration=None):  # noqa: E501
        """V0040ClusterRec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._controller = None
        self._flags = None
        self._name = None
        self._nodes = None
        self._select_plugin = None
        self._associations = None
        self._rpc_version = None
        self._tres = None
        self.discriminator = None

        if controller is not None:
            self.controller = controller
        if flags is not None:
            self.flags = flags
        if name is not None:
            self.name = name
        if nodes is not None:
            self.nodes = nodes
        if select_plugin is not None:
            self.select_plugin = select_plugin
        if associations is not None:
            self.associations = associations
        if rpc_version is not None:
            self.rpc_version = rpc_version
        if tres is not None:
            self.tres = tres

    @property
    def controller(self):
        """Gets the controller of this V0040ClusterRec.  # noqa: E501


        :return: The controller of this V0040ClusterRec.  # noqa: E501
        :rtype: V0040ClusterRecController
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this V0040ClusterRec.


        :param controller: The controller of this V0040ClusterRec.  # noqa: E501
        :type: V0040ClusterRecController
        """

        self._controller = controller

    @property
    def flags(self):
        """Gets the flags of this V0040ClusterRec.  # noqa: E501

        Flags  # noqa: E501

        :return: The flags of this V0040ClusterRec.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040ClusterRec.

        Flags  # noqa: E501

        :param flags: The flags of this V0040ClusterRec.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["REGISTERING", "MULTIPLE_SLURMD", "FRONT_END", "FEDERATION", "EXTERNAL"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def name(self):
        """Gets the name of this V0040ClusterRec.  # noqa: E501

        ClusterName  # noqa: E501

        :return: The name of this V0040ClusterRec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040ClusterRec.

        ClusterName  # noqa: E501

        :param name: The name of this V0040ClusterRec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nodes(self):
        """Gets the nodes of this V0040ClusterRec.  # noqa: E501

        Node names  # noqa: E501

        :return: The nodes of this V0040ClusterRec.  # noqa: E501
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this V0040ClusterRec.

        Node names  # noqa: E501

        :param nodes: The nodes of this V0040ClusterRec.  # noqa: E501
        :type: str
        """

        self._nodes = nodes

    @property
    def select_plugin(self):
        """Gets the select_plugin of this V0040ClusterRec.  # noqa: E501


        :return: The select_plugin of this V0040ClusterRec.  # noqa: E501
        :rtype: str
        """
        return self._select_plugin

    @select_plugin.setter
    def select_plugin(self, select_plugin):
        """Sets the select_plugin of this V0040ClusterRec.


        :param select_plugin: The select_plugin of this V0040ClusterRec.  # noqa: E501
        :type: str
        """

        self._select_plugin = select_plugin

    @property
    def associations(self):
        """Gets the associations of this V0040ClusterRec.  # noqa: E501


        :return: The associations of this V0040ClusterRec.  # noqa: E501
        :rtype: V0040ClusterRecAssociations
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this V0040ClusterRec.


        :param associations: The associations of this V0040ClusterRec.  # noqa: E501
        :type: V0040ClusterRecAssociations
        """

        self._associations = associations

    @property
    def rpc_version(self):
        """Gets the rpc_version of this V0040ClusterRec.  # noqa: E501

        RPC version used in the cluster  # noqa: E501

        :return: The rpc_version of this V0040ClusterRec.  # noqa: E501
        :rtype: int
        """
        return self._rpc_version

    @rpc_version.setter
    def rpc_version(self, rpc_version):
        """Sets the rpc_version of this V0040ClusterRec.

        RPC version used in the cluster  # noqa: E501

        :param rpc_version: The rpc_version of this V0040ClusterRec.  # noqa: E501
        :type: int
        """

        self._rpc_version = rpc_version

    @property
    def tres(self):
        """Gets the tres of this V0040ClusterRec.  # noqa: E501


        :return: The tres of this V0040ClusterRec.  # noqa: E501
        :rtype: list[V0040Tres]
        """
        return self._tres

    @tres.setter
    def tres(self, tres):
        """Sets the tres of this V0040ClusterRec.


        :param tres: The tres of this V0040ClusterRec.  # noqa: E501
        :type: list[V0040Tres]
        """

        self._tres = tres

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040ClusterRec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040ClusterRec):
            return True

        return self.to_dict() != other.to_dict()
