# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040OpenapiSlurmdbdConfigResp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'clusters': 'list[V0040ClusterRec]',
        'tres': 'list[V0040Tres]',
        'accounts': 'list[V0040Account]',
        'users': 'list[V0040User]',
        'qos': 'list[V0040Qos]',
        'wckeys': 'list[V0040Wckey]',
        'associations': 'list[V0040Assoc]',
        'instances': 'list[V0040Instance]',
        'meta': 'V0040OpenapiMeta',
        'errors': 'list[V0040OpenapiError]',
        'warnings': 'list[V0040OpenapiWarning]'
    }

    attribute_map = {
        'clusters': 'clusters',
        'tres': 'tres',
        'accounts': 'accounts',
        'users': 'users',
        'qos': 'qos',
        'wckeys': 'wckeys',
        'associations': 'associations',
        'instances': 'instances',
        'meta': 'meta',
        'errors': 'errors',
        'warnings': 'warnings'
    }

    def __init__(self, clusters=None, tres=None, accounts=None, users=None, qos=None, wckeys=None, associations=None, instances=None, meta=None, errors=None, warnings=None, local_vars_configuration=None):  # noqa: E501
        """V0040OpenapiSlurmdbdConfigResp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._clusters = None
        self._tres = None
        self._accounts = None
        self._users = None
        self._qos = None
        self._wckeys = None
        self._associations = None
        self._instances = None
        self._meta = None
        self._errors = None
        self._warnings = None
        self.discriminator = None

        if clusters is not None:
            self.clusters = clusters
        if tres is not None:
            self.tres = tres
        if accounts is not None:
            self.accounts = accounts
        if users is not None:
            self.users = users
        if qos is not None:
            self.qos = qos
        if wckeys is not None:
            self.wckeys = wckeys
        if associations is not None:
            self.associations = associations
        if instances is not None:
            self.instances = instances
        if meta is not None:
            self.meta = meta
        if errors is not None:
            self.errors = errors
        if warnings is not None:
            self.warnings = warnings

    @property
    def clusters(self):
        """Gets the clusters of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The clusters of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040ClusterRec]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this V0040OpenapiSlurmdbdConfigResp.


        :param clusters: The clusters of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040ClusterRec]
        """

        self._clusters = clusters

    @property
    def tres(self):
        """Gets the tres of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The tres of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040Tres]
        """
        return self._tres

    @tres.setter
    def tres(self, tres):
        """Sets the tres of this V0040OpenapiSlurmdbdConfigResp.


        :param tres: The tres of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040Tres]
        """

        self._tres = tres

    @property
    def accounts(self):
        """Gets the accounts of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The accounts of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040Account]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this V0040OpenapiSlurmdbdConfigResp.


        :param accounts: The accounts of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040Account]
        """

        self._accounts = accounts

    @property
    def users(self):
        """Gets the users of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The users of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this V0040OpenapiSlurmdbdConfigResp.


        :param users: The users of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040User]
        """

        self._users = users

    @property
    def qos(self):
        """Gets the qos of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The qos of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040Qos]
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this V0040OpenapiSlurmdbdConfigResp.


        :param qos: The qos of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040Qos]
        """

        self._qos = qos

    @property
    def wckeys(self):
        """Gets the wckeys of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The wckeys of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040Wckey]
        """
        return self._wckeys

    @wckeys.setter
    def wckeys(self, wckeys):
        """Sets the wckeys of this V0040OpenapiSlurmdbdConfigResp.


        :param wckeys: The wckeys of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040Wckey]
        """

        self._wckeys = wckeys

    @property
    def associations(self):
        """Gets the associations of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The associations of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040Assoc]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this V0040OpenapiSlurmdbdConfigResp.


        :param associations: The associations of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040Assoc]
        """

        self._associations = associations

    @property
    def instances(self):
        """Gets the instances of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The instances of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040Instance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this V0040OpenapiSlurmdbdConfigResp.


        :param instances: The instances of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040Instance]
        """

        self._instances = instances

    @property
    def meta(self):
        """Gets the meta of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The meta of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: V0040OpenapiMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this V0040OpenapiSlurmdbdConfigResp.


        :param meta: The meta of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: V0040OpenapiMeta
        """

        self._meta = meta

    @property
    def errors(self):
        """Gets the errors of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The errors of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040OpenapiError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this V0040OpenapiSlurmdbdConfigResp.


        :param errors: The errors of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040OpenapiError]
        """

        self._errors = errors

    @property
    def warnings(self):
        """Gets the warnings of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501


        :return: The warnings of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :rtype: list[V0040OpenapiWarning]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this V0040OpenapiSlurmdbdConfigResp.


        :param warnings: The warnings of this V0040OpenapiSlurmdbdConfigResp.  # noqa: E501
        :type: list[V0040OpenapiWarning]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040OpenapiSlurmdbdConfigResp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040OpenapiSlurmdbdConfigResp):
            return True

        return self.to_dict() != other.to_dict()
