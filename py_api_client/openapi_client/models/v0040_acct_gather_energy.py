# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040AcctGatherEnergy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'average_watts': 'int',
        'base_consumed_energy': 'int',
        'consumed_energy': 'int',
        'current_watts': 'V0040Uint32NoVal',
        'previous_consumed_energy': 'int',
        'last_collected': 'int'
    }

    attribute_map = {
        'average_watts': 'average_watts',
        'base_consumed_energy': 'base_consumed_energy',
        'consumed_energy': 'consumed_energy',
        'current_watts': 'current_watts',
        'previous_consumed_energy': 'previous_consumed_energy',
        'last_collected': 'last_collected'
    }

    def __init__(self, average_watts=None, base_consumed_energy=None, consumed_energy=None, current_watts=None, previous_consumed_energy=None, last_collected=None, local_vars_configuration=None):  # noqa: E501
        """V0040AcctGatherEnergy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._average_watts = None
        self._base_consumed_energy = None
        self._consumed_energy = None
        self._current_watts = None
        self._previous_consumed_energy = None
        self._last_collected = None
        self.discriminator = None

        if average_watts is not None:
            self.average_watts = average_watts
        if base_consumed_energy is not None:
            self.base_consumed_energy = base_consumed_energy
        if consumed_energy is not None:
            self.consumed_energy = consumed_energy
        if current_watts is not None:
            self.current_watts = current_watts
        if previous_consumed_energy is not None:
            self.previous_consumed_energy = previous_consumed_energy
        if last_collected is not None:
            self.last_collected = last_collected

    @property
    def average_watts(self):
        """Gets the average_watts of this V0040AcctGatherEnergy.  # noqa: E501

        Average power consumption, in watts  # noqa: E501

        :return: The average_watts of this V0040AcctGatherEnergy.  # noqa: E501
        :rtype: int
        """
        return self._average_watts

    @average_watts.setter
    def average_watts(self, average_watts):
        """Sets the average_watts of this V0040AcctGatherEnergy.

        Average power consumption, in watts  # noqa: E501

        :param average_watts: The average_watts of this V0040AcctGatherEnergy.  # noqa: E501
        :type: int
        """

        self._average_watts = average_watts

    @property
    def base_consumed_energy(self):
        """Gets the base_consumed_energy of this V0040AcctGatherEnergy.  # noqa: E501

        The energy consumed between when the node was powered on and the last time it was registered by slurmd, in joules  # noqa: E501

        :return: The base_consumed_energy of this V0040AcctGatherEnergy.  # noqa: E501
        :rtype: int
        """
        return self._base_consumed_energy

    @base_consumed_energy.setter
    def base_consumed_energy(self, base_consumed_energy):
        """Sets the base_consumed_energy of this V0040AcctGatherEnergy.

        The energy consumed between when the node was powered on and the last time it was registered by slurmd, in joules  # noqa: E501

        :param base_consumed_energy: The base_consumed_energy of this V0040AcctGatherEnergy.  # noqa: E501
        :type: int
        """

        self._base_consumed_energy = base_consumed_energy

    @property
    def consumed_energy(self):
        """Gets the consumed_energy of this V0040AcctGatherEnergy.  # noqa: E501

        The energy consumed between the last time the node was registered by the slurmd daemon and the last node energy accounting sample, in joules  # noqa: E501

        :return: The consumed_energy of this V0040AcctGatherEnergy.  # noqa: E501
        :rtype: int
        """
        return self._consumed_energy

    @consumed_energy.setter
    def consumed_energy(self, consumed_energy):
        """Sets the consumed_energy of this V0040AcctGatherEnergy.

        The energy consumed between the last time the node was registered by the slurmd daemon and the last node energy accounting sample, in joules  # noqa: E501

        :param consumed_energy: The consumed_energy of this V0040AcctGatherEnergy.  # noqa: E501
        :type: int
        """

        self._consumed_energy = consumed_energy

    @property
    def current_watts(self):
        """Gets the current_watts of this V0040AcctGatherEnergy.  # noqa: E501


        :return: The current_watts of this V0040AcctGatherEnergy.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._current_watts

    @current_watts.setter
    def current_watts(self, current_watts):
        """Sets the current_watts of this V0040AcctGatherEnergy.


        :param current_watts: The current_watts of this V0040AcctGatherEnergy.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._current_watts = current_watts

    @property
    def previous_consumed_energy(self):
        """Gets the previous_consumed_energy of this V0040AcctGatherEnergy.  # noqa: E501

        Previous value of consumed_energy  # noqa: E501

        :return: The previous_consumed_energy of this V0040AcctGatherEnergy.  # noqa: E501
        :rtype: int
        """
        return self._previous_consumed_energy

    @previous_consumed_energy.setter
    def previous_consumed_energy(self, previous_consumed_energy):
        """Sets the previous_consumed_energy of this V0040AcctGatherEnergy.

        Previous value of consumed_energy  # noqa: E501

        :param previous_consumed_energy: The previous_consumed_energy of this V0040AcctGatherEnergy.  # noqa: E501
        :type: int
        """

        self._previous_consumed_energy = previous_consumed_energy

    @property
    def last_collected(self):
        """Gets the last_collected of this V0040AcctGatherEnergy.  # noqa: E501

        Time when energy data was last retrieved (UNIX timestamp)  # noqa: E501

        :return: The last_collected of this V0040AcctGatherEnergy.  # noqa: E501
        :rtype: int
        """
        return self._last_collected

    @last_collected.setter
    def last_collected(self, last_collected):
        """Sets the last_collected of this V0040AcctGatherEnergy.

        Time when energy data was last retrieved (UNIX timestamp)  # noqa: E501

        :param last_collected: The last_collected of this V0040AcctGatherEnergy.  # noqa: E501
        :type: int
        """

        self._last_collected = last_collected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040AcctGatherEnergy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040AcctGatherEnergy):
            return True

        return self.to_dict() != other.to_dict()
