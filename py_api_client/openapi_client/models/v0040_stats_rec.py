# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040StatsRec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time_start': 'int',
        'rollups': 'list[object]',
        'rp_cs': 'list[V0040StatsRpc]',
        'users': 'list[V0040StatsUser]'
    }

    attribute_map = {
        'time_start': 'time_start',
        'rollups': 'rollups',
        'rp_cs': 'RPCs',
        'users': 'users'
    }

    def __init__(self, time_start=None, rollups=None, rp_cs=None, users=None, local_vars_configuration=None):  # noqa: E501
        """V0040StatsRec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time_start = None
        self._rollups = None
        self._rp_cs = None
        self._users = None
        self.discriminator = None

        if time_start is not None:
            self.time_start = time_start
        if rollups is not None:
            self.rollups = rollups
        if rp_cs is not None:
            self.rp_cs = rp_cs
        if users is not None:
            self.users = users

    @property
    def time_start(self):
        """Gets the time_start of this V0040StatsRec.  # noqa: E501

        When data collection started (UNIX timestamp)  # noqa: E501

        :return: The time_start of this V0040StatsRec.  # noqa: E501
        :rtype: int
        """
        return self._time_start

    @time_start.setter
    def time_start(self, time_start):
        """Sets the time_start of this V0040StatsRec.

        When data collection started (UNIX timestamp)  # noqa: E501

        :param time_start: The time_start of this V0040StatsRec.  # noqa: E501
        :type: int
        """

        self._time_start = time_start

    @property
    def rollups(self):
        """Gets the rollups of this V0040StatsRec.  # noqa: E501

        list of recorded rollup statistics  # noqa: E501

        :return: The rollups of this V0040StatsRec.  # noqa: E501
        :rtype: list[object]
        """
        return self._rollups

    @rollups.setter
    def rollups(self, rollups):
        """Sets the rollups of this V0040StatsRec.

        list of recorded rollup statistics  # noqa: E501

        :param rollups: The rollups of this V0040StatsRec.  # noqa: E501
        :type: list[object]
        """

        self._rollups = rollups

    @property
    def rp_cs(self):
        """Gets the rp_cs of this V0040StatsRec.  # noqa: E501


        :return: The rp_cs of this V0040StatsRec.  # noqa: E501
        :rtype: list[V0040StatsRpc]
        """
        return self._rp_cs

    @rp_cs.setter
    def rp_cs(self, rp_cs):
        """Sets the rp_cs of this V0040StatsRec.


        :param rp_cs: The rp_cs of this V0040StatsRec.  # noqa: E501
        :type: list[V0040StatsRpc]
        """

        self._rp_cs = rp_cs

    @property
    def users(self):
        """Gets the users of this V0040StatsRec.  # noqa: E501


        :return: The users of this V0040StatsRec.  # noqa: E501
        :rtype: list[V0040StatsUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this V0040StatsRec.


        :param users: The users of this V0040StatsRec.  # noqa: E501
        :type: list[V0040StatsUser]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040StatsRec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040StatsRec):
            return True

        return self.to_dict() != other.to_dict()
