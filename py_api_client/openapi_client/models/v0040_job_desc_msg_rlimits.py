# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040JobDescMsgRlimits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu': 'V0040Uint64NoVal',
        'fsize': 'V0040Uint64NoVal',
        'data': 'V0040Uint64NoVal',
        'stack': 'V0040Uint64NoVal',
        'core': 'V0040Uint64NoVal',
        'rss': 'V0040Uint64NoVal',
        'nproc': 'V0040Uint64NoVal',
        'nofile': 'V0040Uint64NoVal',
        'memlock': 'V0040Uint64NoVal',
        '_as': 'V0040Uint64NoVal'
    }

    attribute_map = {
        'cpu': 'cpu',
        'fsize': 'fsize',
        'data': 'data',
        'stack': 'stack',
        'core': 'core',
        'rss': 'rss',
        'nproc': 'nproc',
        'nofile': 'nofile',
        'memlock': 'memlock',
        '_as': 'as'
    }

    def __init__(self, cpu=None, fsize=None, data=None, stack=None, core=None, rss=None, nproc=None, nofile=None, memlock=None, _as=None, local_vars_configuration=None):  # noqa: E501
        """V0040JobDescMsgRlimits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpu = None
        self._fsize = None
        self._data = None
        self._stack = None
        self._core = None
        self._rss = None
        self._nproc = None
        self._nofile = None
        self._memlock = None
        self.__as = None
        self.discriminator = None

        if cpu is not None:
            self.cpu = cpu
        if fsize is not None:
            self.fsize = fsize
        if data is not None:
            self.data = data
        if stack is not None:
            self.stack = stack
        if core is not None:
            self.core = core
        if rss is not None:
            self.rss = rss
        if nproc is not None:
            self.nproc = nproc
        if nofile is not None:
            self.nofile = nofile
        if memlock is not None:
            self.memlock = memlock
        if _as is not None:
            self._as = _as

    @property
    def cpu(self):
        """Gets the cpu of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The cpu of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this V0040JobDescMsgRlimits.


        :param cpu: The cpu of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._cpu = cpu

    @property
    def fsize(self):
        """Gets the fsize of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The fsize of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._fsize

    @fsize.setter
    def fsize(self, fsize):
        """Sets the fsize of this V0040JobDescMsgRlimits.


        :param fsize: The fsize of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._fsize = fsize

    @property
    def data(self):
        """Gets the data of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The data of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this V0040JobDescMsgRlimits.


        :param data: The data of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._data = data

    @property
    def stack(self):
        """Gets the stack of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The stack of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this V0040JobDescMsgRlimits.


        :param stack: The stack of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._stack = stack

    @property
    def core(self):
        """Gets the core of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The core of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._core

    @core.setter
    def core(self, core):
        """Sets the core of this V0040JobDescMsgRlimits.


        :param core: The core of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._core = core

    @property
    def rss(self):
        """Gets the rss of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The rss of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._rss

    @rss.setter
    def rss(self, rss):
        """Sets the rss of this V0040JobDescMsgRlimits.


        :param rss: The rss of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._rss = rss

    @property
    def nproc(self):
        """Gets the nproc of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The nproc of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._nproc

    @nproc.setter
    def nproc(self, nproc):
        """Sets the nproc of this V0040JobDescMsgRlimits.


        :param nproc: The nproc of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._nproc = nproc

    @property
    def nofile(self):
        """Gets the nofile of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The nofile of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._nofile

    @nofile.setter
    def nofile(self, nofile):
        """Sets the nofile of this V0040JobDescMsgRlimits.


        :param nofile: The nofile of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._nofile = nofile

    @property
    def memlock(self):
        """Gets the memlock of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The memlock of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._memlock

    @memlock.setter
    def memlock(self, memlock):
        """Sets the memlock of this V0040JobDescMsgRlimits.


        :param memlock: The memlock of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._memlock = memlock

    @property
    def _as(self):
        """Gets the _as of this V0040JobDescMsgRlimits.  # noqa: E501


        :return: The _as of this V0040JobDescMsgRlimits.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self.__as

    @_as.setter
    def _as(self, _as):
        """Sets the _as of this V0040JobDescMsgRlimits.


        :param _as: The _as of this V0040JobDescMsgRlimits.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self.__as = _as

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040JobDescMsgRlimits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040JobDescMsgRlimits):
            return True

        return self.to_dict() != other.to_dict()
