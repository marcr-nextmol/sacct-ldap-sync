# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm  # noqa: E501

    The version of the OpenAPI document: Slurm-24.05.4&openapi/slurmctld&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V0040ReservationInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accounts': 'str',
        'burst_buffer': 'str',
        'core_count': 'int',
        'core_specializations': 'list[V0040ReservationCoreSpec]',
        'end_time': 'V0040Uint64NoVal',
        'features': 'str',
        'flags': 'list[str]',
        'groups': 'str',
        'licenses': 'str',
        'max_start_delay': 'int',
        'name': 'str',
        'node_count': 'int',
        'node_list': 'str',
        'partition': 'str',
        'purge_completed': 'V0040ReservationInfoPurgeCompleted',
        'start_time': 'V0040Uint64NoVal',
        'watts': 'V0040Uint32NoVal',
        'tres': 'str',
        'users': 'str'
    }

    attribute_map = {
        'accounts': 'accounts',
        'burst_buffer': 'burst_buffer',
        'core_count': 'core_count',
        'core_specializations': 'core_specializations',
        'end_time': 'end_time',
        'features': 'features',
        'flags': 'flags',
        'groups': 'groups',
        'licenses': 'licenses',
        'max_start_delay': 'max_start_delay',
        'name': 'name',
        'node_count': 'node_count',
        'node_list': 'node_list',
        'partition': 'partition',
        'purge_completed': 'purge_completed',
        'start_time': 'start_time',
        'watts': 'watts',
        'tres': 'tres',
        'users': 'users'
    }

    def __init__(self, accounts=None, burst_buffer=None, core_count=None, core_specializations=None, end_time=None, features=None, flags=None, groups=None, licenses=None, max_start_delay=None, name=None, node_count=None, node_list=None, partition=None, purge_completed=None, start_time=None, watts=None, tres=None, users=None, local_vars_configuration=None):  # noqa: E501
        """V0040ReservationInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accounts = None
        self._burst_buffer = None
        self._core_count = None
        self._core_specializations = None
        self._end_time = None
        self._features = None
        self._flags = None
        self._groups = None
        self._licenses = None
        self._max_start_delay = None
        self._name = None
        self._node_count = None
        self._node_list = None
        self._partition = None
        self._purge_completed = None
        self._start_time = None
        self._watts = None
        self._tres = None
        self._users = None
        self.discriminator = None

        if accounts is not None:
            self.accounts = accounts
        if burst_buffer is not None:
            self.burst_buffer = burst_buffer
        if core_count is not None:
            self.core_count = core_count
        if core_specializations is not None:
            self.core_specializations = core_specializations
        if end_time is not None:
            self.end_time = end_time
        if features is not None:
            self.features = features
        if flags is not None:
            self.flags = flags
        if groups is not None:
            self.groups = groups
        if licenses is not None:
            self.licenses = licenses
        if max_start_delay is not None:
            self.max_start_delay = max_start_delay
        if name is not None:
            self.name = name
        if node_count is not None:
            self.node_count = node_count
        if node_list is not None:
            self.node_list = node_list
        if partition is not None:
            self.partition = partition
        if purge_completed is not None:
            self.purge_completed = purge_completed
        if start_time is not None:
            self.start_time = start_time
        if watts is not None:
            self.watts = watts
        if tres is not None:
            self.tres = tres
        if users is not None:
            self.users = users

    @property
    def accounts(self):
        """Gets the accounts of this V0040ReservationInfo.  # noqa: E501

        Comma separated list of permitted accounts  # noqa: E501

        :return: The accounts of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this V0040ReservationInfo.

        Comma separated list of permitted accounts  # noqa: E501

        :param accounts: The accounts of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._accounts = accounts

    @property
    def burst_buffer(self):
        """Gets the burst_buffer of this V0040ReservationInfo.  # noqa: E501

        BurstBuffer  # noqa: E501

        :return: The burst_buffer of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._burst_buffer

    @burst_buffer.setter
    def burst_buffer(self, burst_buffer):
        """Sets the burst_buffer of this V0040ReservationInfo.

        BurstBuffer  # noqa: E501

        :param burst_buffer: The burst_buffer of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._burst_buffer = burst_buffer

    @property
    def core_count(self):
        """Gets the core_count of this V0040ReservationInfo.  # noqa: E501

        CoreCnt  # noqa: E501

        :return: The core_count of this V0040ReservationInfo.  # noqa: E501
        :rtype: int
        """
        return self._core_count

    @core_count.setter
    def core_count(self, core_count):
        """Sets the core_count of this V0040ReservationInfo.

        CoreCnt  # noqa: E501

        :param core_count: The core_count of this V0040ReservationInfo.  # noqa: E501
        :type: int
        """

        self._core_count = core_count

    @property
    def core_specializations(self):
        """Gets the core_specializations of this V0040ReservationInfo.  # noqa: E501


        :return: The core_specializations of this V0040ReservationInfo.  # noqa: E501
        :rtype: list[V0040ReservationCoreSpec]
        """
        return self._core_specializations

    @core_specializations.setter
    def core_specializations(self, core_specializations):
        """Sets the core_specializations of this V0040ReservationInfo.


        :param core_specializations: The core_specializations of this V0040ReservationInfo.  # noqa: E501
        :type: list[V0040ReservationCoreSpec]
        """

        self._core_specializations = core_specializations

    @property
    def end_time(self):
        """Gets the end_time of this V0040ReservationInfo.  # noqa: E501


        :return: The end_time of this V0040ReservationInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V0040ReservationInfo.


        :param end_time: The end_time of this V0040ReservationInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._end_time = end_time

    @property
    def features(self):
        """Gets the features of this V0040ReservationInfo.  # noqa: E501

        Features  # noqa: E501

        :return: The features of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this V0040ReservationInfo.

        Features  # noqa: E501

        :param features: The features of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._features = features

    @property
    def flags(self):
        """Gets the flags of this V0040ReservationInfo.  # noqa: E501

        Flags associated with the reservation  # noqa: E501

        :return: The flags of this V0040ReservationInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this V0040ReservationInfo.

        Flags associated with the reservation  # noqa: E501

        :param flags: The flags of this V0040ReservationInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["MAINT", "NO_MAINT", "DAILY", "NO_DAILY", "WEEKLY", "NO_WEEKLY", "IGNORE_JOBS", "NO_IGNORE_JOBS", "ANY_NODES", "STATIC", "NO_STATIC", "PART_NODES", "NO_PART_NODES", "OVERLAP", "SPEC_NODES", "TIME_FLOAT", "REPLACE", "ALL_NODES", "PURGE_COMP", "WEEKDAY", "NO_WEEKDAY", "WEEKEND", "NO_WEEKEND", "FLEX", "NO_FLEX", "DURATION_PLUS", "DURATION_MINUS", "NO_HOLD_JOBS_AFTER_END", "NO_PURGE_COMP", "MAGNETIC", "SKIP", "HOURLY", "NO_HOURLY", "REOCCURRING"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(flags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._flags = flags

    @property
    def groups(self):
        """Gets the groups of this V0040ReservationInfo.  # noqa: E501

        Groups  # noqa: E501

        :return: The groups of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this V0040ReservationInfo.

        Groups  # noqa: E501

        :param groups: The groups of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._groups = groups

    @property
    def licenses(self):
        """Gets the licenses of this V0040ReservationInfo.  # noqa: E501

        Licenses  # noqa: E501

        :return: The licenses of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this V0040ReservationInfo.

        Licenses  # noqa: E501

        :param licenses: The licenses of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._licenses = licenses

    @property
    def max_start_delay(self):
        """Gets the max_start_delay of this V0040ReservationInfo.  # noqa: E501

        MaxStartDelay in seconds  # noqa: E501

        :return: The max_start_delay of this V0040ReservationInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_start_delay

    @max_start_delay.setter
    def max_start_delay(self, max_start_delay):
        """Sets the max_start_delay of this V0040ReservationInfo.

        MaxStartDelay in seconds  # noqa: E501

        :param max_start_delay: The max_start_delay of this V0040ReservationInfo.  # noqa: E501
        :type: int
        """

        self._max_start_delay = max_start_delay

    @property
    def name(self):
        """Gets the name of this V0040ReservationInfo.  # noqa: E501

        ReservationName  # noqa: E501

        :return: The name of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V0040ReservationInfo.

        ReservationName  # noqa: E501

        :param name: The name of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node_count(self):
        """Gets the node_count of this V0040ReservationInfo.  # noqa: E501

        NodeCnt  # noqa: E501

        :return: The node_count of this V0040ReservationInfo.  # noqa: E501
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this V0040ReservationInfo.

        NodeCnt  # noqa: E501

        :param node_count: The node_count of this V0040ReservationInfo.  # noqa: E501
        :type: int
        """

        self._node_count = node_count

    @property
    def node_list(self):
        """Gets the node_list of this V0040ReservationInfo.  # noqa: E501

        Nodes  # noqa: E501

        :return: The node_list of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_list

    @node_list.setter
    def node_list(self, node_list):
        """Sets the node_list of this V0040ReservationInfo.

        Nodes  # noqa: E501

        :param node_list: The node_list of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._node_list = node_list

    @property
    def partition(self):
        """Gets the partition of this V0040ReservationInfo.  # noqa: E501

        PartitionName  # noqa: E501

        :return: The partition of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this V0040ReservationInfo.

        PartitionName  # noqa: E501

        :param partition: The partition of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def purge_completed(self):
        """Gets the purge_completed of this V0040ReservationInfo.  # noqa: E501


        :return: The purge_completed of this V0040ReservationInfo.  # noqa: E501
        :rtype: V0040ReservationInfoPurgeCompleted
        """
        return self._purge_completed

    @purge_completed.setter
    def purge_completed(self, purge_completed):
        """Sets the purge_completed of this V0040ReservationInfo.


        :param purge_completed: The purge_completed of this V0040ReservationInfo.  # noqa: E501
        :type: V0040ReservationInfoPurgeCompleted
        """

        self._purge_completed = purge_completed

    @property
    def start_time(self):
        """Gets the start_time of this V0040ReservationInfo.  # noqa: E501


        :return: The start_time of this V0040ReservationInfo.  # noqa: E501
        :rtype: V0040Uint64NoVal
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V0040ReservationInfo.


        :param start_time: The start_time of this V0040ReservationInfo.  # noqa: E501
        :type: V0040Uint64NoVal
        """

        self._start_time = start_time

    @property
    def watts(self):
        """Gets the watts of this V0040ReservationInfo.  # noqa: E501


        :return: The watts of this V0040ReservationInfo.  # noqa: E501
        :rtype: V0040Uint32NoVal
        """
        return self._watts

    @watts.setter
    def watts(self, watts):
        """Sets the watts of this V0040ReservationInfo.


        :param watts: The watts of this V0040ReservationInfo.  # noqa: E501
        :type: V0040Uint32NoVal
        """

        self._watts = watts

    @property
    def tres(self):
        """Gets the tres of this V0040ReservationInfo.  # noqa: E501

        Comma separated list of required TRES  # noqa: E501

        :return: The tres of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._tres

    @tres.setter
    def tres(self, tres):
        """Sets the tres of this V0040ReservationInfo.

        Comma separated list of required TRES  # noqa: E501

        :param tres: The tres of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._tres = tres

    @property
    def users(self):
        """Gets the users of this V0040ReservationInfo.  # noqa: E501

        Comma separated list of permitted users  # noqa: E501

        :return: The users of this V0040ReservationInfo.  # noqa: E501
        :rtype: str
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this V0040ReservationInfo.

        Comma separated list of permitted users  # noqa: E501

        :param users: The users of this V0040ReservationInfo.  # noqa: E501
        :type: str
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0040ReservationInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V0040ReservationInfo):
            return True

        return self.to_dict() != other.to_dict()
